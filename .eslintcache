[{"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js":"1","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js":"2","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js":"3","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx":"4","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx":"5","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx":"6","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx":"7","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx":"8","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx":"9","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\leaderboard.jsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":1372,"mtime":1612225415823,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":14267,"mtime":1612448036594,"results":"15","hashOfConfig":"12"},{"size":33616,"mtime":1612441533981,"results":"16","hashOfConfig":"12"},{"size":30442,"mtime":1612448071447,"results":"17","hashOfConfig":"12"},{"size":91,"mtime":1607656069637,"results":"18","hashOfConfig":"12"},{"size":36573,"mtime":1612444478349,"results":"19","hashOfConfig":"12"},{"size":13816,"mtime":1612444413499,"results":"20","hashOfConfig":"12"},{"size":15393,"mtime":1612444472009,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"plqyyh",{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"24"},"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js",[],["48","49"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js",["50","51","52","53"],"import './App.css';\nimport HomeScreen from './components/homeScreen';\nimport Navbar from './components/navbar';\nimport Login from './components/login';\nimport Game from './components/game';\nimport Leaderboard from './components/leaderboard';\nimport axios from 'axios'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  BrowserRouter\n} from \"react-router-dom\";\nimport { PageContext } from './pageContext'\nimport { useEffect, useState } from 'react';\nimport Account from './components/account';\n\n\n\nfunction App() {\n\nconst [value, setValue] = useState({accountInfo: 0, logged: false, username: \"\"});\n\n  return (\n    <BrowserRouter>\n    <Switch>\n    <PageContext.Provider value={value}>  \n    <Route exact path=\"/\" render = {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <HomeScreen/>\n      </div>\n    } />\n    <Route exact path=\"/login\" render= { props =>\n    <div> \n    <Login/>\n    </div>\n    } />\n     <Route exact path=\"/game\" render= {props =>\n     <div className=\"App\">\n     <Navbar/>\n     <Game/>\n     </div>\n    } />\n    <Route exact path=\"/account\" render= {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <Account/>\n      </div>\n    } />\n    <Route exact path=\"/leaderboard\" render= { props =>\n    <div> \n    <Leaderboard/>\n    </div>\n    } />\n    </PageContext.Provider>\n    </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx",["54","55","56","57","58","59"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx",["60","61","62"],"import {useRef, useState, useEffect} from 'react'\r\nimport '../App.css';\r\nimport * as THREE from \"three\";\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { SimplifyModifier } from 'three/examples/jsm/modifiers/SimplifyModifier.js';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Lensflare, LensflareElement} from 'three/examples/jsm/objects/Lensflare.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faGithub, faLinkedin} from '@fortawesome/free-brands-svg-icons'\r\nimport { faWindowClose, faQuestionCircle, faMapMarked } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\n\r\nlet style = {\r\n    container: {\r\n        backgroundColor: 'transparent',\r\n        position: 'relative',\r\n        top: \"6.5rem\",\r\n        minHeight: '100%',\r\n        maxHeight: '100%',\r\n        minWidth: '100%',\r\n        maxWidth: '100%'\r\n    },\r\n    title: {\r\n        display: 'flex',\r\n        color: 'brown',\r\n        cursor: \"default\",\r\n        fontSize: '6rem',\r\n        justifyContent: 'center'\r\n    },\r\n    canvas: {\r\n        display: 'grid',\r\n        position: 'fixed',\r\n        minHeight: '100vh',\r\n        minWidth: '1920px',\r\n        zIndex: \"2\",\r\n        maxWidth: '1920px',\r\n    },\r\n    explanationBox: {\r\n        display: \"grid\",\r\n        backgroundColor: \"black\",\r\n        width: \"70%\",\r\n        opacity: \"0.8\",\r\n        zIndex: \"2\",\r\n        minHeight: \"100vh\",\r\n        left: \"15%\",\r\n        position: \"relative\",\r\n        boxShadow: \"0 10px 20px gray, 0 6px 6px gray\",\r\n        transition: \"all 0.5s ease-out\"\r\n    },\r\n    footer: {\r\n        backgroundColor: \"rgb(32, 30, 29)\",\r\n        color: 'white',\r\n        zIndex: \"2\",\r\n        display: 'flex',\r\n        fontSize: \"80%\",\r\n        justifyContent: \"center\",\r\n        height: '10rem',\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n    },\r\n    playButton: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        background: \"black\",\r\n        fontWeight: \"bold\",\r\n        width: \"20%\",\r\n        height: \"4rem\",\r\n        zIndex: \"2\",\r\n        marginBottom: \"5%\",\r\n        marginTop: \"5%\",\r\n        left:\"40%\",\r\n        boxShadow: \"0px 7px 11px 0px rgba(50, 50, 50, 0.75)\",\r\n        position: \"relative\",\r\n        display: \"flex\",\r\n    }\r\n}\r\n\r\nconst HomeScreen = () => {\r\n    const canvas = useRef(0);\r\n    let switcher = useRef(0);\r\n    let camera = useRef(0);\r\n    let mixer = useRef(0);\r\n    let angleSphereForgrass = useRef(0);\r\n    let grassRotationAngle = useRef(0);\r\n    const [componentLoaded,\r\n        setComponentLoaded] = useState(false);\r\n    let loadingScreenMessages = useRef(0);\r\n    let percentage = useRef(0);\r\n    let fadeScreen = useRef(0);\r\n    const [showExplainBox, setShowExplainBox] = useState(true);\r\n    let explainBox = useRef(0);\r\n    let youtubeVideo = useRef(0);\r\n    let titleYoutube = useRef(0);\r\n    let bar1 = useRef(0);\r\n    let bar2 = useRef(0);\r\n    let bar3 = useRef(0);\r\n    let audio1 = useRef(0);\r\n    let musicExplain = useRef(0);\r\n    const [smartphoneView, setSmartphoneView] = useState(false);\r\n    useEffect(() => {\r\n        if(componentLoaded === false){\r\n        let height = canvas.current.clientHeight;\r\n        let width =  document.documentElement.clientWidth;\r\n        let manager = new THREE.LoadingManager();// WHEN MODELS ARE LOADED .onLoad will be called\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        camera.current = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .current.position\r\n            .set(9, -0.5, -7);\r\n        camera\r\n        .current.rotation.y = 2.3;\r\n        camera\r\n        .current.rotation.x = -0.1;\r\n\r\n        //DIRECTIONAL LIGHT\r\n        const hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.6 );\r\n        hemiLight.color.setHSL( 0.6, 1, 0.6 );\r\n        hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );\r\n        hemiLight.position.set( 0, 50, 0 );\r\n        scene.add( hemiLight );\r\n\r\n        const hemiLightHelper = new THREE.HemisphereLightHelper( hemiLight, 10 );\r\n        scene.add( hemiLightHelper );\r\n\r\n        //\r\n\r\n        const textureFlare = new THREE.TextureLoader(manager);\r\n        const textureFlare0 = textureFlare.load( 'lensflare0.png' );\r\n        const textureFlare3 = textureFlare.load( 'lensflare3.png' );\r\n        addLight( 0.55, 0.9, 0.5, 5000, 0, 1000 );\r\n        addLight( 0.08, 0.8, 0.5, -1000, 100, 1005 );\r\n        addLight( 0.995, 0.5, 0.9, 5000, 5000, 1000 );\r\n\r\n        function addLight( h, s, l, x, y, z ) {\r\n\r\n            const light = new THREE.PointLight( 0xffffff, 1.5, 2000 );\r\n            light.color.setHSL( h, s, l );\r\n            light.position.set( x, y, z );\r\n            light.castShadow = true;\r\n            scene.add( light );\r\n\r\n            const lensflare = new Lensflare();\r\n            lensflare.addElement( new LensflareElement( textureFlare0, 700, 0, light.color ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n            light.add( lensflare );\r\n        }\r\n\r\n        let clock = new THREE.Clock();\r\n        window.addEventListener('resize', () => {\r\n            if (canvas.current !== null) {\r\n                width = document.documentElement.clientWidth\r\n                height = document.documentElement.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.current.aspect = width / height;\r\n                camera.current.updateProjectionMatrix();\r\n            }\r\n        });\r\n\r\n        //// PARTICLES\r\n        let particleCount = 1000\r\n        let particleDistance = 53;\r\n        let particles = new THREE.Geometry();\r\n        let texture = new THREE\r\n            .TextureLoader()\r\n            .load('leaftexture.png');\r\n        let pMaterial = new THREE.PointsMaterial({\r\n            color: 'green', size: 0.3, map: texture, alphaTest: 0.1, // removes black squares\r\n            blending: THREE.NormalBlending,\r\n            transparent: true\r\n        });\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let posX = (Math.random() - 0.5) * particleDistance;\r\n            let posY = (Math.random() - 0.5) * particleDistance;\r\n            let posZ = (Math.random() - 0.5) * particleDistance;\r\n            let particle = new THREE.Vector3(posX, posY, posZ);\r\n            particles\r\n                .vertices\r\n                .push(particle);\r\n        }\r\n\r\n        // create the particle system\r\n        let particleSys = new THREE.Points(particles, pMaterial);\r\n        particleSys.name = 'particleSys';\r\n        renderer.setAnimationLoop(() => {\r\n            let particleSys = scene.getObjectByName('particleSys');\r\n            particleSys\r\n                .geometry\r\n                .vertices\r\n                .forEach(particle => {\r\n                    particle.y -= 0.01;\r\n                    if (particle.y < -10) {\r\n                        particle.y = 20\r\n                    }\r\n                    particleSys.geometry.verticesNeedUpdate = true;\r\n                })\r\n            renderer.render(scene, camera.current)\r\n        })\r\n        scene.add(particleSys)\r\n        // CHARACTER ADDON FOR MAIN MENU\r\n        const loader = new GLTFLoader(manager)\r\n        loader.load(\"knight.gltf\", function (object) {\r\n            object.scene.position.x = 0;\r\n            object.scene.position.y = -2;\r\n            object.scene.position.z = -2;\r\n            mixer.current = new THREE.AnimationMixer(object.scene);\r\n            let action = mixer.current.clipAction(object.animations[15]);\r\n            action.play();\r\n            scene.add(object.scene);\r\n            switcher.current = 1;\r\n        },);\r\n        // setTimeout(()=>mixer.clipAction(obj.animations[1]).play(), 8000)// WORKS\r\n        // TRYING A SPHERE\r\n        let floorTexture = new THREE\r\n            .TextureLoader()\r\n            .load('homescreenGrass.jpg', (manager) => {\r\n                floorTexture.wrapS = THREE.RepeatWrapping;\r\n                floorTexture.wrapT = THREE.RepeatWrapping;\r\n                floorTexture\r\n                    .repeat\r\n                    .set(2, 2);\r\n            });\r\n        let floorBump = new THREE\r\n            .TextureLoader(manager)\r\n            .load('sunbump.png', () => {\r\n                floorTexture.wrapS = THREE.RepeatWrapping;\r\n                floorTexture.wrapT = THREE.RepeatWrapping;\r\n                floorTexture\r\n                    .repeat\r\n                    .set(2, 2);\r\n            });\r\n        let geometrySphere = new THREE.SphereGeometry(7, 25, 25);\r\n        let materialSphere = new THREE.MeshLambertMaterial({map: floorTexture, alphaTest: 0.1, bumpMap: floorBump, bumpScale: 0.01});\r\n        let sphere = new THREE.Mesh(geometrySphere, materialSphere);\r\n        sphere.position.x = 0;\r\n        sphere.position.y = -9;\r\n        sphere.position.z = -2;\r\n        sphere.rotation.x = 1;\r\n        scene.add(sphere);\r\n        const textu = new THREE\r\n            .TextureLoader(manager)\r\n            .load(\"/textures/skyBackgroundCropped.jpeg\");\r\n        textu.minFilter = THREE.LinearFilter;\r\n        scene.background = textu;\r\n        //TREE\r\n        const treeLoader = new GLTFLoader(manager);\r\n        treeLoader.load('mytree.glb', (tree) => {\r\n            tree.scene.position.x = 0;\r\n            tree.scene.position.y = -2.1;\r\n            tree.scene.position.z = -3.2;\r\n            tree.scene.rotation.x = -0.2;\r\n            tree.scene\r\n            .scale.set(0.5, 0.5, 0.5);\r\n            scene.add(tree.scene);\r\n        })\r\n\r\n        //GRASS\r\n        //USED BLENDER TO CREATE LITTLE BLOCKS OF GRASS AND WIND ANIMATION\r\n        const grassLoader = new GLTFLoader(manager);\r\n        for(let i = 0; i < 10; i++){\r\n        grassLoader.load('grassColor.glb', (grass) => {\r\n            grass.scene.position.x = Math.floor(Math.random() * 3) -0.5 ; //RANDOM NUMBER BETWEEN -7 AND 7\r\n            grass.scene.scale.set(0.14, 0.14, 0.14)\r\n            let zRotationNewRadius = Math.sqrt(49 - (grass.scene.position.x * grass.scene.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n            let treeRotationZ = Math.asin(grass.scene.position.x / 7); //SPHERE RADIUS = 7\r\n            let z = Math.sin(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n            grass.scene.rotation.z = -treeRotationZ;\r\n            grass.scene.position.z = -z - 2;\r\n\r\n            let grassRotationX = grassRotationAngle.current * (180 / Math.PI); //The grass rotation ON X AXIS (FORWARDS)\r\n            grass.scene.rotation.x = grassRotationX;\r\n\r\n            let grassPositionY = Math.cos(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n            grass.scene.position.y = grassPositionY - 9;\r\n            scene.add(grass.scene);\r\n            angleSphereForgrass.current+=0.001;\r\n            grassRotationAngle.current-=0.001;\r\n        })\r\n\r\n        //media queries\r\n        let phoneViewCheck = (e)=>{\r\n            if(e.matches === true){\r\n                setSmartphoneView(true);\r\n                explainBox.current.style.width = \"100%\";\r\n                explainBox.current.style.left = \"0%\";\r\n            }\r\n            else{\r\n                explainBox.current.style.width = \"70%\";\r\n                explainBox.current.style.left = \"15%\";\r\n                setSmartphoneView(false);\r\n            }\r\n        }\r\n        phoneViewCheck(window.matchMedia(\"(max-width: 700px)\"));\r\n        window.matchMedia(\"(max-width: 700px)\").addEventListener('change', phoneViewCheck);\r\n\r\n    }\r\n\r\n        renderer.setSize(width, height)\r\n        canvas\r\n            .current\r\n            .appendChild(renderer.domElement)\r\n        const animate = () => {\r\n            let delta = clock.getDelta();\r\n            if (switcher.current === 1) {\r\n                mixer\r\n                    .current\r\n                    .update(delta)\r\n            }\r\n            renderer.render(scene, camera.current)\r\n            window.requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        //CHECK IF MODELS ARE LOADED\r\n        percentage.current.innerText = \"0 %\";\r\n        let array = [\r\n            \"Loading Existential Buffer\", \"Setting Universal Physical Constants\",\r\n            \"Modeling Object Components\", \"Installing ransomware: Complete >:)\",\r\n             \"Gathering Particle Sources\", \"I'm testing your patience\",\r\n            \"Reconfoobling energymotron...\", \"Your left thumb points to the right and your right thumb points to the left.\",\r\n            \"I'm sorry for being so slow\", \"Too fair to worship, too divine to love\",\r\n            \"An idea is always a generalization, and generalization is a property of thinking. To generalize means to think\",\r\n            \"UwU\", \"hey there buddy chum pal friend buddy pal chum bud friend fella bruther amigo pal buddy friend chummy chum chum pal\"\r\n             ]\r\n        manager.onProgress = ()=>{\r\n                if(parseInt(percentage.current.innerText.slice(0, -2)) < 100){\r\n                loadingScreenMessages.current.innerText =  array[Math.floor(Math.random() * array.length)];\r\n                percentage.current.innerText = parseInt(percentage.current.innerText.slice(0, -2)) + 1 + \" %\";\r\n                }\r\n                else{\r\n                    percentage.current.innerText = \"100%\";\r\n                }\r\n        }\r\n            manager.onLoad = ()=>{\r\n                percentage.current.innerText = \"100%\";\r\n                        fadeScreen.current.style.animation = \"loadingDone 1s normal forwards ease-out\";\r\n                        fadeScreen.current.onanimationend = ()=>setComponentLoaded(true);\r\n            }\r\n    }\r\n})\r\n     //TRACK MOUSE MOVEMENT AND ROTATE camera\r\n            let mouseMove = (e)=>{\r\n                let mousex = (e.clientX   - ( canvas.current.getBoundingClientRect().left / 2)) ;\r\n                let mousey = (e.clientY  - ( canvas.current.getBoundingClientRect().top / 2)) ;\r\n                let x = mousex - canvas.current.getBoundingClientRect().width / 2 ;\r\n                let y = canvas.current.getBoundingClientRect().height / 2 - mousey ;\r\n                camera.current.rotation.y = (x / 1000) * (Math.PI / 180) + 2.3;\r\n                camera.current.rotation.x = -(y / 1000) * (Math.PI / 180) - 0.1;\r\n            }\r\n\r\n            let addMusicAnimation = ()=>{\r\n                if(bar1.current.style.animation === \"\"){\r\n                bar1.current.style.animation = \"increaseHeightBar1 1.5s linear infinite\"\r\n                bar2.current.style.animation = \"increaseHeightBar1 1s linear infinite\"\r\n                bar3.current.style.animation = \"increaseHeightBar1 0.75s linear infinite\"\r\n                }\r\n                else{\r\n                bar1.current.style.animation = \"\"\r\n                bar2.current.style.animation = \"\"\r\n                bar3.current.style.animation = \"\"                   \r\n                }\r\n            }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={canvas} style={style.canvas} onMouseMove={(e)=>mouseMove(e)}></div>\r\n            <div style={style.container} onMouseMove={(e)=>mouseMove(e)}>\r\n                <div style={style.title}>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>X</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(125, 140, 40)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>E</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(70, 75, 68)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>N</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>T</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>A</span>\r\n                </div>\r\n                <div className= \"helpToExplainBox\" style={{display:\"grid\", position: \"fixed\", height: \"5%\", width:\"5%\", left: \"95%\", top:\"95%\", zIndex: \"4\"}}>\r\n                    <FontAwesomeIcon className= \"help\" icon={faQuestionCircle} style={{cursor: \"pointer\", width:\"100%\",fontSize: \"200%\", transition: \"all 0.5s ease-out\", color: \"white\"}} \r\n                    onClick={()=>{\r\n                    if(showExplainBox === false && smartphoneView === false){\r\n                        setShowExplainBox(true);\r\n                        explainBox.current.style.animation = \"popExplainBox 1s normal forwards ease-out\"; \r\n                        explainBox.current.onanimationend = ()=>{\r\n                            explainBox.current.style.animation = \"none\";\r\n                        };\r\n                    }\r\n                    else if(showExplainBox === false && smartphoneView === true){\r\n                            setShowExplainBox(true);\r\n                            explainBox.current.style.animation = \"popExplainBox 1s normal forwards ease-out\"; \r\n                            explainBox.current.onanimationend = ()=>{\r\n                                explainBox.current.style.animation = \"none\";\r\n                                explainBox.current.style.width = \"100%\"; \r\n                                explainBox.current.style.left = \"0%\"; \r\n                        };                    \r\n                    }\r\n                    }}/>\r\n                </div>\r\n                <div className= \"musicPlayer\" style={{display:\"flex\", position: \"fixed\", height: \"50px\", width:\"4%\", left: \"95%\", top:\"75%\", zIndex: \"4\", background: \"transparent\", borderRadius: \"50%\", transform: \"rotate3d(0, 0, 1, 180deg)\"}} onClick={()=>{\r\n                    let audio = audio1.current;\r\n                    addMusicAnimation();\r\n                    if (audio.duration > 0 && !audio.paused) {\r\n                        audio.pause();\r\n                        //Its playing...do your job\r\n                    } else {\r\n                        audio.play();\r\n                        //Not playing...maybe paused, stopped or never played.   \r\n                    }\r\n                }}\r\n                onMouseEnter={()=>{\r\n                    musicExplain.current.style.display = \"flex\";\r\n                    }}\r\n                onMouseLeave = {()=>{\r\n                    musicExplain.current.style.display = \"none\";\r\n                }}\r\n                >\r\n                    <div ref={bar1} style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar2}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar3}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div> \r\n                </div>\r\n                <div ref={musicExplain} style={{display:\"none\", textAlign: \"center\", position: \"fixed\", justifyContent: \"center\", alignItems: \"center\", height: \"25px\", width:\"75px\", left: \"89%\", top:\"75%\"\r\n                , zIndex: \"4\", background: \"black\", opacity: \"0.7\", fontSize: \"50%\", color: \"white\", transition: \"all 0.5s ease-out\"}}>Play some FFIX music!</div>\r\n                <audio src=\"finalFantasy.mp3\" ref={audio1} loop></audio>\r\n                <div ref={explainBox} style={showExplainBox ? style.explanationBox : {visibility: \"hidden\"}}>\r\n                    <div>\r\n                        <div style={{display: \"grid\", justifyContent: \"right\", alignContent: \"center\"}}>\r\n                        <FontAwesomeIcon className=\"windowClose\" icon={faWindowClose} style={{cursor: \"pointer\", fontSize: \"250%\", color: \"white\", transition: \"all 0.5s ease-out\", minWidth: \"100%\", maxWidth: \"100%\", textShadow: \"0px 7px 10px rgba(150, 150, 150, 1)\"}}\r\n                        onClick={()=>{\r\n                            explainBox.current.style.animation = \"fadeExplainBox 1s normal forwards ease-out\";\r\n                            explainBox.current.onanimationend = ()=>{\r\n                                explainBox.current.style.animation = \"none\";\r\n                                setShowExplainBox(false)\r\n                            };\r\n                            }}/>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                            textAlign: \"left\",\r\n                            margin: \"5%\",\r\n                            color: \"white\"\r\n                        }}>\r\n                            This project was made using three.js, along with blender, and react. You can use\r\n                            the models i made by going to the repository down here:\r\n                            <br></br>\r\n                            <div style={{display: \"grid\", height: \"50px\"}}>\r\n                                <a\r\n                                    href=\"https://github.com/Rogerpeke97/FrontendAPI\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    target=\"_blank\"\r\n                                    style={{\r\n                                    justifyContent: \"center\",\r\n                                    display: \"grid\",\r\n                                    textDecoration: \"none\",\r\n                                    alignContent: \"center\",\r\n                                    color: \"white\",\r\n                                    cursor: \"default\",\r\n                                }}>\r\n                                <FontAwesomeIcon className= \"github\" icon={faGithub} style={{cursor: \"pointer\", fontSize: \"200%\", transition: \"all 0.5s ease-out\"}} />\r\n                                </a>\r\n                            </div> <br></br>\r\n                            <div style={{maxHeight: \"100%\", maxWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\", justifyContent: \"center\"}}>\r\n                                <img src=\"/explanationImages/tree.jpg\" alt=\"blendertree\" style={{maxHeight: \"100%\", maxWidth: \"100%\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}}></img>\r\n                                <div style={{textAlign: \"left\", marginTop: \"1%\", color: \"darkgray\", fontWeight: \"100\"}}>\r\n                                    Tree model exported from blender where hair particles were turned into tree branch meshes.\r\n                                </div>\r\n                            </div>\r\n                            The knight model was downloaded from cg trader, which i will replace soon by a\r\n                            model i am working on.<br></br> If you want to export your files from blender to\r\n                            three.js, you have to be aware that particles systems cannot be exported from\r\n                            blender, therefore you should convert them to mesh and then export the file.<br></br> I'm\r\n                            saying this in case you want to work on top of the models that i left on my\r\n                            repo. <br></br> The game is pretty basic, i had to implement a bit of math for the\r\n                            character's movement around the radius of the sphere and how, depending at which\r\n                            value along the X axis the character is, the Y position of the character varies.\r\n                            The way the collision system works, if you could call it that, is, it checks the\r\n                            position values of the tree and the character. If you get too close to the tree\r\n                            then, a collision is detected and you lose one life.<br></br>\r\n                            In case you are browsing on mobile, you can check this video showing the gameplay, i would like to port it in\r\n                            the future to mobile with react native as a fun project, in the meantime you can watch it or grab your computer\r\n                            and play around!.\r\n                            <div style={{maxHeight: \"400px\", minHeight: \"400px\", maxWidth: \"100%\", minWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\",  marginTop: \"5%\"}}>\r\n                            <iframe ref={youtubeVideo} style={{maxHeight: \"400px\", minHeight: \"400px\", maxWidth: \"100%\", minWidth: \"100%\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}} title= \"game video\" src=\"https://youtube.com/embed/playlist?list=PL9DADCB4F409084A4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n                            </div>\r\n                            <div style={{maxHeight: \"100%\", maxWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\"}}>\r\n                                <img src=\"gameGif.gif\" alt=\"game gif\" style={{maxHeight: \"100%\", maxWidth: \"100%\", objectFit: \"cover\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}}></img>\r\n                                <div style={{textAlign: \"left\", marginTop: \"1%\", color: \"darkgray\", fontWeight: \"100\"}}>\r\n                                    View from the distance of the scene.\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                My wish was to fill the entire sphere full of trees and grass but performance was being heavily affected. <br></br>\r\n                                I'm currently learning more about what goes on behind the three.js framework in order to create better scenes and i'm\r\n                                also improving my blender models focusing on performance when importing them to the web. \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={style.playButton}>\r\n                        <Link\r\n                            to=\"/game\"\r\n                            onMouseEnter={(e)=>{\r\n                                e.currentTarget.style.boxShadow = \"inset 0px -80px 0px #2F3B47\"\r\n                            }}\r\n                            onMouseLeave={(e)=>{\r\n                                e.currentTarget.style.boxShadow = \"\"\r\n                            }}\r\n                            style={{\r\n                            textDecoration: \"none\",\r\n                            display: \"grid\",\r\n                            color: \"white\",\r\n                            width: \"100%\",\r\n                            heigth: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            transition: \"all 0.5s ease-out\"\r\n                        }}>Play</Link>\r\n                </div>\r\n            <div style={style.footer}>\r\n                <div style={{flex: \"1\", display: \"grid\", alignItems: \"center\", margin: \"2%\"}}>\r\n                    <div>Ignacio Martin Diaz</div>     \r\n                    <div>Portfolio: <a href=\"https://rogerpeke97.github.io/portfolio\" style={{color: \"white\"}} rel=\"noopener noreferrer\" target=\"_blank\">https://rogerpeke97.github.io/portfolio</a></div>\r\n                    <div style={{display: \"flex\"}}>\r\n                    <FontAwesomeIcon icon={faMapMarked} style={{marginRight: \"1%\"}}/> \r\n                    <div>Buenos Aires, Argentina</div>\r\n                    </div>\r\n                    <div>&copy; Copyright 2021, Ignacio Martin Diaz. All rights reserved</div>\r\n                </div>\r\n                <div style={{flex: \"1\", display: \"grid\", alignItems: \"center\", paddingLeft: \"1%\", borderLeft: \"2px solid white\"}}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <a href=\"https://github.com/Rogerpeke97/\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                        style={{justifyContent: \"center\", display: \"grid\", textDecoration: \"none\", alignContent: \"center\", cursor: \"default\", color: \"white\", marginRight: \"1%\"}}>\r\n                        <FontAwesomeIcon icon={faGithub} style={{cursor: \"pointer\", fontSize: \"100%\", transition: \"all 0.5s ease-out\"}} />\r\n                        </a>\r\n                    <div>Github</div> \r\n                    </div>\r\n                    <div style={{display: \"flex\"}}>\r\n                    <a href=\"https://www.linkedin.com/in/ignacio-martin-diaz-2a30251b7/\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                        style={{justifyContent: \"center\", display: \"grid\", textDecoration: \"none\", alignContent: \"center\", cursor: \"default\", color: \"white\", marginRight: \"1%\"}}>\r\n                        <FontAwesomeIcon icon={faLinkedin} style={{cursor: \"pointer\", fontSize: \"100%\", transition: \"all 0.5s ease-out\"}} />\r\n                    </a>\r\n                    <div>LinkedIn</div> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div\r\n                className=\"loadingScreen\"\r\n                ref={fadeScreen}\r\n                style={componentLoaded ? {display: \"none\"} : {display: \"grid\"}}>\r\n                <div>\r\n                    <span>L</span>\r\n                    <span>O</span>\r\n                    <span>A</span>\r\n                    <span>D</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>{\" \"}</span>\r\n                    <span ref={percentage}></span>\r\n                </div>\r\n                <div className=\"messages\" ref={loadingScreenMessages}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default HomeScreen","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx",["63","64","65","66"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx",["67","68","69"],"import {useRef, useEffect, useState} from 'react'\r\nimport * as THREE from \"three\";\r\n//import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { Lensflare, LensflareElement } from 'three/examples/jsm/objects/Lensflare.js';\r\nimport '../App.css';\r\nimport TWEEN from '@tweenjs/tween.js';\r\nimport axios from 'axios';\r\n\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\n\r\nlet style = {\r\n    canvas: {\r\n        display: 'grid',\r\n        position: 'absolute',\r\n        minHeight: '100vh',\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        maxHeight: \"100vh\"\r\n    }\r\n}\r\n\r\nconst Game = () => {\r\n    const canvas = useRef(0);\r\n    let obj = useRef(0); //KNIGHT\r\n    let switcher = useRef(0);\r\n    let mixer = useRef(0);\r\n    let isRotating = useRef(0)\r\n    let trackedKeys = useRef(0);\r\n    let centerChar = useRef(false);\r\n    let jumpChar = useRef(false);\r\n    let animationsAdded = useRef(0);\r\n    let circleAngle = useRef(0);\r\n    let cameraAngle = useRef(-0.005);\r\n    let camera = useRef(0);\r\n    let knightMovementXAxis = useRef(0);\r\n    let knightRotationX = useRef(0);\r\n    let knightRotationZ = useRef(0);\r\n    let trees = useRef(0);\r\n    let angleSphereForTrees = useRef(0);\r\n    let angleSphereForgrass = useRef(0);\r\n    let isHeartDead = useRef(4); // each number corresponds to each heart\r\n    let health = useRef(0);\r\n    let scorePoints = useRef(0);\r\n    let scoreChecker = useRef(0);\r\n    const [componentLoaded,\r\n        setComponentLoaded] = useState(false);\r\n    let loadingScreenMessages = useRef(0);\r\n    let percentage = useRef(0);\r\n    let fadeScreen = useRef(0);\r\n    let hitWait = useRef(false);\r\n    let playButton = useRef(0);\r\n    let musicExplain = useRef(0);\r\n    let audio = useRef(0);\r\n    let bar1 = useRef(0);\r\n    let bar2 = useRef(0);\r\n    let bar3 = useRef(0);\r\n    useEffect(() => {\r\n        if (componentLoaded === false) {\r\n            health.current.innerText = `x${isHeartDead.current}`;\r\n            animationsAdded.current = null;\r\n            let height = canvas.current.clientHeight\r\n            let width = canvas.current.clientWidth\r\n            const scene = new THREE.Scene();\r\n            scene.fog = new THREE.FogExp2(0xDCDBDF, 0.10);\r\n            //scene.add(helper) ONLY FOR DEBUGGING\r\n            camera.current = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n            const renderer = new THREE.WebGLRenderer();\r\n            /*let controls = new OrbitControls(camera.current, renderer.domElement);\r\n            controls\r\n                .target\r\n                .set(0, 0, 0);*/\r\n            const manager = new THREE.LoadingManager(); // WHEN MODELS ARE LOADED .onLoad will be called\r\n            camera\r\n                .current\r\n                .position\r\n                .set(0, 8, 2.1);\r\n            camera\r\n                .current\r\n                .rotation\r\n                .set(-0.0057 - 0.1, 0, 0);\r\n            let clock = new THREE.Clock();\r\n            //BACKGROUND LIGHT\r\n            const textureFlare = new THREE.TextureLoader(manager);\r\n            const textureFlare0 = textureFlare.load( 'lensflare0.png' );\r\n            const textureFlareMoon = textureFlare.load( 'lensflareMoon.png' );\r\n\t\t\tconst textureFlare3 = textureFlare.load( 'lensflare3.png' );\r\n            addLight( 0.55, 0.9, 0.5, 5000, 0, - 1000 );\r\n            addLight( 0.08, 0.8, 0.5, 0, 0, - 1000 );\r\n            addLight( 0.995, 0.5, 0.9, 5000, 5000, - 1000 );\r\n\r\n            function addLight( h, s, l, x, y, z ) {\r\n\r\n                const light = new THREE.PointLight( 0xffffff, 1.5, 2000 );\r\n                light.color.setHSL( h, s, l );\r\n                light.position.set( x, y, z );\r\n                scene.add( light );\r\n\r\n                const lensflare = new Lensflare();\r\n                lensflare.addElement( new LensflareElement( textureFlare0, 700, 0, light.color ) );\r\n                lensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n                lensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n                lensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n                lensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n                light.add( lensflare );\r\n            }\r\n            //MOON\r\n            /*const moonLoader = new GLTFLoader(manager)\r\n            moonLoader.load(\"moon.glb\", function (object) {\r\n                object.scene.position.x = 0;\r\n                object.scene.position.y = -90; // CIRCLE RADIUS\r\n                object.scene.position.z = 6;\r\n                scene.add(object.scene)\r\n                addLight2( 176, 100, 99, 5000, 0, - 1000 );\r\n                addLight2( 176, 100, 99, 0, -1000, 150 );\r\n                addLight2( 176, 100, 99, 5000, 5000, - 1000 );\r\n    \r\n                function addLight2( h, s, l, x, y, z ) {\r\n    \r\n                    const light2 = new THREE.PointLight( 0xffffff, 1.5, 2000 );\r\n                    light2.color.setHSL( h, s, l );\r\n                    light2.position.set( x, y, z );\r\n                    scene.add( light2 );\r\n    \r\n                    const lensflare = new Lensflare();\r\n                    lensflare.addElement( new LensflareElement( textureFlareMoon, 200, 0, light2.color ) );\r\n                    lensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n                    lensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n                    lensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n                    lensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n                    light2.add( lensflare );\r\n                }\r\n    \r\n            })*/\r\n            window.addEventListener('resize', () => {\r\n                if (canvas.current !== null) {\r\n                    width = document.documentElement.clientWidth;\r\n                    height = canvas.current.clientHeight\r\n                    renderer.setSize(width, height);\r\n                    camera.current.aspect = width / height;\r\n                    camera\r\n                        .current\r\n                        .updateProjectionMatrix();\r\n                }\r\n            });\r\n\r\n            renderer.setSize(width, height)\r\n            canvas\r\n                .current\r\n                .appendChild(renderer.domElement)\r\n            const textu = new THREE\r\n                .TextureLoader()\r\n                .load(\"/textures/skyBackground.jpeg\");\r\n            textu.minFilter = THREE.LinearFilter;\r\n            scene.background = textu;\r\n\r\n            //TREES FOR DEBUGGING DEACTIVATED\r\n            trees.current = []\r\n            const treeLoader = new GLTFLoader(manager);\r\n            for (let j = 0; j <= 15; j++) {\r\n                treeLoader.load('mytree.glb', (tree) => {\r\n                    trees\r\n                    .current\r\n                    .push(tree);\r\n                    let newX = Math.floor(Math.random() * 3) - 1; //RANDOM NUMBER BETWEEN -7 AND 7\r\n                    tree\r\n                        .scene\r\n                        .scale\r\n                        .set(0.1, 0.1, 0.1);\r\n                    let zRotationNewRadius = Math.sqrt(49 - (newX * newX)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n                    let z = Math.sin(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    // I HAVE TO USE THE SAME FORMULA AS THE KNIGHT TO POSITION THE TREE WITH THE\r\n                    // RIGHT ROTATION AND Y POSITION AROUND THE SPHERE TREE ROTATION SIN ANGLE =\r\n                    // OPOSSITE OVER HYPOTHENUSE\r\n                    let treeRotationZ = Math.asin(newX / 7); //SPHERE RADIUS = 7\r\n\r\n                    let treeRotationX = -angleSphereForTrees.current * (180 / Math.PI); //The tree rotation ON X AXIS (FORWARDS)\r\n\r\n                    //FIND Y OPOSSITE = SQUARE ROOT OF RADIUS SQUARED - ADYACER = Z SQUARED\r\n                    let treePositionY = Math.cos(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n\r\n                    tree.scene.position.set(newX, treePositionY, -z);\r\n                    tree.scene.rotation.set(treeRotationX, tree.scene.rotation.y, -treeRotationZ);\r\n\r\n                    scene.add(tree.scene);\r\n                    angleSphereForTrees.current = angleSphereForTrees.current + 0.00813333333;\r\n                })\r\n            }\r\n\r\n            //GRASS USED BLENDER TO CREATE LITTLE BLOCKS OF GRASS AND WIND ANIMATION\r\n            const grassLoader = new GLTFLoader(manager);\r\n            for (let i = 0; i < 15; i++) {\r\n                grassLoader.load('grassColor.glb', (grass) => {\r\n                    grass.scene.scale.set(0.3, 0.3, 0.3);\r\n                    grass.scene.position.x = Math.floor(Math.random() * 3) - 1; //RANDOM NUMBER BETWEEN -7 AND 7\r\n                    let zRotationNewRadius = Math.sqrt(49 - (grass.scene.position.x * grass.scene.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n                    let treeRotationZ = Math.asin(grass.scene.position.x / 7); //SPHERE RADIUS = 7\r\n                    let z = Math.sin(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    grass.scene.rotation.z = -treeRotationZ;\r\n                    grass.scene.position.z = -z;\r\n\r\n                    let grassRotationX = -angleSphereForgrass.current * (180 / Math.PI); //The grass rotation ON X AXIS (FORWARDS)\r\n                    grass.scene.rotation.x = grassRotationX;\r\n\r\n                    let grassPositionY = Math.cos(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    grass.scene.position.y = grassPositionY;\r\n                    scene.add(grass.scene);\r\n                    angleSphereForgrass.current = angleSphereForgrass.current + 0.00813333333;\r\n                })\r\n            }\r\n\r\n            const loader = new GLTFLoader(manager)\r\n            loader.load(\"knight.gltf\", function (object) {\r\n                object.scene.position.x = 0;\r\n                object.scene.position.y = 7; // CIRCLE RADIUS\r\n                object.scene.position.z = 0;\r\n                object.scene.rotation.y = -Math.PI;\r\n                object\r\n                    .scene\r\n                    .scale\r\n                    .set(0.2, 0.2, 0.2)\r\n                obj.current = object;\r\n                mixer.current = new THREE.AnimationMixer(obj.current.scene);\r\n\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[15]) // IDLE ANIMATION\r\n                action.play()\r\n                action.clampWhenFinished = true;\r\n\r\n                scene.add(object.scene);\r\n\r\n                switcher.current = 1;\r\n\r\n\r\n                //EVENT LISTENER FOR FINISHED ANIMATION\r\n                    mixer\r\n                      .current\r\n                      .addEventListener('loop', (e) => {\r\n                    if (e.action._clip.name === \"knight_jump_up_root\") {\r\n                        let action = mixer.current._actions[2];\r\n                        action.stop();\r\n                        jumpChar.current = false;\r\n                    }\r\n                })\r\n                mixer\r\n                .current\r\n                .clipAction(obj.current.animations[0]); // JUMP ANIMATION\r\n            },);\r\n\r\n            // RUNNING ANIMATION AND MOVEMENT IMPLEMENTING EQUATION IN PARAMETRIC FORM TO\r\n            // FIND THE COORDINATES OF THE CIRCLE SO THAT THE CHARACTER MOVES ALONG THE\r\n            // SURFACE OF IT WHILE ALSO GOING UP OR DOWN DEPENDING ON WHICH PART OF THE\r\n            // CIRCLE HE IS LOCATED AT CIRCLE VELOCITY AND ANGULAR SPEED CALCULATE ROTATION\r\n            // ON X AXIS OF CHARACTER AND Y POSITION MOVES X QUANTITY ON X AXIS; RADIUS IS\r\n            // NOT THE SAME FROM THE SIDES PERSPECTIVES AND WILL INFLUENCE THE RADIUS FROM\r\n            // RUNANIMATION IT IS ALWAYS THE SAME BUT OPTICALLY IT ISNT DUE TO PERSPECTIVE\r\n            let runAndAnimation = () => {\r\n                    let armorMan = obj.current.scene;\r\n\r\n                    circleAngle.current = circleAngle.current + 0.0003;\r\n                    cameraAngle.current = cameraAngle.current + 0.0003;\r\n\r\n                    let xChar = -circleAngle.current * (180 / Math.PI); //The character rotation ON X AXIS (FORWARDS)\r\n\r\n                    let zRotationNewRadius = Math.sqrt(49 - (knightMovementXAxis.current * knightMovementXAxis.current)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n\r\n                    knightRotationZ.current = Math.asin(knightMovementXAxis.current / 7); //ROTATION ON THE KNIGHT Z AXIS WHILE MOVING LEFT OR RIGHT () ROTATION TO THE SIDES\r\n\r\n                    let y = Math.cos(circleAngle.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    let z = Math.sin(circleAngle.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    //KNIGHT MOVEMENTS\r\n                    armorMan.position.set(knightMovementXAxis.current, y, -z);\r\n                    armorMan.rotation.set(xChar, armorMan.rotation.y, knightRotationZ.current);\r\n                    //CAMERA MOVEMENTS\r\n                    let cameraY = Math.cos(cameraAngle.current * (180 / Math.PI)) * 8;\r\n                    let cameraZ = Math.sin(cameraAngle.current * (180 / Math.PI)) * 8;\r\n                    camera\r\n                        .current\r\n                        .position\r\n                        .set(0, cameraY, -cameraZ);\r\n                    camera\r\n                        .current\r\n                        .lookAt(armorMan.position);\r\n                    camera\r\n                        .current\r\n                        .rotation\r\n                        .set(xChar - 0.1, 0, 0);\r\n            }\r\n\r\n            setInterval(()=>animationsAdded.current === true ? runAndAnimation() : \"\", 20);\r\n\r\n\r\n            let characterHitByTree = (armorMan)=>{\r\n                trees.current.forEach((tree)=>{\r\n                    let x = tree.scene.position.x;\r\n                    let knightPosX = armorMan.position.x;\r\n                    let y = tree.scene.position.y\r\n                    let knightPosY = armorMan.position.y;\r\n                    let z = tree.scene.position.z;\r\n                    let knightPosZ = armorMan.position.z;\r\n                    if((between(knightPosX, x - 0.2, x + 0.2) && between(knightPosY, y - 1.00, y + 1.00)) && (between(knightPosZ, z - 0.2, z + 0.2) && hitWait.current === false)){\r\n                        hitCount();\r\n                    }\r\n                })\r\n            \r\n            }\r\n            setInterval(()=>animationsAdded.current === true ? characterHitByTree(obj.current.scene) : \"\", 20);\r\n\r\n\r\n            let hitCount = ()=>{\r\n                if(hitWait.current === false && isHeartDead.current > 0){\r\n                    hitWait.current = true;\r\n                    hitAwait();\r\n                }\r\n            }\r\n            let hitAwait = ()=>{\r\n                isHeartDead.current = isHeartDead.current - 1;\r\n                health.current.innerText = `x${isHeartDead.current}`;\r\n                setTimeout(()=>{\r\n                    hitWait.current = false\r\n                }, 1000)\r\n            }\r\n\r\n            let between = (position, min, max)=>{//check if between range, close enough to the tree\r\n                return position >= min && position <= max;\r\n              }\r\n\r\n            let moveTrees = ()=>{\r\n                let calculateTreeAngle = -(trees.current[angleSphereForTrees.current[0]].scene.rotation.x / (180 / Math.PI));// Z POSITIONING STAYS THE SAME\r\n                let newX = (Math.random() * (1 - (-1)) + (-1));\r\n                trees.current[angleSphereForTrees.current[0]].scene.position.x = newX;\r\n                let zRotationNewRadius = Math.sqrt(49 - (newX * newX));\r\n                let treeRotationZ = Math.asin(newX / 7); //SPHERE RADIUS = 7\r\n                trees.current[angleSphereForTrees.current[0]].scene.rotation.z = -treeRotationZ;\r\n                let treePositionY = Math.cos(calculateTreeAngle * (180 / Math.PI)) * zRotationNewRadius;\r\n                trees.current[angleSphereForTrees.current[0]].scene.position.y = treePositionY;  \r\n                angleSphereForTrees.current[0] += 1;//TREE NUMBER\r\n                angleSphereForTrees.current[1] += 0.01626666666;//TREE NUMBER \r\n                if(trees.current[angleSphereForTrees.current[0] + 1] === undefined){\r\n                    angleSphereForTrees.current[0] = 0;\r\n                }                               \r\n            }\r\n            setInterval(()=>animationsAdded.current === true ? moveTrees() : \"\", 1500);\r\n\r\n            let checkMovements = (armorMan)=>{   \r\n                    //CHARACTER MOVEMENTS KEY EVENTS\r\n                    if(JSON.stringify(trackedKeys.current) === `{\"arrowLeft\":true,\"arrowRight\":false}` && knightMovementXAxis.current > -1){\r\n                        centerChar.current = false;\r\n                        knightMovementXAxis.current = armorMan.position.x - 0.04;\r\n                        armorMan.position.x = knightMovementXAxis.current;\r\n                        //ROTATION\r\n                        if (isRotating.current.isRotatingLeft === \"start\") { // y = -2.5\r\n                            obj.current.scene.rotation.y = obj.current.scene.rotation.y += 0.01;\r\n                            if (trackedKeys.current.arrowLeft === false) {\r\n                                centerChar.current = true;\r\n                            } else if (obj.current.scene.rotation.y >= -2.5) {\r\n                                obj.current.scene.rotation.y = -2.5;\r\n                                isRotating\r\n                                    .current\r\n                                    .rotateRight();\r\n                                centerChar.current = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if(JSON.stringify(trackedKeys.current) === `{\"arrowLeft\":false,\"arrowRight\":true}` && knightMovementXAxis.current < 1){\r\n                        centerChar.current = false;\r\n                        knightMovementXAxis.current = armorMan.position.x + 0.04;\r\n                        armorMan.position.x = knightMovementXAxis.current;\r\n                        //ROTATION\r\n                        if (isRotating.current.isRotatingRight === \"start\") { // y = -3.5\r\n                            obj.current.scene.rotation.y = obj.current.scene.rotation.y -= 0.01;\r\n                            if (trackedKeys.current.arrowRight === false) {\r\n                                centerChar.current = true;\r\n                            } else if (obj.current.scene.rotation.y <= -3.5) {\r\n                                obj.current.scene.rotation.y = -3.5;\r\n                                isRotating\r\n                                    .current\r\n                                    .rotateLeft();\r\n                                centerChar.current = true;\r\n                            }\r\n                        }\r\n                    }\r\n            }\r\n\r\n            setInterval(()=>animationsAdded.current === true ? checkMovements(obj.current.scene) : \"\", 20);\r\n\r\n            setInterval(() => {\r\n                if (animationsAdded.current === true) {\r\n                    scorePoints.current = scorePoints.current + 1;\r\n                    scoreChecker.current.innerText = scorePoints.current;\r\n                } \r\n                if(isHeartDead.current === 0 && animationsAdded.current === true){\r\n                    youLost();\r\n                }\r\n            }, 50); //ADDS SCORE POINTS\r\n\r\n            let youLost = () => {\r\n                    isHeartDead.current = 4;\r\n                    health.current.innerText = `x${isHeartDead.current}`;\r\n                    circleAngle.current = 0.0001;\r\n                    cameraAngle.current = -0.005;\r\n                    animationsAdded.current = null;\r\n                    obj.current.scene.position.x = 0;\r\n                    obj.current.scene.position.y = 7; // CIRCLE RADIUS\r\n                    obj.current.scene.position.z = 0;\r\n                    obj.current.scene.rotation.x = 0;\r\n                    obj.current.scene.rotation.y = -Math.PI; \r\n                    obj.current.scene.rotation.z = 0;\r\n                    camera\r\n                    .current\r\n                    .position\r\n                    .set(0, 8, 2.1);\r\n                    camera\r\n                      .current\r\n                      .rotation\r\n                      .set(-0.0057 - 0.1, 0, 0);\r\n                    angleSphereForTrees.current = [0, 0];\r\n                    axios.post('https://xentaserver.herokuapp.com/uploadscore', { // UPLOADS SCORE\r\n                        authorization: localStorage.getItem('user'),\r\n                        score: `${scorePoints.current}`\r\n                    }, {\r\n                        headers: {\r\n                            // Overwrite Axios's automatically set Content-Type\r\n                            'Content-Type': 'application/json',\r\n                            'Authorization': `Bearer ${localStorage.getItem('user')}`\r\n                        }\r\n                    }).then(res => {\r\n                        playButton.current.style.visibility = \"visible\";\r\n                        playButton.current.style.animation = \"popExplainBox 1s normal forwards ease-out\";\r\n                        playButton.current.onanimationend = ()=>{\r\n                            scorePoints.current = 0;\r\n                            scoreChecker.current.innerText = scorePoints.current;\r\n                            playButton.current.style.animation = \"\";\r\n                        }\r\n                    }).catch(error => {\r\n                        playButton.current.style.visibility = \"visible\";\r\n                        playButton.current.style.animation = \"popExplainBox 1s normal forwards ease-out\";\r\n                        playButton.current.onanimationend = ()=>{\r\n                            scorePoints.current = 0;\r\n                            scoreChecker.current.innerText = scorePoints.current;\r\n                            playButton.current.style.animation = \"\";\r\n                        }\r\n                    })\r\n            }\r\n            // USING INTERVAL SINCE TWEENING WOULD MAKE PERFORMANCE DROP, WILL MOVE\r\n            // CHARACTER SLIGHTLY EACH 50ms ANIMATION TO THE OTHER SIDE OF THE CIRCLE\r\n            // SETTING THE ARROW EVENTS ARROW RIGHT MOVE RIGHT STORING THE KEY VALUES IN\r\n            // TRACKEDKEYS DUE TO DELAY KEYDOWN EVENT AND LOOPING THROUGH CHARROTATEANDMOVE\r\n            // TO CHECK WHERE TO MOVE THE CHARACTER BASED ON TRUE OR FALSE SEE\r\n            // https://yojimbo87.github.io/2012/08/23/repeated-and-multiple-key-press-events\r\n            // - without-stuttering-in-javascript.html for full understanding of delay.\r\n            // Repeated or multiple key press events in JavaScript can cause a little pause\r\n            // or delay which leads to stuttering behavior, for example, in games which are\r\n            // using keyboard based navigation. This delay is probably caused by internal\r\n            // browser timeout between key press changes. TRACKING KEYS\r\n\r\n            trackedKeys.current = {\r\n                arrowLeft: false, // left arrow\r\n                arrowRight: false, // right arrow\r\n                rightMove: function () { // ()=>{} THIS DOESNT WORK INSIDE OBJECTS :/\r\n                    this.arrowLeft = false;\r\n                    this.arrowRight = true;\r\n                },\r\n                leftMove: function () {\r\n                    this.arrowLeft = true;\r\n                    this.arrowRight = false;\r\n                }\r\n            }\r\n            //IS ROTATING TRACKER\r\n            isRotating.current = {\r\n                isRotatingRight: \"stop\",\r\n                isRotatingLeft: \"stop\",\r\n                rotateRight: function () {\r\n                    this.isRotatingRight = \"start\";\r\n                    this.isRotatingLeft = \"stop\";\r\n                },\r\n                rotateLeft: function () {\r\n                    this.isRotatingRight = \"stop\";\r\n                    this.isRotatingLeft = \"start\";\r\n                }\r\n            }\r\n\r\n            window.addEventListener('keydown', (e) => {\r\n                if (e.key === \"ArrowRight\" && trackedKeys.current[\"arrowRight\"] === false) {\r\n                    trackedKeys\r\n                        .current\r\n                        .rightMove();\r\n                    isRotating\r\n                        .current\r\n                        .rotateRight();\r\n                } else if (e.key === \"ArrowLeft\" && trackedKeys.current[\"arrowLeft\"] === false) {\r\n                    trackedKeys\r\n                        .current\r\n                        .leftMove();\r\n                    isRotating\r\n                        .current\r\n                        .rotateLeft();\r\n                } else if (e.key === \" \" && jumpChar.current === false) {\r\n                    jumpChar.current = true;\r\n                }\r\n\r\n            })\r\n            window.addEventListener('keyup', (e) => {\r\n                if (e.key === \"ArrowRight\") {\r\n                    trackedKeys.current.arrowRight = false;\r\n                    centerChar.current = true;\r\n                } else if (e.key === \"ArrowLeft\") {\r\n                    trackedKeys.current.arrowLeft = false;\r\n                    centerChar.current = true;\r\n                }\r\n            })\r\n\r\n            //ROTATIOn CENTER CHARACTER\r\n            let centerCharFunction = () => {\r\n                if (centerChar.current === true) {\r\n                    let tweenRotateCenter = new TWEEN\r\n                        .Tween(obj.current.scene.rotation)\r\n                        .to({\r\n                            y: -3, // FROM -3 TO -3\r\n                        }, 50)\r\n                        .onComplete(() => {\r\n                            TWEEN.remove(tweenRotateCenter);\r\n                            cancelAnimationFrame(animateTweenRotateCenter);\r\n                            centerChar.current = false;\r\n                        })\r\n                        .start()\r\n                    let animateTweenRotateCenter = (time) => {\r\n                        TWEEN.update(time)\r\n                        requestAnimationFrame(animateTweenRotateCenter)\r\n                    }\r\n                    requestAnimationFrame(animateTweenRotateCenter);\r\n                }\r\n            }\r\n            setInterval(() => centerCharFunction(), 50);\r\n\r\n            //JUMP ANIMATION\r\n            let jump = () => {\r\n                if (jumpChar.current === true && mixer.current._actions[2] !== undefined) {\r\n                    let action = mixer.current._actions[2] // JUMP ANIMATION\r\n                    action.play();\r\n                }\r\n            }\r\n            setInterval(() => jump(), 20);\r\n\r\n            //TRYING A SPHERE\r\n            let floorTexture = new THREE\r\n                .TextureLoader(manager)\r\n                .load('homescreenGrass.jpg', () => {\r\n                    floorTexture.wrapS = THREE.RepeatWrapping;\r\n                    floorTexture.wrapT = THREE.RepeatWrapping;\r\n                    floorTexture\r\n                        .repeat\r\n                        .set(2, 2);\r\n                });\r\n            let floorBump = new THREE\r\n                .TextureLoader(manager)\r\n                .load('sunbump.png', () => {\r\n                    floorTexture.wrapS = THREE.RepeatWrapping;\r\n                    floorTexture.wrapT = THREE.RepeatWrapping;\r\n                    floorTexture\r\n                        .repeat\r\n                        .set(2, 2);\r\n                });\r\n            let geometrySphere = new THREE.SphereBufferGeometry(7, 50, 50);\r\n            let materialSphere = new THREE.MeshPhongMaterial({map: floorTexture, bumpMap: floorBump, bumpScale: 0.01});\r\n            let sphere = new THREE.Mesh(geometrySphere, materialSphere);\r\n            sphere.position.x = 0;\r\n            sphere.position.y = 0;\r\n            sphere.position.z = 0;\r\n            sphere.rotation.z = 1;\r\n            scene.add(sphere);\r\n\r\n            const animate = () => {\r\n                let delta = clock.getDelta();\r\n                if (switcher.current === 1) {\r\n                    mixer\r\n                        .current\r\n                        .update(delta)\r\n                }\r\n                renderer.render(scene, camera.current);\r\n                window.requestAnimationFrame(animate);\r\n            }\r\n            animate()\r\n            //CHECK IF MODELS ARE LOADED\r\n            percentage.current.innerText = \"0 %\";\r\n            let array = [\r\n                \"Loading Existential Buffer\", \"Setting Universal Physical Constants\",\r\n                \"Modeling Object Components\", \"Installing ransomware: Complete >:)\",\r\n                 \"Gathering Particle Sources\", \"I'm testing your patience\",\r\n                \"Reconfoobling energymotron...\", \"Your left thumb points to the right and your right thumb points to the left.\",\r\n                \"I'm sorry for being so slow\", \"Too fair to worship, too divine to love\",\r\n                \"An idea is always a generalization, and generalization is a property of thinking. To generalize means to think\",\r\n                \"UwU\", \"hey there buddy chum pal friend buddy pal chum bud friend fella bruther amigo pal buddy friend chummy chum chum pal\"\r\n                 ]\r\n        manager.onProgress = ()=>{\r\n                if(parseInt(percentage.current.innerText.slice(0, -2)) < 100){\r\n                loadingScreenMessages.current.innerText =  array[Math.floor(Math.random() * array.length)];\r\n                percentage.current.innerText = parseInt(percentage.current.innerText.slice(0, -2)) + 1 + \" %\";\r\n                }\r\n                else{\r\n                    percentage.current.innerText = \"100%\";\r\n                }\r\n        }\r\n            manager.onLoad = ()=>{\r\n                percentage.current.innerText = \"100%\";\r\n                        fadeScreen.current.style.animation = \"loadingDone 1s normal forwards ease-out\";\r\n                        angleSphereForTrees.current = [0, 0];\r\n                        fadeScreen.current.onanimationend = ()=>setComponentLoaded(true);\r\n            }\r\n    }\r\n    })\r\n    \r\n    let addMusicAnimation = ()=>{\r\n        if(bar1.current.style.animation === \"\"){\r\n        bar1.current.style.animation = \"increaseHeightBar1 1.5s linear infinite\"\r\n        bar2.current.style.animation = \"increaseHeightBar1 1s linear infinite\"\r\n        bar3.current.style.animation = \"increaseHeightBar1 0.75s linear infinite\"\r\n        }\r\n        else{\r\n        bar1.current.style.animation = \"\"\r\n        bar2.current.style.animation = \"\"\r\n        bar3.current.style.animation = \"\"                   \r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div style={{\r\n                    position: \"absolute\", minHeight: \"10%\", maxHeight: \"10%\",\r\n                     minWidth: \"200px\", maxWidth: \"200px\", display: \"flex\",\r\n                     top: \"6.5rem\", zIndex: \"5\"\r\n                     }}>\r\n                         <div className= \"heart\"></div>\r\n                         <div ref={health} style={{width: \"50px\", height: \"50px\", display: \"grid\", fontSize: \"120%\", color: \"white\", textAlign: \"center\", alignItems: \"center\"}}></div>\r\n                     </div>\r\n                <div style={{\r\n                    position: \"absolute\", minHeight: \"10%\", maxHeight: \"10%\",\r\n                     minWidth: \"200px\", maxWidth: \"20%\", right: \"0%\",\r\n                     top: \"6.5rem\",  zIndex: \"5\", display: \"flex\", color: \"white\",\r\n                     alignItems: \"center\", textAlign: \"center\", fontSize: \"200%\", textShadow: \"11px 11px 6px rgba(150, 150, 150, 1)\"\r\n                     }}>\r\n                    <div style={{flex: \"1\"}}>Score:</div>\r\n                    <div ref={scoreChecker}style={{flex: \"1\"}}></div>\r\n                </div>\r\n            </div>\r\n            <div style={style.canvas} ref={canvas}></div>\r\n            <div style={{position: \"absolute\", display: \"grid\", textAlign: \"center\", height: \"125px\", width: \"200px\",\r\n            left: \"50%\", top: \"50%\", marginLeft: \"-100px\", marginTop: \"-67.5px\", background: \"brown\", color: \"white\", zIndex: \"2\",\r\n            borderRadius: \"7px\",\r\n            boxShadow: \"0px 10px 21px 0px rgba(50, 50, 50, 0.75)\", alignContent: \"center\", transition: \"all 0.5s ease-out\", fontWeight: \"bold\",\r\n            cursor: \"pointer\"\r\n            }}\r\n            onMouseEnter = {(e)=>{\r\n                e.currentTarget.style.transform = 'scale(1.05, 1.05)';\r\n                e.currentTarget.style.boxShadow = '0px 3px 27px 0px rgba(50, 50, 50, 1)';\r\n            }} \r\n            onMouseLeave={(e)=>{\r\n                e.currentTarget.style.transform = 'scale(1, 1)';\r\n                e.currentTarget.style.boxShadow = '0px 10px 21px 0px rgba(50, 50, 50, 0.75)';\r\n            }}\r\n            ref={playButton} onClick={()=> {\r\n                if(animationsAdded.current === false || animationsAdded.current === null){\r\n                playButton.current.style.animation = \"loadingDone 1s normal forwards ease-out\";\r\n                playButton.current.onanimationend = ()=>{\r\n                    playButton.current.style.visibility = \"hidden\";\r\n                    animationsAdded.current = true/*SETS RUNANDANIMATION*/\r\n                    let action = mixer\r\n                            .current\r\n                            .clipAction(obj.current.animations[14]) // RUN ANIMATION\r\n                    action.play()\r\n                    action.clampWhenFinished = true;\r\n                }\r\n                }\r\n                }}>PLAY!</div>\r\n                <div className= \"musicPlayer\" style={{display:\"flex\", position: \"fixed\", height: \"50px\", width:\"4%\", left: \"95%\", top:\"75%\", zIndex: \"4\", background: \"transparent\", borderRadius: \"50%\", transform: \"rotate3d(0, 0, 1, 180deg)\"}} onClick={()=>{\r\n                    let audio1 = audio.current;\r\n                    addMusicAnimation();\r\n                    if (audio1.duration > 0 && !audio1.paused) {\r\n                        audio1.pause();\r\n                        //Its playing...do your job\r\n                    } else {\r\n                        audio1.play();\r\n                        //Not playing...maybe paused, stopped or never played.   \r\n                    }\r\n                }}\r\n                onMouseEnter={()=>{\r\n                    musicExplain.current.style.display = \"flex\";\r\n                    }}\r\n                onMouseLeave = {()=>{\r\n                    musicExplain.current.style.display = \"none\";\r\n                }}\r\n                >\r\n                    <div ref={bar1} style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar2}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar3}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div> \r\n                </div>\r\n                <div ref={musicExplain} style={{display:\"none\", textAlign: \"center\", position: \"fixed\", justifyContent: \"center\", alignItems: \"center\", height: \"25px\", width:\"75px\", left: \"89%\", top:\"75%\"\r\n                , zIndex: \"4\", background: \"black\", opacity: \"0.7\", fontSize: \"50%\", color: \"white\", transition: \"all 0.5s ease-out\"}}>Play some FFIX music!</div>\r\n                <audio src=\"kujaTheme.mp3\" ref={audio} loop></audio>            \r\n            <div className= \"loadingScreen\" ref={fadeScreen} style={componentLoaded ? {display: \"none\"} : {display: \"grid\"}}>\r\n                <div>\r\n                    <span>L</span>\r\n                    <span>O</span>\r\n                    <span>A</span>\r\n                    <span>D</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>{\" \"}</span>\r\n                    <span ref={percentage}></span>\r\n                </div>\r\n                <div className= \"messages\" ref={loadingScreenMessages}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx",["70","71"],"import axios from 'axios';\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport * as THREE from \"three\";\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport {Redirect} from 'react-router';\r\n\r\nlet style = {\r\n    backgroundAccount: {\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        minHeight: '100vh',\r\n        marginTop: \"6.5rem\",\r\n        backgroundColor: 'darkred',\r\n        display: 'grid',\r\n        color: 'black',\r\n        alignItems: 'center',\r\n        justifyContent: \"center\"\r\n    },\r\n    insideAccount: {\r\n        minHeight: \"550px\",\r\n        maxHeight: \"100%\",\r\n        minWidth: \"700px\",\r\n        maxWidth: \"700px\",\r\n        backgroundColor: \"lightgray\",\r\n        display: \"grid\"\r\n    },\r\n    canvas:{\r\n        flex: \"1\",\r\n        minHeight: \"200px\",\r\n        maxHeight: \"200px\", \r\n        minWidth: \"200px\",\r\n        maxWidth: \"200px\",\r\n        border: \"2px solid black\"\r\n    },\r\n    chartBakcground: {\r\n        background: \"gray\"\r\n    }\r\n}\r\n\r\nconst Account = () => {\r\n    const input = useRef(null);\r\n    const [userInfo,\r\n        setUserInfo] = useState(\"\");\r\n    const [joinedDate, setJoinedDate] = useState(\"\");\r\n    const [maxScore, setMaxScore] = useState(\"\");\r\n    const [gameTag, setGameTag] = useState(\"\");\r\n    let canvas = useRef(0);\r\n    let scene = useRef(0);\r\n    let color = useRef(0);\r\n    const [colorSet, setColorSet] = useState(\"\");\r\n\r\n    let checkIfYouAreLogged = () => { // CHECKS IF USER IS LOGGED IN\r\n        axios.post('https://xentaserver.herokuapp.com/accountdetails', {\r\n            authorization: localStorage.getItem('user')\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('user')}`\r\n                }\r\n            })\r\n            .then(res => {\r\n                if(res.data.newToken){\r\n                    localStorage.setItem('user', res.data.newToken);\r\n                    checkIfYouAreLogged();\r\n                }\r\n                else{\r\n                let [user, date, score, avatar, gametag] = JSON.stringify(res.data).split(\",\");\r\n                setUserInfo(user.slice(1, user.length));\r\n                setJoinedDate(date);\r\n                setMaxScore(score);\r\n                setGameTag(gametag.slice(0, -1));\r\n                if(avatar.length < 1){\r\n                    scene.current.background = new THREE.Color(0xFF0000);\r\n                }\r\n                else{\r\n                    switch(avatar){\r\n                        case \"red\":\r\n                            scene.current.background = new THREE.Color(0xFF0000);\r\n                            break;\r\n                        case \"yellow\":\r\n                            scene.current.background = new THREE.Color(0xFFFF00);\r\n                            break;\r\n                        case \"blue\":\r\n                            scene.current.background = new THREE.Color(0x0000ff);\r\n                            break;\r\n                        default:        \r\n                    }\r\n                }\r\n                }\r\n            })\r\n            .catch(error => {\r\n            window.location.assign('https://xentaserver.herokuapp.com/login')\r\n            })\r\n    };\r\n    useEffect(()=>{\r\n        checkIfYouAreLogged();\r\n    })\r\n\r\n        useEffect(()=>{    \r\n        //AVATAR\r\n        let obj;\r\n        const loader = new OBJLoader();\r\n        loader.load( 'earth.obj', ( object )=>{\r\n            object.position.x = 0;\r\n            object.position.y = -1.5;\r\n            object.position.z = -4;\r\n            obj = object;\r\n            scene.current.add( obj );\r\n        } );\r\n            let height = canvas.current.clientHeight\r\n            let width = canvas.current.clientWidth\r\n            let raycaster = new THREE.Raycaster();\r\n            let mouse = new THREE.Vector2();\r\n            let pointOfIntersection = new THREE.Vector3();\r\n            let plane = new THREE.Plane(new THREE.Vector3(0, 0, 0.5), 0.5);\r\n            //const helper = new THREE.PlaneHelper( plane, 10, 0xffff00 ); DEBUGGING TO SEE THE PLANE\r\n    \r\n            canvas.current.onmousemove = (e)=>{\r\n                mouse.x = ((e.clientX - canvas.current.offsetLeft) / width) *2 -1;\r\n                mouse.y = - ( (e.clientY - canvas.current.offsetTop) / height) * 2 + 1;\r\n                raycaster.setFromCamera(mouse, camera);\r\n                raycaster.ray.intersectPlane(plane, pointOfIntersection);\r\n                obj.lookAt(pointOfIntersection);       \r\n            }\r\n    \r\n            scene.current = new THREE.Scene();\r\n            //scene.add(helper) ONLY FOR DEBUGGING\r\n            const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n            const renderer = new THREE.WebGLRenderer();\r\n            camera\r\n                .position\r\n                .set(0, 0, 4);\r\n            const color = 'white';\r\n            const intensity = 1;\r\n            const light = new THREE.DirectionalLight(color, intensity);\r\n            light\r\n                .position\r\n                .set(0, 0, 3);\r\n            scene.current.add(light);\r\n            scene.current.background = new THREE.Color(color.current);\r\n      \r\n            window.addEventListener('resize', ()=>{\r\n                if(canvas.current !== null){\r\n                width = canvas.current.clientWidth\r\n                height = canvas.current.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.aspect = width / height;\r\n                camera.updateProjectionMatrix();\r\n            }\r\n            });\r\n            renderer.setSize(width, height)\r\n            canvas.current.appendChild(renderer.domElement)\r\n    \r\n            const animate = ()=>{\r\n                renderer.render(scene.current, camera)\r\n                window.requestAnimationFrame(animate);\r\n            }\r\n            animate()\r\n        },[])\r\n\r\n        let setAvatarColor = ()=>{\r\n            axios.post('https://xentaserver.herokuapp.com/setcolor', { // UPLOADS SCORE\r\n            authorization: localStorage.getItem('user'),\r\n            avatar: `${color.current}`\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('user')}`\r\n            }\r\n        }).then(res => {\r\n            setColorSet(\"Color set!\");\r\n        }).catch(error => {\r\n            setColorSet(\"Could not update color\");\r\n        })\r\n}\r\n    return (\r\n        <div style={style.backgroundAccount}>\r\n            <div style={style.insideAccount}>\r\n                <div style={{display: \"flex\", overflow: \"hidden\"}}>\r\n                    <div style={style.canvas} ref={canvas}>\r\n                    </div>\r\n                    <div style={{flex: \"1\", display: \"grid\", justifyContent: \"center\", paddingTop: \"5%\", border: \"2px solid black\"}}>\r\n                        <div>\r\n                            <div style={{textDecoration: \"underline\", fontWeight: \"bold\"}}>Set avatar's background color:</div>\r\n                            <div style={{display: \"flex\", justifyContent: \"center\", height: \"10%\", width: \"100%\", marginTop: \"5%\"}}>\r\n                                <div style={{flex: \"1\", display: \"flex\", justifyContent: \"center\"}}>\r\n                                    <div style={{background:\"red\", height: \"30px\", width:\"30px\", boxShadow: \"3px 3px 16px 0px rgba(50, 50, 50, 0.75)\",\r\n                                    transition: \"0.5s ease-out\", cursor: \"pointer\", border: \"1px solid black\"\r\n                                    }}\r\n                                     onMouseEnter={(e)=>{e.currentTarget.style.transform = \"scale(1.05, 1.05)\"}}\r\n                                     onMouseLeave={(e)=>{e.currentTarget.style.transform = \"scale(1, 1)\"}}   \r\n                                     onClick={()=>{\r\n                                         scene.current.background = new THREE.Color(0xFF0000);\r\n                                         color.current = \"red\";\r\n                                    }}                                 \r\n                                    ></div>\r\n                                </div>\r\n                                <div style={{flex: \"1\", display: \"flex\", justifyContent: \"center\"}}>\r\n                                    <div\r\n                                     style={{background:\"yellow\", height: \"30px\", width:\"30px\", boxShadow: \"3px 3px 16px 0px rgba(50, 50, 50, 0.75)\",\r\n                                     transition: \"0.5s ease-out\", cursor: \"pointer\", border: \"1px solid black\"\r\n                                    }}\r\n                                     onMouseEnter={(e)=>{e.currentTarget.style.transform = \"scale(1.05, 1.05)\"}}\r\n                                     onMouseLeave={(e)=>{e.currentTarget.style.transform = \"scale(1, 1)\"}}\r\n                                     onClick={()=>{\r\n                                         scene.current.background = new THREE.Color(0xFFFF00);\r\n                                         color.current = \"yellow\";\r\n                                        }}\r\n                                     ></div>                                    \r\n                                </div>\r\n                                <div style={{flex: \"1\", display: \"flex\", justifyContent: \"center\"}}>\r\n                                    <div style={{background:\"blue\", height: \"30px\", width:\"30px\", boxShadow: \"3px 3px 16px 0px rgba(50, 50, 50, 0.75)\",\r\n                                    transition: \"0.5s ease-out\", cursor: \"pointer\", border: \"1px solid black\"                                    \r\n                                    }}\r\n                                     onMouseEnter={(e)=>{e.currentTarget.style.transform = \"scale(1.05, 1.05)\"}}\r\n                                     onMouseLeave={(e)=>{e.currentTarget.style.transform = \"scale(1, 1)\"}}  \r\n                                     onClick={()=>{\r\n                                         scene.current.background = new THREE.Color(0x0000ff);\r\n                                         color.current = \"blue\";\r\n                                        }}                                  \r\n                                    ></div>                                    \r\n                                </div>\r\n                            </div>\r\n                            <div style={{display: \"grid\", textAlign: \"center\", height: \"50px\", width: \"70%\", marginTop: \"10%\",\r\n                            background: \"black\", color: \"white\", zIndex: \"2\", position: \"relative\", left: \"15%\",\r\n                            boxShadow: \"inset 0px 0px 0px #2F3B47\", alignContent: \"center\", transition: \"all 0.5s ease-out\", fontWeight: \"bold\",\r\n                            cursor: \"pointer\"\r\n                           }}\r\n                           onClick={()=>setAvatarColor()}\r\n                           onMouseEnter={(e)=>{e.currentTarget.style.boxShadow = \"inset 0px -80px 0px #2F3B47\"}}\r\n                           onMouseLeave={(e)=>{e.currentTarget.style.boxShadow = \"inset 0px 0px 0px #2F3B47\"}}>Set</div>\r\n                           <div style={{display: \"grid\", justifyContent: \"center\", alignItems: \"center\", marginTop: \"5%\"}}>{colorSet}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{display: \"grid\", flex: \"1\", justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\", fontWeight: \"bold\", border: \"2px solid black\"}}>\r\n                        <div>\r\n                            <div style={{marginBottom: \"2%\", border: \"1px solid black\", boxShadow: \"3px 3px 16px 0px rgba(50, 50, 50, 0.75)\"}}>\r\n                                Account\r\n                            </div>\r\n                            <div>\r\n                            {userInfo}\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div style={{marginBottom: \"2%\", border: \"1px solid black\", boxShadow: \"3px 3px 16px 0px rgba(50, 50, 50, 0.75)\"}}>\r\n                                Username\r\n                            </div>\r\n                            <div>\r\n                            {gameTag}\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                        <div style={{marginBottom: \"2%\", border: \"1px solid black\", boxShadow: \"3px 3px 16px 0px rgba(50, 50, 50, 0.75)\"}}>\r\n                                Join date\r\n                            </div>\r\n                            <div>\r\n                            {joinedDate}\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                        <div style={{marginBottom: \"2%\", border: \"1px solid black\", boxShadow: \"3px 3px 16px 0px rgba(50, 50, 50, 0.75)\"}}>\r\n                            Max score\r\n                            </div>\r\n                            <div>\r\n                            {maxScore}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{display: \"grid\", alignItems: \"center\"}}>\r\n                    <div style={{fontWeight: \"bold\", textAlign: \"center\", color: \"gray\"}}>\r\n                        This part aswell as other parts of the website are not finished, my idea was to include more avatars and more interactivity.<br></br>\r\n                        However due to time constraints and perhaps the desire to start my new project, this will be delayed undefinitely.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Account","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\leaderboard.jsx",["72","73","74","75"],"import {useEffect, useRef, useState} from 'react'\r\nimport axios from 'axios';\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport * as THREE from \"three\";\r\nlet style = {\r\n    container: {\r\n        display: \"grid\",\r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        fontWeigth: \"bold\"\r\n    },\r\n    leaderboard: {\r\n        width: \"600px\",\r\n        height: \"600px\",\r\n        position: \"relative\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        color: \"white\",\r\n        overflow: \"scroll\",\r\n        overflowX: \"hidden\",\r\n        marginLeft: \"-300px\",\r\n        background: \"black\",\r\n        opacity: \"0.8\",\r\n        marginTop: \"-300px\",\r\n        boxShadow: \"7px 7px 10px 0px rgba(50, 50, 50, 0.75)\"\r\n    },\r\n    row: {\r\n        display: \"flex\",\r\n        width: \"100%\",\r\n        height: \"50px\",\r\n        textAlign: \"center\"\r\n    },\r\n    pages: {\r\n        display: \"flex\",\r\n        height: \"50px\",\r\n        textAlign: \"center\"\r\n    },\r\n    canvas:{\r\n        flex: \"1\",\r\n        zIndex: \"0\",\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        minWidth: \"100vw\",\r\n        maxHeight: \"100vh\", \r\n        maxWidth: \"100vw\",\r\n    },\r\n}\r\n\r\nlet Leaderboard = () => {\r\n    const [scores,\r\n        setScores] = useState(0);\r\n    const [fetchedData,\r\n        setFetched] = useState(false);\r\n    const [dataReady,\r\n        setDataReady] = useState(false);\r\n    let arrayData = useRef(0);\r\n    let loadingAnimation = useRef(0);\r\n    let loginForm = useRef(0);\r\n    let canvas = useRef(0);\r\n    let shield = useRef(0);\r\n    let camera = useRef(0);\r\n    const [componentLoaded,\r\n        setComponentLoaded] = useState(null);\r\n    let loadingScreenMessages = useRef(0);\r\n    let percentage = useRef(0);\r\n    let fadeScreen = useRef(0);        \r\n    let leaderboard = useRef(0);\r\n    useEffect(() => {\r\n        if (fetchedData === false) {\r\n            axios.post('https://xentaserver.herokuapp.com/leaderboard', { // GETS SCORE\r\n                authorization: `Bearer ${localStorage.getItem('user')}`\r\n            }, {\r\n                headers: {\r\n                    // Overwrite Axios's automatically set Content-Type\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${localStorage.getItem('user')}`\r\n                }\r\n            }).then(res => {\r\n                setScores(res.data);\r\n                arrayData.current = res\r\n                    .data\r\n                    .slice(1, -1)\r\n                    .split(\",\");\r\n                addRows();\r\n                setFetched(true);\r\n            }).catch(error => {\r\n                setFetched(true);\r\n            })\r\n        }\r\n    })\r\n    useEffect(()=>{\r\n        if (componentLoaded === null) {\r\n        setComponentLoaded(false);\r\n        let height = canvas.current.clientHeight;\r\n        let width = canvas.current.clientWidth;\r\n        const manager = new THREE.LoadingManager();// WHEN MODELS ARE LOADED .onLoad will be called\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        camera.current = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer();\r\n        camera.current\r\n            .position\r\n            .set(0, 0, 2);\r\n        camera.current\r\n            .rotation\r\n            .set(0, 0, 0);\r\n        /*let controls = new OrbitControls(camera, renderer.domElement);\r\n            controls\r\n                .target\r\n                .set(0, 0, -2)*/\r\n        const color = 'white';\r\n        const intensity = 1;\r\n        const light = new THREE.DirectionalLight(color, intensity);\r\n        light\r\n            .position\r\n            .set(0, 0, 3);\r\n        scene.add(light);\r\n        //scene.background = new THREE.Color(0x6B8E23);\r\n        //SKYBOX CUBE \r\n        //https://opengameart.org/content/cloudy-skyboxes \r\n        //TEXTURE OF THE CUBE\r\n        let materialArray = [];\r\n        let texture_ft = new THREE.TextureLoader().load( '/skyboxImage/ft.jpg');\r\n        let texture_bk = new THREE.TextureLoader().load( '/skyboxImage/bk.jpg');\r\n        let texture_up = new THREE.TextureLoader().load( '/skyboxImage/up.jpg');\r\n        let texture_dn = new THREE.TextureLoader().load( '/skyboxImage/dn.jpg');\r\n        let texture_rt = new THREE.TextureLoader().load( '/skyboxImage/rt.jpg');\r\n        let texture_lf = new THREE.TextureLoader().load( '/skyboxImage/Lf.jpg');\r\n          \r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_ft }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_bk }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_up }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_dn }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_rt }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_lf }));\r\n           \r\n        for (let i = 0; i < 6; i++)\r\n          materialArray[i].side = THREE.BackSide;\r\n\r\n\r\n\r\n        let geometry = new THREE.BoxGeometry( 25, 25, 25 );\r\n        //let material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );\r\n        let cube = new THREE.Mesh( geometry, materialArray );\r\n        cube.position.x = 0; cube.position.y = 0; cube.position.z = 0; cube.rotation.x = Math.PI / 2;\r\n        scene.add( cube );\r\n\r\n\r\n        //IMPORT SHIELD EXPORTED FROM BLENDER AS GLB\r\n        const loader = new GLTFLoader(manager);\r\n        loader.load(\"shield.glb\", function (object) {\r\n            object.scene.position.x = 0.15;\r\n            object.scene.position.y = -0.96489601753;\r\n            object.scene.position.z = -4;\r\n            object.scene.rotation.set(0, 0, 0);\r\n            /*object\r\n                .scene\r\n                .scale\r\n                .set(0.3, 0.3, 0.3)*/\r\n            shield.current = object;\r\n            scene.add(object.scene);\r\n            let box = new THREE\r\n            .Box3()\r\n            .setFromObject(shield.current.scene);\r\n        });\r\n\r\n\r\n        window.addEventListener('resize', ()=>{\r\n            if(canvas.current !== null){\r\n            width = canvas.current.clientWidth\r\n            height = canvas.current.clientHeight\r\n            renderer.setSize(width, height);\r\n            camera.current.aspect = width / height;\r\n            camera.current.updateProjectionMatrix();\r\n        }\r\n        });\r\n        renderer.setSize(width, height)\r\n        canvas.current.appendChild(renderer.domElement)\r\n\r\n        const animate = ()=>{\r\n            renderer.render(scene, camera.current)\r\n            window.requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n                //CHECK IF MODELS ARE LOADED\r\n        percentage.current.innerText = \"0 %\";\r\n        let array = [\r\n            \"Loading Existential Buffer\", \"Setting Universal Physical Constants\",\r\n            \"Modeling Object Components\", \"Installing ransomware: Complete >:)\",\r\n             \"Gathering Particle Sources\", \"I'm testing your patience\",\r\n            \"Reconfoobling energymotron...\", \"Your left thumb points to the right and your right thumb points to the left.\",\r\n            \"I'm sorry for being so slow\", \"Too fair to worship, too divine to love\",\r\n            \"An idea is always a generalization, and generalization is a property of thinking. To generalize means to think\",\r\n            \"UwU\", \"hey there buddy chum pal friend buddy pal chum bud friend fella bruther amigo pal buddy friend chummy chum chum pal\"\r\n             ]\r\n        manager.onProgress = ()=>{\r\n                if(parseInt(percentage.current.innerText.slice(0, -2)) < 100){\r\n                loadingScreenMessages.current.innerText =  array[Math.floor(Math.random() * array.length)];\r\n                percentage.current.innerText = parseInt(percentage.current.innerText.slice(0, -2)) + 1 + \" %\";\r\n                }\r\n                else{\r\n                    percentage.current.innerText = \"100%\";\r\n                }\r\n        }\r\n            manager.onLoad = ()=>{\r\n                percentage.current.innerText = \"100%\";\r\n                        fadeScreen.current.style.animation = \"loadingDone 1s normal forwards ease-out\";\r\n                        fadeScreen.current.onanimationend = ()=>setComponentLoaded(true);\r\n            }\r\n    }\r\n    },[componentLoaded]);\r\n\r\n    const addRows = () => {\r\n        let newArr = [];\r\n        for (let i = 0; i < arrayData.current.length; i += 2) {\r\n            newArr.push([\r\n                arrayData.current[i],\r\n                arrayData.current[i + 1]\r\n            ]);\r\n        }\r\n        sortRow(newArr);\r\n    }\r\n    const sortRow = (newArr) => {\r\n        for (let i = 0; i < newArr.length; i++) {\r\n            for (let j = 0; j < newArr.length - 1; j++) {\r\n                if (parseInt(newArr[j][1]) > parseInt(newArr[j + 1][1])) {\r\n                    let tempElement = newArr[j];\r\n                    newArr.splice(j, 1, newArr[j + 1]);\r\n                    newArr.splice(j + 1, 1, tempElement);\r\n                }\r\n            }\r\n        }\r\n        arrayData.current = newArr;\r\n        setDataReady(true);\r\n    }\r\n    const rowComponents = () => {\r\n        let arrayComponents = [];\r\n        let component = (number, user, score) => {\r\n            return (\r\n                <div style={style.row}>\r\n                    <div\r\n                        style={{\r\n                        flex: \"1\",\r\n                        border: \"1px solid gray\",\r\n                        display: \"grid\",\r\n                        alignItems: \"center\", transition: \"all 0.5s ease-out\"\r\n                    }}>{number}</div>\r\n                    <div\r\n                        style={{\r\n                        flex: \"1\",\r\n                        border: \"1px solid gray\",\r\n                        display: \"grid\",\r\n                        alignItems: \"center\", transition: \"all 0.5s ease-out\"\r\n                    }}\r\n                        onMouseEnter={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"inset 200px 0px 0px #2F3B47\"\r\n                    }}\r\n                        onMouseLeave={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"\"\r\n                    }}>{user}</div>\r\n                    <div\r\n                        style={{\r\n                        flex: \"1\",\r\n                        border: \"1px solid gray\",\r\n                        display: \"grid\",\r\n                        alignItems: \"center\", transition: \"all 0.5s ease-out\"\r\n                    }}\r\n                        onMouseEnter={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"inset 200px 0px 0px #2F3B47\"\r\n                    }}\r\n                        onMouseLeave={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"\"\r\n                    }}>{score}</div>\r\n                </div>\r\n            )\r\n        }\r\n        if (arrayData.current.length > 30) {\r\n            for (let i = 30; i >= 0; i--) {\r\n                arrayComponents.push(component(arrayData.current[i][0], arrayData.current[i][1]));\r\n            }\r\n        } else {\r\n            let num = 0;\r\n            for (let i = arrayData.current.length - 1; i >= 0; i--) {\r\n                arrayComponents.push(component(num += 1, arrayData.current[i][0], arrayData.current[i][1]));\r\n            }\r\n        }\r\n        return arrayComponents;\r\n    }\r\n\r\n    /*const browsePages = ()=>{ WILL BE ADDED SOON\r\n        let pages = Math.ceil(arrayData.current.length / 10);\r\n        let arrayComponents = [];\r\n        let component = (pageNumber)=>{\r\n        return(\r\n        <div style={style.pages} onClick={}>\r\n            <div style={{width: \"50px\", border: \"2px solid black\", display: \"grid\", alignItems: \"center\"}}>{pageNumber}</div>\r\n        </div>)\r\n        }\r\n        for(let i = 0; i < pages; i++){\r\n            arrayComponents.push(component(i));\r\n        }\r\n        return arrayComponents;\r\n    }*/\r\n        //TRACK MOUSE MOVEMENT AND ROTATE FORM AND SHIELD\r\n    let mouseMove = (e)=>{\r\n        let mousex = (e.clientX   - ( canvas.current.getBoundingClientRect().left / 2)) ;\r\n        let mousey = (e.clientY  - ( canvas.current.getBoundingClientRect().top / 2)) ;\r\n        let x = mousex - canvas.current.getBoundingClientRect().width / 2 ;\r\n        let y = canvas.current.getBoundingClientRect().height / 2 - mousey ;\r\n        leaderboard.current.style.transform = `perspective(700px) rotateY(${x / 100}deg) rotateX(${ y / 100}deg)`;\r\n        camera.current.rotation.y = (x / 1000) * (Math.PI / 180);\r\n        camera.current.rotation.x = -(y / 1000) * (Math.PI / 180);\r\n        shield.current.scene.rotation.y = (x / 100) * (Math.PI / 180);\r\n        shield.current.scene.rotation.x = -(y / 100) * (Math.PI / 180);\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={style.container}>\r\n            <div style={style.canvas} onMouseMove={(e)=>mouseMove(e)} ref={canvas}></div>            \r\n            <div ref={leaderboard} onMouseMove={(e)=>mouseMove(e)} style={style.leaderboard}>\r\n                <div style={style.row}>\r\n                    <div\r\n                        style={{\r\n                        flex: \"1\",\r\n                        border: \"1px solid gray\",\r\n                        display: \"grid\",\r\n                        alignItems: \"center\", transition: \"all 0.5s ease-out\"\r\n                    }}>Nº</div>\r\n                    <div\r\n                        style={{\r\n                        flex: \"1\",\r\n                        border: \"1px solid gray\",\r\n                        display: \"grid\",\r\n                        alignItems: \"center\", transition: \"all 0.5s ease-out\"\r\n                    }}\r\n                        onMouseEnter={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"inset 200px 0px 0px #2F3B47\"\r\n                    }}\r\n                        onMouseLeave={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"\"\r\n                    }}>User name</div>\r\n                    <div\r\n                        style={{\r\n                        flex: \"1\",\r\n                        border: \"1px solid gray\",\r\n                        display: \"grid\",\r\n                        alignItems: \"center\", transition: \"all 0.5s ease-out\"\r\n                    }}\r\n                        onMouseEnter={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"inset 200px 0px 0px #2F3B47\"\r\n                    }}\r\n                        onMouseLeave={(e) => {\r\n                        e.currentTarget.style.boxShadow = \"\"\r\n                    }}>Score</div>\r\n                </div>\r\n                <div>\r\n                    {dataReady\r\n                        ? rowComponents()\r\n                        : \"\"}\r\n                </div>\r\n            </div>\r\n            <div className= \"loadingScreen\" ref={fadeScreen} style={componentLoaded ? {display: \"none\"} : {display: \"grid\"}}>\r\n                <div>\r\n                    <span>L</span>\r\n                    <span>O</span>\r\n                    <span>A</span>\r\n                    <span>D</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>{\" \"}</span>\r\n                    <span ref={percentage}></span>\r\n                </div>\r\n                <div className= \"messages\" ref={loadingScreenMessages}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":7,"column":8,"nodeType":"82","messageId":"83","endLine":7,"endColumn":13},{"ruleId":"80","severity":1,"message":"84","line":10,"column":20,"nodeType":"82","messageId":"83","endLine":10,"endColumn":26},{"ruleId":"80","severity":1,"message":"85","line":16,"column":10,"nodeType":"82","messageId":"83","endLine":16,"endColumn":19},{"ruleId":"80","severity":1,"message":"86","line":23,"column":15,"nodeType":"82","messageId":"83","endLine":23,"endColumn":23},{"ruleId":"80","severity":1,"message":"87","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":20},{"ruleId":"80","severity":1,"message":"88","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":19},{"ruleId":"80","severity":1,"message":"89","line":113,"column":13,"nodeType":"82","messageId":"83","endLine":113,"endColumn":22},{"ruleId":"80","severity":1,"message":"90","line":114,"column":13,"nodeType":"82","messageId":"83","endLine":114,"endColumn":18},{"ruleId":"80","severity":1,"message":"91","line":115,"column":13,"nodeType":"82","messageId":"83","endLine":115,"endColumn":32},{"ruleId":"80","severity":1,"message":"92","line":116,"column":13,"nodeType":"82","messageId":"83","endLine":116,"endColumn":18},{"ruleId":"80","severity":1,"message":"93","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":26},{"ruleId":"80","severity":1,"message":"94","line":14,"column":7,"nodeType":"82","messageId":"83","endLine":14,"endColumn":20},{"ruleId":"80","severity":1,"message":"95","line":96,"column":9,"nodeType":"82","messageId":"83","endLine":96,"endColumn":21},{"ruleId":"80","severity":1,"message":"94","line":6,"column":7,"nodeType":"82","messageId":"83","endLine":6,"endColumn":20},{"ruleId":"80","severity":1,"message":"96","line":213,"column":18,"nodeType":"82","messageId":"83","endLine":213,"endColumn":22},{"ruleId":"80","severity":1,"message":"96","line":252,"column":18,"nodeType":"82","messageId":"83","endLine":252,"endColumn":22},{"ruleId":"80","severity":1,"message":"97","line":347,"column":17,"nodeType":"82","messageId":"83","endLine":347,"endColumn":20},{"ruleId":"80","severity":1,"message":"94","line":10,"column":7,"nodeType":"82","messageId":"83","endLine":10,"endColumn":20},{"ruleId":"80","severity":1,"message":"98","line":37,"column":9,"nodeType":"82","messageId":"83","endLine":37,"endColumn":24},{"ruleId":"80","severity":1,"message":"99","line":86,"column":19,"nodeType":"82","messageId":"83","endLine":86,"endColumn":35},{"ruleId":"80","severity":1,"message":"100","line":5,"column":9,"nodeType":"82","messageId":"83","endLine":5,"endColumn":17},{"ruleId":"80","severity":1,"message":"101","line":41,"column":11,"nodeType":"82","messageId":"83","endLine":41,"endColumn":16},{"ruleId":"80","severity":1,"message":"102","line":50,"column":12,"nodeType":"82","messageId":"83","endLine":50,"endColumn":18},{"ruleId":"80","severity":1,"message":"103","line":57,"column":9,"nodeType":"82","messageId":"83","endLine":57,"endColumn":25},{"ruleId":"80","severity":1,"message":"104","line":58,"column":9,"nodeType":"82","messageId":"83","endLine":58,"endColumn":18},{"ruleId":"80","severity":1,"message":"97","line":162,"column":17,"nodeType":"82","messageId":"83","endLine":162,"endColumn":20},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'useEffect' is defined but never used.","'setValue' is assigned a value but never used.","'useContext' is defined but never used.","'OBJLoader' is defined but never used.","'raycaster' is assigned a value but never used.","'mouse' is assigned a value but never used.","'pointOfIntersection' is assigned a value but never used.","'plane' is assigned a value but never used.","'SimplifyModifier' is defined but never used.","'OrbitControls' is assigned a value but never used.","'titleYoutube' is assigned a value but never used.","'user' is assigned a value but never used.","'box' is assigned a value but never used.","'knightRotationX' is assigned a value but never used.","'textureFlareMoon' is assigned a value but never used.","'Redirect' is defined but never used.","'input' is assigned a value but never used.","'scores' is assigned a value but never used.","'loadingAnimation' is assigned a value but never used.","'loginForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]