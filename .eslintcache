[{"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js":"1","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js":"2","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js":"3","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx":"4","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx":"5","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx":"6","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx":"7","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx":"8","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":1173,"mtime":1609529909435,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":11971,"mtime":1610664442280,"results":"14","hashOfConfig":"11"},{"size":14791,"mtime":1609820605122,"results":"15","hashOfConfig":"11"},{"size":10816,"mtime":1610653322216,"results":"16","hashOfConfig":"11"},{"size":91,"mtime":1607656069637,"results":"17","hashOfConfig":"11"},{"size":25830,"mtime":1610507215163,"results":"18","hashOfConfig":"11"},{"size":1682,"mtime":1609095910141,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1na3gvm",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js",[],["44","45"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js",["46"],"import './App.css';\nimport HomeScreen from './components/homeScreen';\nimport Navbar from './components/navbar';\nimport Login from './components/login';\nimport Game from './components/game'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  BrowserRouter\n} from \"react-router-dom\";\nimport { PageContext } from './pageContext'\nimport { useState } from 'react';\nimport Account from './components/account';\n\nfunction App() {\n\nconst [value, setValue] = useState(\"HomePage\")\n  \n  return (\n    <BrowserRouter>\n    <Switch>\n    <PageContext.Provider value={{value, setValue}}>  \n    <Route exact path=\"/\" render = {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <HomeScreen/>\n      </div>\n    }></Route>\n    <Route exact path=\"/login\" render= {props =>\n    <div>\n      <Login/>\n    </div>\n    }></Route>\n     <Route exact path=\"/game\" render= {props =>\n    <div className=\"App\">\n      <Navbar/>\n      <Game/>\n    </div>\n    }></Route>\n    <Route exact path=\"/account\" render= {props =>\n    <div className=\"App\">\n      <Navbar/>\n      <Account/>\n    </div>\n    }></Route>\n    </PageContext.Provider>\n    </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx",["47"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx",["48","49","50","51","52","53","54","55","56"],"import {useRef, useState, useEffect} from 'react'\r\nimport '../App.css';\r\nimport * as THREE from \"three\";\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport TWEEN from '@tweenjs/tween.js'\r\n\r\nimport {Link} from \"react-router-dom\";\r\nimport {text} from '@fortawesome/fontawesome-svg-core';\r\nlet style = {\r\n    container: {\r\n        backgroundColor: 'transparent',\r\n        position: 'absolute',\r\n        top: \"6.5rem\",\r\n        minHeight: '100vh',\r\n        maxHeight: '100vh',\r\n        minWidth: '100%',\r\n        maxWidth: '100%'\r\n    },\r\n    title: {\r\n        display: 'flex',\r\n        color: 'white',\r\n        fontSize: '6rem',\r\n        justifyContent: 'center'\r\n    },\r\n    howToPlay: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        color: 'white',\r\n        fontSize: '4rem',\r\n        left: '10%',\r\n        width: '90%'\r\n    },\r\n    canvas: {\r\n        display: 'grid',\r\n        position: 'fixed',\r\n        minHeight: '100vh',\r\n        minWidth: '1920px',\r\n        maxWidth: '1920px',\r\n        maxHeight: \"100vh\"\r\n    },\r\n    explanationBox: {\r\n        display: \"none\",\r\n        backgroundColor: \"rgb(80, 100, 40)\",\r\n        width: \"70%\",\r\n        height: \"100vh\",\r\n        left: \"15%\",\r\n        position: \"relative\",\r\n        boxShadow: \"0 10px 20px gray, 0 6px 6px gray\"\r\n    },\r\n    footer: {\r\n        backgroundColor: \"rgb(32, 30, 29)\",\r\n        color: 'white',\r\n        display: 'flex',\r\n        height: '10rem',\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"250vh\"\r\n    },\r\n    playButton: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        backgroundColor: \"red\",\r\n        width: \"20%\",\r\n        height: \"10%\",\r\n        position: \"relative\",\r\n        top: \"80%\",\r\n        display: \"flex\",\r\n        left: \"40%\"\r\n    }\r\n}\r\n\r\nconst HomeScreen = () => {\r\n    const canvas = useRef(0);\r\n    const [scene,\r\n        setScene] = useState(\"Scene not set\");\r\n    let obj = useRef(0);\r\n    let switcher = useRef(0)\r\n    let mixer = useRef(0)\r\n    useEffect(() => {\r\n        let height = canvas.current.clientHeight\r\n        let width = canvas.current.clientWidth\r\n\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .position\r\n            .set(0, 0, 4);\r\n        const color = 'white';\r\n        const intensity = 1;\r\n        const light = new THREE.DirectionalLight(color, intensity);\r\n        light\r\n            .position\r\n            .set(0, 0, 3);\r\n        scene.add(light);\r\n        let clock = new THREE.Clock();\r\n        window.addEventListener('resize', () => {\r\n            if (canvas.current !== null) {\r\n                width = canvas.current.clientWidth\r\n                height = canvas.current.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.aspect = width / height;\r\n                camera.updateProjectionMatrix();\r\n            }\r\n        });\r\n\r\n        //// PARTICLES\r\n        let particleCount = 2000\r\n        let particleDistance = 53;\r\n        let particles = new THREE.Geometry();\r\n        let texture = new THREE\r\n            .TextureLoader()\r\n            .load('leaftexture.png');\r\n        let pMaterial = new THREE.PointsMaterial({\r\n            color: 'green', size: 0.3, map: texture, alphaTest: 0.1, // removes black squares\r\n            blending: THREE.NormalBlending,\r\n            transparent: true\r\n        });\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let posX = (Math.random() - 0.5) * particleDistance;\r\n            let posY = (Math.random() - 0.5) * particleDistance;\r\n            let posZ = (Math.random() - 0.5) * particleDistance;\r\n            let particle = new THREE.Vector3(posX, posY, posZ);\r\n            particles\r\n                .vertices\r\n                .push(particle);\r\n        }\r\n\r\n        // create the particle system\r\n        let particleSys = new THREE.Points(particles, pMaterial);\r\n        particleSys.name = 'particleSys';\r\n        renderer.setAnimationLoop(() => {\r\n            let particleSys = scene.getObjectByName('particleSys');\r\n            particleSys\r\n                .geometry\r\n                .vertices\r\n                .forEach(particle => {\r\n                    particle.y -= 0.01;\r\n                    if (particle.y < -10) {\r\n                        particle.y = 20\r\n                    }\r\n                    particleSys.geometry.verticesNeedUpdate = true;\r\n                })\r\n            renderer.render(scene, camera)\r\n        })\r\n        scene.add(particleSys)\r\n        // CHARACTER ADDON FOR MAIN MENU\r\n        const loader = new GLTFLoader()\r\n        loader.load(\"knight.gltf\", function (object) {\r\n            object.scene.position.x = 0;\r\n            object.scene.position.y = -2;\r\n            object.scene.position.z = -2;\r\n            object\r\n                .scene\r\n                .scale\r\n                .set(1.2, 1.2, 1.2)\r\n            obj.current = object;\r\n            mixer.current = new THREE.AnimationMixer(obj.current.scene);\r\n            scene.add(obj.current.scene);\r\n            animationOne();\r\n            switcher.current = 1\r\n        },);\r\n        // setTimeout(()=>mixer.clipAction(obj.animations[1]).play(), 8000)// WORKS\r\n\r\n        renderer.setSize(width, height)\r\n        canvas\r\n            .current\r\n            .appendChild(renderer.domElement)\r\n        const textu = new THREE\r\n            .TextureLoader()\r\n            .load(\"/textures/background.jpg\");\r\n        textu.minFilter = THREE.LinearFilter;\r\n        scene.background = textu;\r\n        const animate = () => {\r\n            let delta = clock.getDelta();\r\n            if (switcher.current === 1) {\r\n                mixer\r\n                    .current\r\n                    .update(delta)\r\n                renderer.render(scene, camera)\r\n            }\r\n            renderer.render(scene, camera)\r\n            window.requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        const animationOne = () => {\r\n            let action = mixer\r\n                .current\r\n                .clipAction(obj.current.animations[15])\r\n            action.play()\r\n            action.clampWhenFinished = true;\r\n            setTimeout(() => {\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[5])\r\n                action.play();\r\n                action.clampWhenFinished = true;\r\n                let tween = new TWEEN\r\n                    .Tween(obj.current.scene.rotation)\r\n                    .to({\r\n                        x: 0,\r\n                        y: 2,\r\n                        z: 0\r\n                    }, 1000)\r\n                    .onComplete(() => {\r\n                        let tween = new TWEEN\r\n                            .Tween(obj.current.scene.position)\r\n                            .to({\r\n                                x: 1,\r\n                                y: -2,\r\n                                z: -2\r\n                            }, 1000)\r\n                            .onComplete(() => {\r\n                                action.stop();\r\n                                animationTwo();\r\n                            })\r\n                            .start()\r\n                        let animateTween = (time) => {\r\n                            TWEEN.update(time)\r\n                            requestAnimationFrame(animateTween)\r\n                        }\r\n                        requestAnimationFrame(animateTween)\r\n                    })\r\n                    .start()\r\n                let animateTween = (time) => {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            }, 5000)\r\n        }\r\n        const animationTwo = () => {\r\n            setTimeout(() => {\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[5])\r\n                action.play();\r\n                action.clampWhenFinished = true;\r\n                let tween = new TWEEN\r\n                    .Tween(obj.current.scene.rotation)\r\n                    .to({\r\n                        x: 0,\r\n                        y: -1,\r\n                        z: 0\r\n                    }, 1000)\r\n                    .onComplete(() => {\r\n                        let tween = new TWEEN\r\n                            .Tween(obj.current.scene.position)\r\n                            .to({\r\n                                x: -1,\r\n                                y: -2,\r\n                                z: -2\r\n                            }, 2000)\r\n                            .onComplete(() => {\r\n                                action.stop();\r\n                                animationThree();\r\n                            })\r\n                            .start()\r\n                        let animateTween = (time) => {\r\n                            TWEEN.update(time)\r\n                            requestAnimationFrame(animateTween)\r\n                        }\r\n                        requestAnimationFrame(animateTween)\r\n                    })\r\n                    .start()\r\n                let animateTween = (time) => {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            }, 5000)\r\n        }\r\n\r\n        const animationThree = () => {\r\n            setTimeout(() => {\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[5])\r\n                action.play();\r\n                action.clampWhenFinished = true;\r\n                let tween = new TWEEN\r\n                    .Tween(obj.current.scene.rotation)\r\n                    .to({\r\n                        x: 0,\r\n                        y: 2,\r\n                        z: 0\r\n                    }, 1000)\r\n                    .onComplete(() => {\r\n                        let tween = new TWEEN\r\n                            .Tween(obj.current.scene.position)\r\n                            .to({\r\n                                x: 1,\r\n                                y: -2,\r\n                                z: -2\r\n                            }, 2000)\r\n                            .onComplete(() => {\r\n                                action.stop();\r\n                                animationTwo();\r\n                            })\r\n                            .start()\r\n                        let animateTween = (time) => {\r\n                            TWEEN.update(time)\r\n                            requestAnimationFrame(animateTween)\r\n                        }\r\n                        requestAnimationFrame(animateTween)\r\n                    })\r\n                    .start()\r\n                let animateTween = (time) => {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            }, 5000)\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div ref={canvas} style={style.canvas}></div>\r\n            <div style={style.container}>\r\n                <div className=\"title\" style={style.title}>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>G</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(125, 140, 40)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>a</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(70, 75, 68)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>m</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>e</span>\r\n                </div>\r\n                <div style={style.howToPlay}>How to play:</div>\r\n                <div style={style.explanationBox}>\r\n                    <div>HERE GOES GRAPHIC STUFF DISPLAYING INSTRUCTIONS</div>\r\n                    <div style={style.playButton}>\r\n                        <Link\r\n                            to=\"/game\"\r\n                            style={{\r\n                            textDecoration: \"none\",\r\n                            display: \"grid\",\r\n                            color: \"white\",\r\n                            width: \"100%\",\r\n                            heigth: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\"\r\n                        }}>Play</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={style.footer}>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default HomeScreen","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx",["57","58"],"import axios from 'axios';\r\nimport {useRef, useState} from 'react'\r\nimport {Redirect} from 'react-router';\r\n\r\nlet style = {\r\n    backgroundLogin: {\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        minHeight: '100vh',\r\n        maxHeight: '100vh',\r\n        backgroundColor: 'red',\r\n        display: 'grid',\r\n        color: 'black',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    insideLogin: {\r\n        borderRadius: \"6px\",\r\n        minHeight: \"500px\",\r\n        maxHeight: \"500px\",\r\n        minWidth: \"360px\",\r\n        maxWidth: \"500px\",\r\n        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\",\r\n        backgroundColor: \"white\",\r\n        display: \"grid\"\r\n    },\r\n    button: {\r\n        flex: '1',\r\n        cursor: 'pointer',\r\n        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\",\r\n        transition: \"0.5s ease-in-out\",\r\n        width: \"25%\",\r\n        height: \"30px\",\r\n        display: \"grid\",\r\n        position: \"relative\",\r\n        alignContent: \"center\",\r\n        left: \"37.5%\",\r\n        color: \"black\",\r\n        textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n        overflow: \"visible\",\r\n        background: \"darkorange\",\r\n        fontSize: \"80%\",\r\n        fontWeight: \"bold\",\r\n        margin: \"0\"\r\n    }\r\n}\r\n\r\nconst Login = () => {\r\n    let input = useRef(null);\r\n    let password = useRef(null);\r\n    let [displayMessage,\r\n        setMessage] = useState(\"\");\r\n    let [signIn,\r\n        setSignIn] = useState(false);\r\n    async function signUp() {\r\n        axios.post('http://localhost:8080/signup', {\r\n            username: input.current.value,\r\n            password: password.current.value\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            setMessage(res.data);\r\n            setSignIn(true);\r\n        }).catch(error => {\r\n            setMessage(error.response.data.message);\r\n        })\r\n    }\r\n    async function login() {\r\n        axios.post('http://localhost:8080/signin', {\r\n            username: input.current.value,\r\n            password: password.current.value\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json'\r\n              }\r\n        }).then(res => {\r\n            console.log(res);\r\n            //GET USERNAME AND TOKEN, USERNAME IN ONE AND TOKEN IN SECOND\r\n            let [user, token] = JSON.stringify(res.data).split(\"/n\")\r\n            localStorage.setItem('user', token.slice(0, -1));\r\n            setMessage(\"Login succesful!\");\r\n            window\r\n                .location\r\n                .replace(\"http://localhost:3000\");\r\n        }).catch(error => {\r\n            console.log(error)\r\n            //setMessage(error.response.data.message);\r\n        })\r\n    }\r\n    let signInButton = useRef(0);\r\n    let underlineSignIn = useRef(0);\r\n    let signUpButton = useRef(0);\r\n    let underlineSignUp = useRef(0);\r\n    let switchButton = useRef(0);\r\n    let underlineSwitch = useRef(0);\r\n    return (\r\n        <div style={style.backgroundLogin}>\r\n            <div style={style.insideLogin}>\r\n                <div\r\n                    style={{\r\n                    display: \"grid\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    fontWeight: \"bold\"\r\n                }}>Welcome back!</div>\r\n                <div>\r\n                    <div style={{\r\n                        fontWeight: \"bold\"\r\n                    }}>Email</div>\r\n                    <input\r\n                        ref={input}\r\n                        type=\"email\"\r\n                        autoComplete=\"email\"\r\n                        spellCheck=\"false\"\r\n                        autoCapitalize=\"none\"\r\n                        style={{\r\n                        paddingLeft: \"2%\",\r\n                        paddingRight: \"2%\",\r\n                        height: \"50%\",\r\n                        width: \"94%\",\r\n                        border: \"none\",\r\n                        margin: \"1%\",\r\n                        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\"\r\n                    }}></input>\r\n                </div>\r\n                <div>\r\n                    <div style={{\r\n                        fontWeight: \"bold\"\r\n                    }}>Password</div>\r\n                    <input\r\n                        ref={password}\r\n                        type=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        spellCheck=\"false\"\r\n                        autoCapitalize=\"none\"\r\n                        style={{\r\n                        paddingLeft: \"2%\",\r\n                        paddingRight: \"2%\",\r\n                        height: \"50%\",\r\n                        width: \"94%\",\r\n                        border: \"none\",\r\n                        margin: \"1%\",\r\n                        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\"\r\n                    }}></input>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                    display: \"grid\",\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    {signIn\r\n                        ? <div\r\n                                style={style.button}\r\n                                onClick={() => login()}\r\n                                onMouseEnter={() => {\r\n                                underlineSignIn.current.style.transform = \"scaleX(1)\";\r\n                            }}\r\n                                onMouseLeave={() => {\r\n                                underlineSignIn.current.style.transform = \"scaleX(0)\";\r\n                            }}>\r\n                                <h2\r\n                                    style={{\r\n                                    flex: '1',\r\n                                    cursor: 'pointer',\r\n                                    transition: \"0.5s ease-in-out\",\r\n                                    color: \"black\",\r\n                                    textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n                                    overflow: \"visible\",\r\n                                    textAlign: \"center\",\r\n                                    margin: \"0\"\r\n                                }}\r\n                                    ref={signInButton}>Sign in</h2>\r\n                                <div\r\n                                    style={{\r\n                                    height: \"2px\",\r\n                                    position: \"relative\",\r\n                                    width: \"80%\",\r\n                                    left: \"10%\",\r\n                                    background: \"black\",\r\n                                    transform: \"scaleX(0)\",\r\n                                    transition: \"all 0.3s ease-out\"\r\n                                }}\r\n                                    ref={underlineSignIn}></div>\r\n                            </div>\r\n                        : <div\r\n                            style={style.button}\r\n                            onClick={() => signUp()}\r\n                            onMouseEnter={() => {\r\n                            underlineSignUp.current.style.transform = \"scaleX(1)\";\r\n                        }}\r\n                            onMouseLeave={() => {\r\n                            underlineSignUp.current.style.transform = \"scaleX(0)\";\r\n                        }}>\r\n                            <h2\r\n                                style={{\r\n                                flex: '1',\r\n                                cursor: 'pointer',\r\n                                transition: \"0.5s ease-in-out\",\r\n                                color: \"black\",\r\n                                textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n                                overflow: \"visible\",\r\n                                textAlign: \"center\",\r\n                                margin: \"0\"\r\n                            }}\r\n                                ref={signUpButton}>Sign up</h2>\r\n                            <div\r\n                                style={{\r\n                                height: \"2px\",\r\n                                position: \"relative\",\r\n                                width: \"80%\",\r\n                                left: \"10%\",\r\n                                background: \"black\",\r\n                                transform: \"scaleX(0)\",\r\n                                transition: \"all 0.3s ease-out\"\r\n                            }}\r\n                                ref={underlineSignUp}></div>\r\n                        </div>}\r\n                </div>\r\n                <div\r\n                    style={{\r\n                    height: \"20px\",\r\n                    margin: \"2%\",\r\n                    textAlign: \"center\"\r\n                }}>{displayMessage}</div>\r\n                <div\r\n                    style={{\r\n                    margin: \"2%\",\r\n                    fontWeight: \"bold\"\r\n                }}>{signIn ? \"If you don't have an account sign up here:\" : \"If you already have an account login here:\"}</div>\r\n                <div\r\n                    style={style.button}\r\n                    onClick={() => signIn ? setSignIn(false) : setSignIn(true)}\r\n                    onMouseEnter={() => {\r\n                    underlineSwitch.current.style.transform = \"scaleX(1)\";\r\n                }}\r\n                    onMouseLeave={() => {\r\n                    underlineSwitch.current.style.transform = \"scaleX(0)\";\r\n                }}>\r\n                    <h2\r\n                        style={{\r\n                        flex: '1',\r\n                        cursor: 'pointer',\r\n                        transition: \"0.5s ease-in-out\",\r\n                        color: \"black\",\r\n                        textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n                        overflow: \"visible\",\r\n                        textAlign: \"center\",\r\n                        margin: \"0\"\r\n                    }}\r\n                        ref={switchButton}>{signIn ? \"Sign up\" : \"Sign in\"}</h2>\r\n                    <div\r\n                        style={{\r\n                        height: \"2px\",\r\n                        position: \"relative\",\r\n                        width: \"80%\",\r\n                        left: \"10%\",\r\n                        background: \"black\",\r\n                        transform: \"scaleX(0)\",\r\n                        transition: \"all 0.3s ease-out\"\r\n                    }}\r\n                        ref={underlineSwitch}></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx",["59","60","61"],"import {useRef, useEffect, useState} from 'react'\r\nimport * as THREE from \"three\";\r\n//import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\n\r\n\r\nimport TWEEN from '@tweenjs/tween.js';\r\n\r\n\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\n\r\nlet style = {\r\n    canvas: {\r\n        display: 'grid',\r\n        position: 'absolute',\r\n        minHeight: '100vh',\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        maxHeight: \"100vh\"\r\n    }\r\n}\r\n\r\nconst Game = () => {\r\n    const canvas = useRef(0);\r\n    const [scene,\r\n        setScene] = useState(\"Scene not set\");\r\n    let obj = useRef(0);\r\n    let switcher = useRef(0);\r\n    let mixer = useRef(0);\r\n    let isRotating = useRef(0)\r\n    let trackedKeys = useRef(0);\r\n    let centerChar = useRef(false);\r\n    let jumpChar = useRef(false);\r\n    let animationsAdded = useRef(0);\r\n    let circleAngle = useRef(0);\r\n    let charAngle = useRef(0);\r\n    let cameraAngle = useRef(-0.005);\r\n    let knightMovementXAxis = useRef(0);\r\n    let knightRotationX = useRef(0);\r\n    let knightRotationZ = useRef(0);\r\n    let trees = useRef(0);\r\n    let angleSphereForTrees = useRef(0);\r\n    let treeRotationAngle = useRef(0);\r\n    let bushes = useRef(0);\r\n    useEffect(() => {\r\n        if (scene === \"Scene not set\") {\r\n            let height = canvas.current.clientHeight\r\n            let width = canvas.current.clientWidth\r\n            const scene = new THREE.Scene();\r\n            //scene.add(helper) ONLY FOR DEBUGGING\r\n            const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n            const renderer = new THREE.WebGLRenderer();\r\n            /*let controls = new OrbitControls(camera, renderer.domElement);\r\n            controls\r\n                .target\r\n                .set(0, 0, 0)*/\r\n            camera\r\n                .position\r\n                .set(0, 8, 2);\r\n            const color = 'yellow';\r\n            const colorMoon = 'white';\r\n            let clock = new THREE.Clock();\r\n            const intensity = 0.4;\r\n            //BACKGROUND LIGHT\r\n            const hemiLight = new THREE.HemisphereLight(0x0000ff, 0x00ff00, 0.6);\r\n            hemiLight\r\n                .position\r\n                .set(0, 500, -2);\r\n            scene.add(hemiLight);\r\n\r\n            const light = new THREE.DirectionalLight(color, intensity);\r\n            light\r\n                .position\r\n                .set(0, 4, -1);\r\n            scene.add(light);\r\n            const light2 = new THREE.DirectionalLight(colorMoon, intensity);\r\n            light2\r\n                .position\r\n                .set(0, -5, -1);\r\n            scene.add(light2);\r\n            window.addEventListener('resize', () => {\r\n                if (canvas.current !== null) {\r\n                    width = canvas.current.clientWidth\r\n                    height = canvas.current.clientHeight\r\n                    renderer.setSize(width, height);\r\n                    camera.aspect = width / height;\r\n                    camera.updateProjectionMatrix();\r\n                }\r\n            });\r\n\r\n            renderer.setSize(width, height)\r\n            canvas\r\n                .current\r\n                .appendChild(renderer.domElement)\r\n            const textu = new THREE\r\n                .TextureLoader()\r\n                .load(\"/textures/skyBackground.jpeg\");\r\n            textu.minFilter = THREE.LinearFilter;\r\n            scene.background = textu;\r\n\r\n\r\n            //TREES\r\n            //FOR DEBUGGING DEACTIVATED\r\n            trees.current = []\r\n            const treeLoader = new GLTFLoader();\r\n            for(let i = 0; i < 1; i++){\r\n                for(let j = 0; j < 25; j++){\r\n                treeLoader.load( '/textures/tree.gltf', ( tree )=>{\r\n                    tree.scene.position.x = Math.floor(Math.random() * 15) - 7; //RANDOM NUMBER BETWEEN -10 AND 10\r\n                    tree.scene.scale.set(0.04, 0.04, 0.04);\r\n                    let zRotationNewRadius = Math.sqrt(49 - (tree.scene.position.x * tree.scene.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n                    let z = Math.sin(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    tree.scene.position.z = -z\r\n                    // I HAVE TO USE THE SAME FORMULA AS THE KNIGHT TO POSITION THE TREE WITH THE RIGHT ROTATION AND Y POSITION\r\n                    // AROUND THE SPHERE\r\n                    // TREE ROTATION SIN ANGLE = OPOSSITE OVER HYPOTHENUSE\r\n                    let treeRotationZ = Math.asin(tree.scene.position.x / 7); //SPHERE RADIUS = 7\r\n                    tree.scene.rotation.z = -treeRotationZ;\r\n                    let treeRotationX = treeRotationAngle.current * (180 / Math.PI); //The tree rotation ON X AXIS (FORWARDS)\r\n                    tree.scene.rotation.x = treeRotationX;\r\n\r\n                    //FIND Y OPOSSITE = SQUARE ROOT OF RADIUS SQUARED - ADYACER = Z SQUARED\r\n                    let treePositionY = Math.cos(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    tree.scene.position.y = treePositionY;\r\n                    trees.current.push(tree);\r\n                    scene.add(tree.scene);\r\n                    angleSphereForTrees.current+=0.28;\r\n                    treeRotationAngle.current-=0.28;\r\n                })\r\n            }\r\n            }\r\n\r\n            //BUSHES\r\n            //CREDITS TO ELITEMASTER from cgtrader.com\r\n            bushes.current = []\r\n            const bushLoader = new GLTFLoader();\r\n            for(let i = 0; i < 1; i++){\r\n                for(let j = 0; j < 100; j++){\r\n                    let bushTexture = new THREE\r\n                    .TextureLoader()\r\n                    .load('leaftexture.png');\r\n                    let geometrySphere = new THREE.SphereGeometry(0.05, 10, 10);\r\n                    let materialSphere = new THREE.MeshPhongMaterial({map: bushTexture, alphaTest: 0.1,\r\n                        color: 'green', // removes black squares\r\n                        blending: THREE.NormalBlending,\r\n                        transparent: true});\r\n                    let bush = new THREE.Mesh(geometrySphere, materialSphere);\r\n                    bush.position.x = Math.floor(Math.random() * 15) - 7; //RANDOM NUMBER BETWEEN -10 AND 10\r\n                    let zRotationNewRadius = Math.sqrt(49 - (bush.position.x * bush.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n                    let z = Math.sin(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    bush.position.z = -z\r\n                    // I HAVE TO USE THE SAME FORMULA AS THE KNIGHT TO POSITION THE TREE WITH THE RIGHT ROTATION AND Y POSITION\r\n                    // AROUND THE SPHERE\r\n                    // TREE ROTATION SIN ANGLE = OPOSSITE OVER HYPOTHENUSE\r\n                    let bushRotationZ = Math.asin(bush.position.x / 7); //SPHERE RADIUS = 7\r\n                    bush.rotation.z = -bushRotationZ - 1.57; // PI / 2\r\n                    let bushRotationX = treeRotationAngle.current * (180 / Math.PI); //The bush rotation ON X AXIS (FORWARDS), REUSING TREE ROTATION SINCE IT ROTATES THE SAME AMOUNT ON X\r\n                    bush.rotation.x = bushRotationX;\r\n\r\n                    //FIND Y OPOSSITE = SQUARE ROOT OF RADIUS SQUARED - ADYACER = Z SQUARED\r\n                    let bushPositionY = Math.cos(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    bush.position.y = bushPositionY + 0.05;\r\n                    bushes.current.push(bush);\r\n                    scene.add(bush);\r\n                    angleSphereForTrees.current+=0.07;\r\n                    treeRotationAngle.current-=0.07;\r\n                /*bushLoader.load( 'bush.glb', ( bush )=>{\r\n                    bush.scene.position.x = Math.floor(Math.random() * 15) - 7; //RANDOM NUMBER BETWEEN -10 AND 10\r\n                    //bush.scene.scale.set(0.02, 0.02, 0.02);\r\n                    let zRotationNewRadius = Math.sqrt(49 - (bush.scene.position.x * bush.scene.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n                    let z = Math.sin(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    bush.scene.position.z = -z\r\n                    // I HAVE TO USE THE SAME FORMULA AS THE KNIGHT TO POSITION THE TREE WITH THE RIGHT ROTATION AND Y POSITION\r\n                    // AROUND THE SPHERE\r\n                    // TREE ROTATION SIN ANGLE = OPOSSITE OVER HYPOTHENUSE\r\n                    let bushRotationZ = Math.asin(bush.scene.position.x / 7); //SPHERE RADIUS = 7\r\n                    bush.scene.rotation.z = -bushRotationZ;\r\n                    let bushRotationX = treeRotationAngle.current * (180 / Math.PI); //The bush rotation ON X AXIS (FORWARDS), REUSING TREE ROTATION SINCE IT ROTATES THE SAME AMOUNT ON X\r\n                    bush.scene.rotation.x = bushRotationX;\r\n\r\n                    //FIND Y OPOSSITE = SQUARE ROOT OF RADIUS SQUARED - ADYACER = Z SQUARED\r\n                    let bushPositionY = Math.cos(angleSphereForTrees.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                    bush.scene.position.y = bushPositionY;\r\n                    bushes.current.push(bush.scene);\r\n                    scene.add(bush.scene);\r\n                })*/\r\n            }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            const loader = new GLTFLoader()\r\n            loader.load(\"knight.gltf\", function (object) {\r\n                object.scene.position.x = 0;\r\n                object.scene.position.y = 7; // CIRCLE RADIUS\r\n                object.scene.position.z = 0;\r\n                object.scene.rotation.y = -Math.PI;\r\n                object\r\n                    .scene\r\n                    .scale\r\n                    .set(0.3, 0.3, 0.3)\r\n                obj.current = object;\r\n                mixer.current = new THREE.AnimationMixer(obj.current.scene);\r\n\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[15]) // IDLE ANIMATION\r\n                action.play()\r\n                action.clampWhenFinished = true;\r\n\r\n                scene.add(object.scene);\r\n                //CHECK CHARACTER SIZE\r\n                let box = new THREE\r\n                    .Box3()\r\n                    .setFromObject(obj.current.scene);\r\n                console.log(box.min, box.max, box.getSize());\r\n\r\n                switcher.current = 1\r\n\r\n                setTimeout(() => {\r\n                    let action = mixer\r\n                        .current\r\n                        .clipAction(obj.current.animations[14]) // RUN ANIMATION\r\n                    action.play()\r\n                    action.clampWhenFinished = true;\r\n                    animationsAdded.current = true; // SETS RUNANDANIMATION\r\n                }, 10000)\r\n                mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[0]); // JUMP ANIMATION\r\n\r\n                //EVENT LISTENER FOR FINISHED ANIMATION\r\n                mixer\r\n                    .current\r\n                    .addEventListener('loop', (e) => {\r\n                        if (e.action._clip.name === \"knight_jump_up_root\") {\r\n                            let action = mixer.current._actions[2];\r\n                            action.stop();\r\n                            jumpChar.current = false;\r\n                        }\r\n                    })\r\n            },);\r\n\r\n            // RUNNING ANIMATION AND MOVEMENT IMPLEMENTING EQUATION IN PARAMETRIC FORM TO\r\n            // FIND THE COORDINATES OF THE CIRCLE SO THAT THE CHARACTER MOVES ALONG THE\r\n            // SURFACE OF IT WHILE ALSO GOING UP OR DOWN DEPENDING ON WHICH PART OF THE\r\n            // CIRCLE HE IS LOCATED AT CIRCLE VELOCITY AND ANGULAR SPEED CALCULATE ROTATION\r\n            // ON X AXIS OF CHARACTER AND Y POSITION MOVES X QUANTITY ON X AXIS; RADIUS IS\r\n            // NOT THE SAME FROM THE SIDES PERSPECTIVES AND WILL INFLUENCE THE RADIUS FROM\r\n            // RUNANIMATION IT IS ALWAYS THE SAME BUT OPTICALLY IT ISNT DUE TO PERSPECTIVE\r\n\r\n            let runAndAnimation = () => {\r\n                switch (animationsAdded.current) {\r\n                    case true:\r\n                        let armorMan = obj.current.scene;\r\n                        // console.log(armorMan.scene.position); // x:0, y:0, z:4; CALCULATE POSITION IN\r\n                        // SPHERE/GOTTA ADJUST THE RADIUS OF THE CIRCLE AS HE MOVES LEFT OR RIGHT SPHERE\r\n                        // ARMOR MAN WHEN z GETS TO 7 IT BREAKS THE SQRT FUNCTION\r\n                        circleAngle.current = circleAngle.current + 0.0001;\r\n                        charAngle.current = charAngle.current - 0.0001;\r\n                        cameraAngle.current = cameraAngle.current + 0.0001;\r\n                        if (circleAngle.current > 6.999) {\r\n                            circleAngle.current = 0.0001;\r\n                            charAngle.current = -0.0001;\r\n                        }\r\n\r\n                        //Y ROTATION FROM CHARACTER CHAR SIZE Y = 0.5805655952 = R = 0.2902827976\r\n                        let xChar = charAngle.current * (180 / Math.PI); //The character rotation ON X AXIS (FORWARDS)\r\n\r\n                        let zRotationNewRadius = Math.sqrt(49 - (knightMovementXAxis.current * knightMovementXAxis.current)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n\r\n                        knightRotationZ.current = Math.asin(knightMovementXAxis.current / 7); //ROTATION ON THE KNIGHT Z AXIS WHILE MOVING LEFT OR RIGHT () ROTATION TO THE SIDES\r\n\r\n                        let y = Math.cos(circleAngle.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                        let z = Math.sin(circleAngle.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                        //KNIGHT MOVEMENTS\r\n                        knightRotationX.current = xChar;\r\n                        armorMan.position.y = y;\r\n                        armorMan.rotation.x = xChar;\r\n                        armorMan.rotation.z = knightRotationZ.current;\r\n                        armorMan.position.z = -z;\r\n                        //CAMERA MOVEMENTS\r\n                        let cameraY = Math.cos(cameraAngle.current * (180 / Math.PI)) * 8;\r\n                        let cameraZ = Math.sin(cameraAngle.current * (180 / Math.PI)) * 8;\r\n                        camera\r\n                            .position\r\n                            .set(0, cameraY, -cameraZ);\r\n                        camera.lookAt(armorMan.position);\r\n                        camera\r\n                            .rotation\r\n                            .set(xChar - 0.1, 0, 0);\r\n\r\n                        //CHARACTER MOVEMENTS KEY EVENTS\r\n                        switch (JSON.stringify(trackedKeys.current)) {\r\n                            case `{\"arrowLeft\":true,\"arrowRight\":false}`: //MOVE LEFT\r\n                                centerChar.current = false;\r\n                                console.log(\"MOVING LEFT\");\r\n                                knightMovementXAxis.current = armorMan.position.x - 0.01;\r\n                                armorMan.position.x = knightMovementXAxis.current;\r\n                                //ROTATION\r\n                                if (isRotating.current.isRotatingLeft === \"start\") {\r\n                                    let tweenRotateLeft = new TWEEN\r\n                                        .Tween(obj.current.scene.rotation)\r\n                                        .to({\r\n                                            y: -2.5, // FROM -3 TO -2.5\r\n                                        }, 50)\r\n                                        .onComplete(() => {\r\n                                            TWEEN.remove(tweenRotateLeft);\r\n                                            isRotating\r\n                                                .current\r\n                                                .rotateRight();\r\n                                            centerChar.current = true;\r\n                                        })\r\n                                        .start()\r\n                                    let animateTweenRotateLeft = (time) => {\r\n                                        if (trackedKeys.current.arrowLeft === false) {\r\n                                            TWEEN.remove(tweenRotateLeft);\r\n                                            centerChar.current = true;\r\n                                        } else {\r\n                                            TWEEN.update(time)\r\n                                            requestAnimationFrame(animateTweenRotateLeft)\r\n                                        }\r\n                                    }\r\n                                    requestAnimationFrame(animateTweenRotateLeft);\r\n                                }\r\n                                break;\r\n                            case `{\"arrowLeft\":false,\"arrowRight\":true}`: // MOVE RIGHT\r\n                                console.log(\"MOVING RIGHT\");\r\n                                centerChar.current = false;\r\n                                knightMovementXAxis.current = armorMan.position.x + 0.01;\r\n                                armorMan.position.x = knightMovementXAxis.current;\r\n                                //ROTATION\r\n                                if (isRotating.current.isRotatingRight === \"start\") {\r\n                                    let tweenRotateRight = new TWEEN\r\n                                        .Tween(obj.current.scene.rotation)\r\n                                        .to({\r\n                                            y: -3.5, // FROM -3 TO -3.5\r\n                                        }, 50)\r\n                                        .onComplete(() => {\r\n                                            TWEEN.remove(tweenRotateRight);\r\n                                            isRotating\r\n                                                .current\r\n                                                .rotateLeft();\r\n                                            centerChar.current = true;\r\n                                        })\r\n                                        .start()\r\n                                    let animateTweenRotateRight = (time) => {\r\n                                        if (trackedKeys.current.arrowRight === false) {\r\n                                            TWEEN.remove(tweenRotateRight);\r\n                                            centerChar.current = true;\r\n                                        } else {\r\n                                            TWEEN.update(time)\r\n                                            requestAnimationFrame(animateTweenRotateRight)\r\n                                        }\r\n                                    }\r\n                                    requestAnimationFrame(animateTweenRotateRight);\r\n                                }\r\n                                break;\r\n                            default:\r\n                        }\r\n                        break;\r\n                    default:\r\n                }\r\n            }\r\n            setInterval(() => runAndAnimation(), 5); // USING INTERVAL SINCE TWEENING WOULD MAKE PERFORMANCE DROP, WILL MOVE CHARACTER SLIGHTLY EACH 50ms\r\n            // ANIMATION TO THE OTHER SIDE OF THE CIRCLE SETTING THE ARROW EVENTS ARROW\r\n            // RIGHT MOVE RIGHT STORING THE KEY VALUES IN TRACKEDKEYS DUE TO DELAY KEYDOWN\r\n            // EVENT AND LOOPING THROUGH CHARROTATEANDMOVE TO CHECK WHERE TO MOVE THE\r\n            // CHARACTER BASED ON TRUE OR FALSE SEE\r\n            // https://yojimbo87.github.io/2012/08/23/repeated-and-multiple-key-press-events\r\n            // - without-stuttering-in-javascript.html for full understanding of delay.\r\n            // Repeated or multiple key press events in JavaScript can cause a little pause\r\n            // or delay which leads to stuttering behavior, for example, in games which are\r\n            // using keyboard based navigation. This delay is probably caused by internal\r\n            // browser timeout between key press changes. TRACKING KEYS\r\n\r\n            trackedKeys.current = {\r\n                arrowLeft: false, // left arrow\r\n                arrowRight: false, // right arrow\r\n                rightMove: function () { // ()=>{} THIS DOESNT WORK INSIDE OBJECTS :/\r\n                    this.arrowLeft = false;\r\n                    this.arrowRight = true;\r\n                },\r\n                leftMove: function () {\r\n                    this.arrowLeft = true;\r\n                    this.arrowRight = false;\r\n                }\r\n            }\r\n            //IS ROTATING TRACKER\r\n            isRotating.current = {\r\n                isRotatingRight: \"stop\",\r\n                isRotatingLeft: \"stop\",\r\n                rotateRight: function () {\r\n                    this.isRotatingRight = \"start\";\r\n                    this.isRotatingLeft = \"stop\";\r\n                },\r\n                rotateLeft: function () {\r\n                    this.isRotatingRight = \"stop\";\r\n                    this.isRotatingLeft = \"start\";\r\n                }\r\n            }\r\n\r\n            window.addEventListener('keydown', (e) => {\r\n                if (e.key === \"ArrowRight\" && trackedKeys.current[\"arrowRight\"] === false) {\r\n                    trackedKeys\r\n                        .current\r\n                        .rightMove();\r\n                    isRotating\r\n                        .current\r\n                        .rotateRight();\r\n                } else if (e.key === \"ArrowLeft\" && trackedKeys.current[\"arrowLeft\"] === false) {\r\n                    trackedKeys\r\n                        .current\r\n                        .leftMove();\r\n                    isRotating\r\n                        .current\r\n                        .rotateLeft();\r\n                } else if (e.key === \" \" && jumpChar.current === false) {\r\n                    console.log(\"spacebar pressed\")\r\n                    jumpChar.current = true;\r\n                }\r\n\r\n            })\r\n            window.addEventListener('keyup', (e) => {\r\n                if (e.key === \"ArrowRight\") {\r\n                    trackedKeys.current.arrowRight = false;\r\n                } else if (e.key === \"ArrowLeft\") {\r\n                    trackedKeys.current.arrowLeft = false;\r\n                }\r\n            })\r\n\r\n            /*MOVING\r\n            let charRotateAndMove = () => {\r\n\r\n            }\r\n            setInterval(() => charRotateAndMove(), 5);*/\r\n\r\n            //ROTATIOn CENTER CHARACTER\r\n            let centerCharFunction = () => {\r\n                if (centerChar.current === true) {\r\n                    let tweenRotateCenter = new TWEEN\r\n                        .Tween(obj.current.scene.rotation)\r\n                        .to({\r\n                            y: -3, // FROM -3 TO -3\r\n                        }, 50)\r\n                        .onComplete(() => {\r\n                            TWEEN.remove(tweenRotateCenter)\r\n                            centerChar.current = false;\r\n                        })\r\n                        .start()\r\n                    let animateTweenRotateCenter = (time) => {\r\n                        TWEEN.update(time)\r\n                        requestAnimationFrame(animateTweenRotateCenter)\r\n                    }\r\n                    requestAnimationFrame(animateTweenRotateCenter);\r\n                }\r\n            }\r\n            setInterval(() => centerCharFunction(), 50);\r\n\r\n            //JUMP ANIMATION\r\n            let jump = () => {\r\n                if (jumpChar.current === true && mixer.current._actions[2] !== undefined) {\r\n                    let action = mixer.current._actions[2] // JUMP ANIMATION\r\n                    action.play();\r\n                }\r\n            }\r\n            setInterval(() => jump(), 20);\r\n\r\n            //TRYING A SPHERE\r\n            let floorTexture = new THREE\r\n                .TextureLoader()\r\n                .load('frozengrass.jpg', () => {\r\n                    floorTexture.wrapS = THREE.RepeatWrapping;\r\n                    floorTexture.wrapT = THREE.RepeatWrapping;\r\n                    floorTexture\r\n                        .repeat\r\n                        .set(50, 50);\r\n                });\r\n            let floorBump = new THREE\r\n                .TextureLoader()\r\n                .load('sunbump.png', () => {\r\n                    floorTexture.wrapS = THREE.RepeatWrapping;\r\n                    floorTexture.wrapT = THREE.RepeatWrapping;\r\n                    floorTexture\r\n                        .repeat\r\n                        .set(50, 50);\r\n                });\r\n            let geometrySphere = new THREE.SphereGeometry(7, 50, 50);\r\n            let materialSphere = new THREE.MeshPhongMaterial({map: floorTexture, alphaTest: 0.1, bumpMap: floorBump, bumpScale: 0.01});\r\n            let sphere = new THREE.Mesh(geometrySphere, materialSphere);\r\n            sphere.position.x = 0;\r\n            sphere.position.y = 0;\r\n            sphere.position.z = 0;\r\n            scene.add(sphere);\r\n\r\n            const animate = () => {\r\n\r\n                let delta = clock.getDelta();\r\n                if (switcher.current === 1) {\r\n                    mixer\r\n                        .current\r\n                        .update(delta)\r\n                    renderer.render(scene, camera)\r\n                }\r\n                renderer.render(scene, camera)\r\n                window.requestAnimationFrame(animate);\r\n            }\r\n            animate()\r\n            setScene(\"Scene set\")\r\n        }\r\n    }, [scene])\r\n    return (\r\n        <div>\r\n            <div style={style.canvas} ref={canvas}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx",["62","63","64"],"import axios from 'axios';\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport { Redirect } from 'react-router';\r\n\r\n\r\n\r\nlet style = {\r\n    backgroundLogin: {\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        minHeight: '100vh',\r\n        maxHeight: '100vh',\r\n        backgroundColor: 'red',\r\n        display: 'grid',\r\n        color: 'black',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    insideLogin: {\r\n        minHeight: \"500px\",\r\n        maxHeight: \"500px\",\r\n        minWidth: \"500px\",\r\n        maxWidth: \"500px\",\r\n        backgroundColor: \"white\",\r\n        display: \"grid\"\r\n    }\r\n}\r\n\r\n\r\nconst Account = ()=>{\r\n    const input = useRef(null);\r\n    const [userInfo, setUserInfo] = useState(\"\")\r\n    useEffect(()=>{\r\n        axios.post('http://localhost:8080/account', \r\n        {},\r\n        {headers: {\r\n            // Overwrite Axios's automatically set Content-Type\r\n            'Content-Type': 'application/json'\r\n            `Bearer ${localStorage.getItem('user')}`\r\n          }\r\n        }\r\n        )\r\n        .then((res)=>{\r\n            console.log(res.data)\r\n        })\r\n        .catch(error => {\r\n            console.log(error.response)\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <div style={style.backgroundLogin}>\r\n            <div style={style.insideLogin}>\r\n                <div style={{display: \"grid\", justifyContent: \"center\", alignItems: \"center\"}}>Welcome back!</div>\r\n                <input ref={input}></input>\r\n                <div>Welcome back!</div>\r\n                <div>Welcome back!</div>\r\n                <div>Welcome back!</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Account",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":8,"column":20,"nodeType":"71","messageId":"72","endLine":8,"endColumn":26},{"ruleId":"69","severity":1,"message":"73","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":20},{"ruleId":"69","severity":1,"message":"74","line":8,"column":9,"nodeType":"71","messageId":"72","endLine":8,"endColumn":13},{"ruleId":"69","severity":1,"message":"75","line":74,"column":12,"nodeType":"71","messageId":"72","endLine":74,"endColumn":17},{"ruleId":"69","severity":1,"message":"76","line":75,"column":9,"nodeType":"71","messageId":"72","endLine":75,"endColumn":17},{"ruleId":"69","severity":1,"message":"77","line":199,"column":21,"nodeType":"71","messageId":"72","endLine":199,"endColumn":26},{"ruleId":"69","severity":1,"message":"77","line":207,"column":29,"nodeType":"71","messageId":"72","endLine":207,"endColumn":34},{"ruleId":"69","severity":1,"message":"77","line":240,"column":21,"nodeType":"71","messageId":"72","endLine":240,"endColumn":26},{"ruleId":"69","severity":1,"message":"77","line":248,"column":29,"nodeType":"71","messageId":"72","endLine":248,"endColumn":34},{"ruleId":"69","severity":1,"message":"77","line":282,"column":21,"nodeType":"71","messageId":"72","endLine":282,"endColumn":26},{"ruleId":"69","severity":1,"message":"77","line":290,"column":29,"nodeType":"71","messageId":"72","endLine":290,"endColumn":34},{"ruleId":"69","severity":1,"message":"78","line":3,"column":9,"nodeType":"71","messageId":"72","endLine":3,"endColumn":17},{"ruleId":"69","severity":1,"message":"79","line":83,"column":18,"nodeType":"71","messageId":"72","endLine":83,"endColumn":22},{"ruleId":"69","severity":1,"message":"80","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":19},{"ruleId":"69","severity":1,"message":"81","line":11,"column":7,"nodeType":"71","messageId":"72","endLine":11,"endColumn":20},{"ruleId":"69","severity":1,"message":"82","line":137,"column":19,"nodeType":"71","messageId":"72","endLine":137,"endColumn":29},{"ruleId":"69","severity":1,"message":"78","line":3,"column":10,"nodeType":"71","messageId":"72","endLine":3,"endColumn":18},{"ruleId":"69","severity":1,"message":"83","line":32,"column":12,"nodeType":"71","messageId":"72","endLine":32,"endColumn":20},{"ruleId":"69","severity":1,"message":"84","line":32,"column":22,"nodeType":"71","messageId":"72","endLine":32,"endColumn":33},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'text' is defined but never used.","'scene' is assigned a value but never used.","'setScene' is assigned a value but never used.","'tween' is assigned a value but never used.","'Redirect' is defined but never used.","'user' is assigned a value but never used.","'OBJLoader' is defined but never used.","'OrbitControls' is assigned a value but never used.","'bushLoader' is assigned a value but never used.","'userInfo' is assigned a value but never used.","'setUserInfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]