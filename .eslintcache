[{"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js":"1","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js":"2","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js":"3","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx":"4","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx":"5","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx":"6","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx":"7","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx":"8","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx":"9","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\leaderboard.jsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":1372,"mtime":1612225415823,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":14027,"mtime":1612456914149,"results":"15","hashOfConfig":"12"},{"size":32951,"mtime":1618273471482,"results":"16","hashOfConfig":"12"},{"size":30476,"mtime":1618272583239,"results":"17","hashOfConfig":"12"},{"size":91,"mtime":1607656069637,"results":"18","hashOfConfig":"12"},{"size":38089,"mtime":1618584343795,"results":"19","hashOfConfig":"12"},{"size":13743,"mtime":1618272822795,"results":"20","hashOfConfig":"12"},{"size":15167,"mtime":1618272780874,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1na3gvm",{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js",[],["45","46"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js",["47","48","49","50"],"import './App.css';\nimport HomeScreen from './components/homeScreen';\nimport Navbar from './components/navbar';\nimport Login from './components/login';\nimport Game from './components/game';\nimport Leaderboard from './components/leaderboard';\nimport axios from 'axios'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  BrowserRouter\n} from \"react-router-dom\";\nimport { PageContext } from './pageContext'\nimport { useEffect, useState } from 'react';\nimport Account from './components/account';\n\n\n\nfunction App() {\n\nconst [value, setValue] = useState({accountInfo: 0, logged: false, username: \"\"});\n\n  return (\n    <BrowserRouter>\n    <Switch>\n    <PageContext.Provider value={value}>  \n    <Route exact path=\"/\" render = {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <HomeScreen/>\n      </div>\n    } />\n    <Route exact path=\"/login\" render= { props =>\n    <div> \n    <Login/>\n    </div>\n    } />\n     <Route exact path=\"/game\" render= {props =>\n     <div className=\"App\">\n     <Navbar/>\n     <Game/>\n     </div>\n    } />\n    <Route exact path=\"/account\" render= {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <Account/>\n      </div>\n    } />\n    <Route exact path=\"/leaderboard\" render= { props =>\n    <div> \n    <Leaderboard/>\n    </div>\n    } />\n    </PageContext.Provider>\n    </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx",["51","52"],"import {useRef, useState, useEffect} from 'react'\r\nimport '../App.css';\r\nimport * as THREE from \"three\";\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Lensflare, LensflareElement} from 'three/examples/jsm/objects/Lensflare.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faGithub, faLinkedin} from '@fortawesome/free-brands-svg-icons'\r\nimport { faWindowClose, faQuestionCircle, faMapMarked } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\n\r\nlet style = {\r\n    container: {\r\n        backgroundColor: 'transparent',\r\n        position: 'relative',\r\n        top: \"6.5rem\",\r\n        minHeight: '100%',\r\n        maxHeight: '100%',\r\n        minWidth: '100%',\r\n        maxWidth: '100%'\r\n    },\r\n    title: {\r\n        display: 'flex',\r\n        color: 'brown',\r\n        cursor: \"default\",\r\n        fontSize: '6rem',\r\n        justifyContent: 'center'\r\n    },\r\n    canvas: {\r\n        display: 'grid',\r\n        position: 'fixed',\r\n        minHeight: '100vh',\r\n        minWidth: '1920px',\r\n        zIndex: \"2\",\r\n        maxWidth: '1920px',\r\n    },\r\n    explanationBox: {\r\n        display: \"grid\",\r\n        backgroundColor: \"black\",\r\n        width: \"70%\",\r\n        opacity: \"0.8\",\r\n        zIndex: \"2\",\r\n        minHeight: \"100vh\",\r\n        left: \"15%\",\r\n        position: \"relative\",\r\n        boxShadow: \"0 10px 20px gray, 0 6px 6px gray\",\r\n        transition: \"all 0.5s ease-out\"\r\n    },\r\n    footer: {\r\n        backgroundColor: \"rgb(32, 30, 29)\",\r\n        color: 'white',\r\n        zIndex: \"2\",\r\n        display: 'flex',\r\n        fontSize: \"80%\",\r\n        justifyContent: \"center\",\r\n        height: '10rem',\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n    },\r\n    playButton: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        background: \"black\",\r\n        fontWeight: \"bold\",\r\n        width: \"20%\",\r\n        height: \"4rem\",\r\n        zIndex: \"2\",\r\n        marginBottom: \"5%\",\r\n        marginTop: \"5%\",\r\n        left:\"40%\",\r\n        boxShadow: \"0px 7px 11px 0px rgba(50, 50, 50, 0.75)\",\r\n        position: \"relative\",\r\n        display: \"flex\",\r\n    },\r\n    loading_bar : {\r\n        width: \"300px\",\r\n        marginTop: \"2%\",\r\n        zIndex: \"2\",\r\n        height: \"30px\",\r\n        background: \"black\",\r\n        boxShadow: \"5px 5px 15px 5px black\"\r\n    },\r\n    progress_bar: {\r\n        display: \"grid\",\r\n        transition: \"all 0.5s ease-out\",\r\n        width: \"0%\",\r\n        height: \"30px\",\r\n        background: \"darkblue\"\r\n    }\r\n}\r\n\r\nconst HomeScreen = () => {\r\n    const canvas = useRef(0);\r\n    let switcher = useRef(0);\r\n    let camera = useRef(0);\r\n    let mixer = useRef(0);\r\n    let angleSphereForgrass = useRef(0);\r\n    let grassRotationAngle = useRef(0);\r\n    const [componentLoaded,\r\n        setComponentLoaded] = useState(false);\r\n    let loadingScreenMessages = useRef(0);\r\n    let percentage = useRef(0);\r\n    let fadeScreen = useRef(0);\r\n    const [showExplainBox, setShowExplainBox] = useState(true);\r\n    let explainBox = useRef(0);\r\n    let youtubeVideo = useRef(0);\r\n    let bar1 = useRef(0);\r\n    let bar2 = useRef(0);\r\n    let bar3 = useRef(0);\r\n    let audio1 = useRef(0);\r\n    let musicExplain = useRef(0);\r\n    const [smartphoneView, setSmartphoneView] = useState(false);\r\n    let progress_bar = useRef(0);\r\n    useEffect(() => {\r\n        if(componentLoaded === false){\r\n        let height = canvas.current.clientHeight;\r\n        let width =  document.documentElement.clientWidth;\r\n        let manager = new THREE.LoadingManager();// WHEN MODELS ARE LOADED .onLoad will be called\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        camera.current = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .current.position\r\n            .set(9, -0.5, -7);\r\n        camera\r\n        .current.rotation.y = 2.3;\r\n        camera\r\n        .current.rotation.x = -0.1;\r\n\r\n\r\n\r\n        //\r\n\r\n        const textureFlare = new THREE.TextureLoader(manager);\r\n        const textureFlare0 = textureFlare.load( 'lensflare0.png' );\r\n        const textureFlare3 = textureFlare.load( 'lensflare3.png' );\r\n        addLight( 0.55, 1.5, 0.5, 5000, 0, 1000 );\r\n        addLight( 0.08, 1.4, 0.5, -1000, 100, 1005 );\r\n        addLight( 0.995, 1.2, 0.9, 5000, 5000, 1000 );\r\n\r\n        function addLight( h, s, l, x, y, z ) {\r\n\r\n            const light = new THREE.PointLight( 0xffffff, 1.5, 7500 );\r\n            light.color.setHSL( h, s, l );\r\n            light.position.set( x, y, z );\r\n            scene.add( light );\r\n\r\n            const lensflare = new Lensflare();\r\n            lensflare.addElement( new LensflareElement( textureFlare0, 700, 0, light.color ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n            light.add( lensflare );\r\n        }\r\n\r\n        let clock = new THREE.Clock();\r\n        window.addEventListener('resize', () => {\r\n            if (canvas.current !== null) {\r\n                width = document.documentElement.clientWidth\r\n                height = document.documentElement.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.current.aspect = width / height;\r\n                camera.current.updateProjectionMatrix();\r\n            }\r\n        });\r\n\r\n        //// PARTICLES\r\n        let particleCount = 750;\r\n        let particleDistance = 53;\r\n        let particles = new THREE.BufferGeometry();\r\n        let texture = new THREE\r\n            .TextureLoader()\r\n            .load('leaftexture.png');\r\n        let pMaterial = new THREE.PointsMaterial({\r\n            color: 'green', size: 0.3, map: texture, alphaTest: 0.1, // removes black squares,\r\n            blending: THREE.CustomBlending,\r\n            transparent: true\r\n        });\r\n\r\n        let positions = [];\r\n\r\n        for (let i = 0; i < 750; i++) {\r\n            let posX = (Math.random() - 0.5) * particleDistance;\r\n            let posY = (Math.random() - 0.5) * particleDistance;;\r\n            let posZ = (Math.random() - 0.5) * particleDistance;;\r\n            positions.push(posX, posY, posZ);\r\n        }\r\n        particles.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        // create the particle system\r\n        let particleSys = new THREE.Points(particles, pMaterial);\r\n        particleSys.name = 'particleSys';\r\n        let star = particleSys.geometry.attributes.position.array;\r\n        renderer.setAnimationLoop(() => {\r\n            for(let i = 1; i < particleCount * 3; i+=3){\r\n                star[i] -= 0.01;\r\n                if(star[i] < -10){\r\n                    star[i] = 20;\r\n                }\r\n                particleSys.geometry.attributes.position.needsUpdate = true;\r\n            }\r\n            renderer.render(scene, camera.current)\r\n        })\r\n        scene.add(particleSys)\r\n        // CHARACTER ADDON FOR MAIN MENU\r\n        const loader = new GLTFLoader(manager)\r\n        let action;\r\n        loader.load(\"knight.gltf\", function (object) {\r\n            object.scene.position.x = 0;\r\n            object.scene.position.y = -2;\r\n            object.scene.position.z = -2;\r\n            mixer.current = new THREE.AnimationMixer(object.scene);\r\n            action = mixer.current.clipAction(object.animations[15]);\r\n            action.play();\r\n            scene.add(object.scene);\r\n            switcher.current = 1;\r\n        },);\r\n        // setTimeout(()=>mixer.clipAction(obj.animations[1]).play(), 8000)// WORKS\r\n        // TRYING A SPHERE\r\n        let floorTexture = new THREE\r\n            .TextureLoader()\r\n            .load('homescreenGrass.jpg', (manager) => {\r\n                floorTexture.wrapS = THREE.RepeatWrapping;\r\n                floorTexture.wrapT = THREE.RepeatWrapping;\r\n                floorTexture\r\n                    .repeat\r\n                    .set(2, 2);\r\n            });\r\n        /*let floorBump = new THREE\r\n            .TextureLoader(manager)\r\n            .load('sunbump.png', () => {\r\n                floorTexture.wrapS = THREE.RepeatWrapping;\r\n                floorTexture.wrapT = THREE.RepeatWrapping;\r\n                floorTexture\r\n                    .repeat\r\n                    .set(2, 2);\r\n            });*/\r\n        let geometrySphere = new THREE.SphereGeometry(7, 25, 25);\r\n        let materialSphere = new THREE.MeshLambertMaterial({map: floorTexture, alphaTest: 0.1});\r\n        let sphere = new THREE.Mesh(geometrySphere, materialSphere);\r\n        sphere.rotation.x = 1;\r\n        sphere.position.set(0, -9, -2);\r\n        scene.add(sphere);\r\n        const textu = new THREE\r\n            .TextureLoader(manager)\r\n            .load(\"/textures/skyBackgroundCropped.jpeg\");\r\n        textu.minFilter = THREE.LinearFilter;\r\n        scene.background = textu;\r\n        //TREE\r\n        const treeLoader = new GLTFLoader(manager);\r\n        treeLoader.load('mytree2.glb', (tree) => {\r\n            tree.scene.position.set(0, -2.1, -3.2);\r\n            tree.scene.rotation.x = -0.2;\r\n            tree.scene.rotation.y = -0.4;\r\n            tree.scene\r\n            .scale.set(0.5, 0.5, 0.5);\r\n            scene.add(tree.scene);\r\n        })\r\n\r\n        //GRASS\r\n        //USED BLENDER TO CREATE LITTLE BLOCKS OF GRASS AND WIND ANIMATION\r\n        /*const grassLoader = new GLTFLoader(manager);\r\n        let zRotationNewRadius;\r\n        let treeRotationZ;\r\n        let grassRotationX;\r\n        let z;\r\n        let grassPositionY;\r\n        for(let i = 0; i < 4; i++){\r\n        // eslint-disable-next-line no-loop-func\r\n        grassLoader.load('grassColor.glb', (grass) => {\r\n            grass.scene.position.x = Math.floor(Math.random() * 3) -0.5 ;\r\n            grass.scene.scale.set(0.14, 0.14, 0.14)\r\n            zRotationNewRadius = Math.sqrt(49 - (grass.scene.position.x * grass.scene.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n            treeRotationZ = Math.asin(grass.scene.position.x / 7); //SPHERE RADIUS = 7\r\n            z = Math.sin(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n            grass.scene.rotation.z = -treeRotationZ;\r\n            grass.scene.position.z = -z - 2;\r\n\r\n            grassRotationX = grassRotationAngle.current * (180 / Math.PI); //The grass rotation ON X AXIS (FORWARDS)\r\n            grass.scene.rotation.x = grassRotationX;\r\n\r\n            grassPositionY = Math.cos(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n            grass.scene.position.y = grassPositionY - 9;\r\n            scene.add(grass.scene);\r\n            angleSphereForgrass.current+=0.001;\r\n            grassRotationAngle.current-=0.001;\r\n        })\r\n        }*/\r\n\r\n        //media queries\r\n        let phoneViewCheck = (e)=>{\r\n            if(e.matches === true){\r\n                setSmartphoneView(true);\r\n                explainBox.current.style.width = \"100%\";\r\n                explainBox.current.style.left = \"0%\";\r\n            }\r\n            else{\r\n                explainBox.current.style.width = \"70%\";\r\n                explainBox.current.style.left = \"15%\";\r\n                setSmartphoneView(false);\r\n            }\r\n        }\r\n        phoneViewCheck(window.matchMedia(\"(max-width: 700px)\"));\r\n        window.matchMedia(\"(max-width: 700px)\").addEventListener('change', phoneViewCheck);\r\n\r\n\r\n        renderer.setSize(width, height)\r\n        canvas\r\n            .current\r\n            .appendChild(renderer.domElement)\r\n        let delta;\r\n        const animate = () => {\r\n            delta = clock.getDelta();\r\n            if (switcher.current === 1) {\r\n                mixer\r\n                    .current\r\n                    .update(delta)\r\n            }\r\n            renderer.render(scene, camera.current)\r\n            requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        //CHECK IF MODELS ARE LOADED\r\n        percentage.current.innerText = \"0 %\";\r\n        manager.onProgress = ()=>{\r\n                if(parseInt(percentage.current.innerText.slice(0, -2)) < 100){\r\n                loadingScreenMessages.current.innerText = \"Loading your experience...\";\r\n                percentage.current.innerText = parseInt(percentage.current.innerText.slice(0, -2)) + 1 + \" %\";\r\n                progress_bar.current.style.width = (percentage.current.innerText).replace(' ', '');\r\n                }\r\n                else{\r\n                    percentage.current.innerText = \"100%\";\r\n                    progress_bar.current.style.width = percentage.current.innerText;\r\n                }\r\n        }\r\n        manager.onLoad = ()=>{\r\n            percentage.current.innerText = \"100%\";\r\n            progress_bar.current.style.width = percentage.current.innerText;\r\n            fadeScreen.current.style.animation = \"loadingDone 1s normal forwards ease-out\";\r\n            fadeScreen.current.onanimationend = ()=>setComponentLoaded(true);\r\n        }\r\n    }\r\n})\r\n     //TRACK MOUSE MOVEMENT AND ROTATE camera\r\n            let mouseMove = (e)=>{\r\n                let mousex = (e.clientX   - ( canvas.current.getBoundingClientRect().left / 2)) ;\r\n                let mousey = (e.clientY  - ( canvas.current.getBoundingClientRect().top / 2)) ;\r\n                let x = mousex - canvas.current.getBoundingClientRect().width / 2 ;\r\n                let y = canvas.current.getBoundingClientRect().height / 2 - mousey ;\r\n                camera.current.rotation.y = (x / 1000) * (Math.PI / 180) + 2.3;\r\n                camera.current.rotation.x = -(y / 1000) * (Math.PI / 180) - 0.1;\r\n            }\r\n\r\n            let addMusicAnimation = ()=>{\r\n                if(bar1.current.style.animation === \"\"){\r\n                bar1.current.style.animation = \"increaseHeightBar1 1.5s linear infinite\"\r\n                bar2.current.style.animation = \"increaseHeightBar1 1s linear infinite\"\r\n                bar3.current.style.animation = \"increaseHeightBar1 0.75s linear infinite\"\r\n                }\r\n                else{\r\n                bar1.current.style.animation = \"\"\r\n                bar2.current.style.animation = \"\"\r\n                bar3.current.style.animation = \"\"                   \r\n                }\r\n            }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={canvas} style={style.canvas} onMouseMove={(e)=>mouseMove(e)}></div>\r\n            <div style={style.container} onMouseMove={(e)=>mouseMove(e)}>\r\n                <div style={style.title}>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>X</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(125, 140, 40)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>E</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(70, 75, 68)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>N</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>T</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>A</span>\r\n                </div>\r\n                <div className= \"helpToExplainBox\" style={{display:\"grid\", position: \"fixed\", height: \"5%\", width:\"5%\", left: \"95%\", top:\"95%\", zIndex: \"4\"}}>\r\n                    <FontAwesomeIcon className= \"help\" icon={faQuestionCircle} style={{cursor: \"pointer\", width:\"100%\",fontSize: \"200%\", transition: \"all 0.5s ease-out\", color: \"white\"}} \r\n                    onClick={()=>{\r\n                    if(showExplainBox === false && smartphoneView === false){\r\n                        setShowExplainBox(true);\r\n                        explainBox.current.style.animation = \"popExplainBox 1s normal forwards ease-out\"; \r\n                        explainBox.current.onanimationend = ()=>{\r\n                            explainBox.current.style.animation = \"none\";\r\n                        };\r\n                    }\r\n                    else if(showExplainBox === false && smartphoneView === true){\r\n                            setShowExplainBox(true);\r\n                            explainBox.current.style.animation = \"popExplainBox 1s normal forwards ease-out\"; \r\n                            explainBox.current.onanimationend = ()=>{\r\n                                explainBox.current.style.animation = \"none\";\r\n                                explainBox.current.style.width = \"100%\"; \r\n                                explainBox.current.style.left = \"0%\"; \r\n                        };                    \r\n                    }\r\n                    }}/>\r\n                </div>\r\n                <div className= \"musicPlayer\" style={{display:\"flex\", position: \"fixed\", height: \"50px\", width:\"4%\", left: \"95%\", top:\"75%\", zIndex: \"4\", background: \"transparent\", borderRadius: \"50%\", transform: \"rotate3d(0, 0, 1, 180deg)\"}} onClick={()=>{\r\n                    let audio = audio1.current;\r\n                    addMusicAnimation();\r\n                    if (audio.duration > 0 && !audio.paused) {\r\n                        audio.pause();\r\n                        //Its playing...do your job\r\n                    } else {\r\n                        audio.play();\r\n                        //Not playing...maybe paused, stopped or never played.   \r\n                    }\r\n                }}\r\n                onMouseEnter={()=>{\r\n                    musicExplain.current.style.display = \"flex\";\r\n                    }}\r\n                onMouseLeave = {()=>{\r\n                    musicExplain.current.style.display = \"none\";\r\n                }}\r\n                >\r\n                    <div ref={bar1} style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar2}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar3}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div> \r\n                </div>\r\n                <div ref={musicExplain} style={{display:\"none\", textAlign: \"center\", position: \"fixed\", justifyContent: \"center\", alignItems: \"center\", height: \"25px\", width:\"75px\", left: \"89%\", top:\"75%\"\r\n                , zIndex: \"4\", background: \"black\", opacity: \"0.7\", fontSize: \"50%\", color: \"white\", transition: \"all 0.5s ease-out\"}}>Play some FFIX music!</div>\r\n                <audio src=\"finalFantasy.mp3\" ref={audio1} loop></audio>\r\n                <div ref={explainBox} style={showExplainBox ? style.explanationBox : {visibility: \"hidden\"}}>\r\n                    <div>\r\n                        <div style={{display: \"grid\", justifyContent: \"right\", alignContent: \"center\"}}>\r\n                        <FontAwesomeIcon className=\"windowClose\" icon={faWindowClose} style={{cursor: \"pointer\", fontSize: \"250%\", color: \"white\", transition: \"all 0.5s ease-out\", minWidth: \"100%\", maxWidth: \"100%\", textShadow: \"0px 7px 10px rgba(150, 150, 150, 1)\"}}\r\n                        onClick={()=>{\r\n                            explainBox.current.style.animation = \"fadeExplainBox 1s normal forwards ease-out\";\r\n                            explainBox.current.onanimationend = ()=>{\r\n                                explainBox.current.style.animation = \"none\";\r\n                                setShowExplainBox(false)\r\n                            };\r\n                            }}/>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                            textAlign: \"left\",\r\n                            margin: \"5%\",\r\n                            color: \"white\"\r\n                        }}>\r\n                            This project was made using three.js, along with blender, and react. You can use\r\n                            the models i made by going to the repository down here:\r\n                            <br></br>\r\n                            <div style={{display: \"grid\", height: \"50px\"}}>\r\n                                <a\r\n                                    href=\"https://github.com/Rogerpeke97/FrontendAPI\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    target=\"_blank\"\r\n                                    style={{\r\n                                    justifyContent: \"center\",\r\n                                    display: \"grid\",\r\n                                    textDecoration: \"none\",\r\n                                    alignContent: \"center\",\r\n                                    color: \"white\",\r\n                                    cursor: \"default\",\r\n                                }}>\r\n                                <FontAwesomeIcon className= \"github\" icon={faGithub} style={{cursor: \"pointer\", fontSize: \"200%\", transition: \"all 0.5s ease-out\"}} />\r\n                                </a>\r\n                            </div> <br></br>\r\n                            <div style={{maxHeight: \"100%\", maxWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\", justifyContent: \"center\"}}>\r\n                                <img src=\"/explanationImages/tree.jpg\" alt=\"blendertree\" style={{maxHeight: \"100%\", maxWidth: \"100%\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}}></img>\r\n                                <div style={{textAlign: \"left\", marginTop: \"1%\", color: \"darkgray\", fontWeight: \"100\"}}>\r\n                                    Tree model exported from blender where hair particles were turned into tree branch meshes.\r\n                                </div>\r\n                            </div>\r\n                            The knight model was downloaded from cg trader, which i will replace soon by a\r\n                            model i am working on.<br></br> If you want to export your files from blender to\r\n                            three.js, you have to be aware that particles systems cannot be exported from\r\n                            blender, therefore you should convert them to mesh and then export the file.<br></br> I'm\r\n                            saying this in case you want to work on top of the models that i left on my\r\n                            repo. <br></br> The game is pretty basic, i had to implement a bit of math for the\r\n                            character's movement around the radius of the sphere and how, depending at which\r\n                            value along the X axis the character is, the Y position of the character varies.\r\n                            The way the collision system works, if you could call it that, is, it checks the\r\n                            position values of the tree and the character. If you get too close to the tree\r\n                            then, a collision is detected and you lose one life.<br></br>\r\n                            In case you are browsing on mobile, you can check this video showing the gameplay, i would like to port it in\r\n                            the future to mobile with react native as a fun project, in the meantime you can watch it or grab your computer\r\n                            and play around!.\r\n                            <div style={{maxHeight: \"400px\", minHeight: \"400px\", maxWidth: \"100%\", minWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\",  marginTop: \"5%\"}}>\r\n                            <iframe ref={youtubeVideo} style={{maxHeight: \"400px\", minHeight: \"400px\", maxWidth: \"100%\", minWidth: \"100%\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}} title= \"game video\" src=\"https://www.youtube.com/embed/pQOFoHOMXvw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n                            </div>\r\n                            <div style={{maxHeight: \"100%\", maxWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\"}}>\r\n                                <img src=\"gameGif.gif\" alt=\"game gif\" style={{maxHeight: \"100%\", maxWidth: \"100%\", objectFit: \"cover\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}}></img>\r\n                                <div style={{textAlign: \"left\", marginTop: \"1%\", color: \"darkgray\", fontWeight: \"100\"}}>\r\n                                    View from the distance of the scene.\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                My wish was to fill the entire sphere full of trees and grass but performance was being heavily affected. <br></br>\r\n                                I'm currently learning more about what goes on behind the three.js framework in order to create better scenes and i'm\r\n                                also improving my blender models focusing on performance when importing them to the web. \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={style.playButton}>\r\n                        <Link\r\n                            to=\"/game\"\r\n                            onMouseEnter={(e)=>{\r\n                                e.currentTarget.style.boxShadow = \"inset 0px -80px 0px #2F3B47\"\r\n                            }}\r\n                            onMouseLeave={(e)=>{\r\n                                e.currentTarget.style.boxShadow = \"\"\r\n                            }}\r\n                            style={{\r\n                            textDecoration: \"none\",\r\n                            display: \"grid\",\r\n                            color: \"white\",\r\n                            width: \"100%\",\r\n                            heigth: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            transition: \"all 0.5s ease-out\"\r\n                        }}>Play</Link>\r\n                </div>\r\n            <div style={style.footer}>\r\n                <div style={{flex: \"1\", display: \"grid\", alignItems: \"center\", margin: \"2%\"}}>\r\n                    <div>Ignacio Martin Diaz</div>     \r\n                    <div>Portfolio: <a href=\"https://ignaciodiaz.netlify.app/\" style={{color: \"white\"}} rel=\"noopener noreferrer\" target=\"_blank\">https://ignaciodiaz.netlify.app/</a></div>\r\n                    <div style={{display: \"flex\"}}>\r\n                    <FontAwesomeIcon icon={faMapMarked} style={{marginRight: \"1%\"}}/> \r\n                    <div>Buenos Aires, Argentina</div>\r\n                    </div>\r\n                    <div>&copy; Copyright 2021, Ignacio Martin Diaz. All rights reserved</div>\r\n                </div>\r\n                <div style={{flex: \"1\", display: \"grid\", alignItems: \"center\", paddingLeft: \"1%\", borderLeft: \"2px solid white\"}}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <a href=\"https://github.com/Rogerpeke97/\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                        style={{justifyContent: \"center\", display: \"grid\", textDecoration: \"none\", alignContent: \"center\", cursor: \"default\", color: \"white\", marginRight: \"1%\"}}>\r\n                        <FontAwesomeIcon icon={faGithub} style={{cursor: \"pointer\", fontSize: \"100%\", transition: \"all 0.5s ease-out\"}} />\r\n                        </a>\r\n                    <div>Github</div> \r\n                    </div>\r\n                    <div style={{display: \"flex\"}}>\r\n                    <a href=\"https://www.linkedin.com/in/ignacio-martin-diaz-2a30251b7/\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                        style={{justifyContent: \"center\", display: \"grid\", textDecoration: \"none\", alignContent: \"center\", cursor: \"default\", color: \"white\", marginRight: \"1%\"}}>\r\n                        <FontAwesomeIcon icon={faLinkedin} style={{cursor: \"pointer\", fontSize: \"100%\", transition: \"all 0.5s ease-out\"}} />\r\n                    </a>\r\n                    <div>LinkedIn</div> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div\r\n                className=\"loadingScreen\"\r\n                ref={fadeScreen}\r\n                style={componentLoaded ? {display: \"none\"} : {display: \"grid\"}}>\r\n                <div>\r\n                    <span>L</span>\r\n                    <span>O</span>\r\n                    <span>A</span>\r\n                    <span>D</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>{\" \"}</span>\r\n                    <span ref={percentage}></span>\r\n                </div>\r\n                <div className=\"messages\" ref={loadingScreenMessages}></div>\r\n                <div style={style.loading_bar} >\r\n                    <div style={style.progress_bar} ref={progress_bar}></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default HomeScreen","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\leaderboard.jsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":7,"column":8,"nodeType":"59","messageId":"60","endLine":7,"endColumn":13},{"ruleId":"57","severity":1,"message":"61","line":10,"column":20,"nodeType":"59","messageId":"60","endLine":10,"endColumn":26},{"ruleId":"57","severity":1,"message":"62","line":16,"column":10,"nodeType":"59","messageId":"60","endLine":16,"endColumn":19},{"ruleId":"57","severity":1,"message":"63","line":23,"column":15,"nodeType":"59","messageId":"60","endLine":23,"endColumn":23},{"ruleId":"57","severity":1,"message":"64","line":99,"column":9,"nodeType":"59","messageId":"60","endLine":99,"endColumn":28},{"ruleId":"57","severity":1,"message":"65","line":100,"column":9,"nodeType":"59","messageId":"60","endLine":100,"endColumn":27},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'useEffect' is defined but never used.","'setValue' is assigned a value but never used.","'angleSphereForgrass' is assigned a value but never used.","'grassRotationAngle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]