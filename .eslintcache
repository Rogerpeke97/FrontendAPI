[{"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js":"1","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js":"2","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js":"3","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx":"4","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx":"5","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx":"6","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx":"7","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx":"8","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx":"9","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\leaderboard.jsx":"10","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\three_scenes\\avatar.js":"11","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\three_scenes\\background_account.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":1346,"mtime":1620184558055,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":14027,"mtime":1612456914149,"results":"17","hashOfConfig":"14"},{"size":38415,"mtime":1619499138964,"results":"18","hashOfConfig":"14"},{"size":30493,"mtime":1619116784943,"results":"19","hashOfConfig":"14"},{"size":91,"mtime":1607656069637,"results":"20","hashOfConfig":"14"},{"size":48495,"mtime":1620275853953,"results":"21","hashOfConfig":"14"},{"size":10869,"mtime":1620524079570,"results":"22","hashOfConfig":"14"},{"size":15167,"mtime":1618272780874,"results":"23","hashOfConfig":"14"},{"size":3239,"mtime":1620081431109,"results":"24","hashOfConfig":"14"},{"size":10967,"mtime":1620693452027,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1na3gvm",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js",[],["54","55"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js",["56","57","58"],"import './App.css';\nimport HomeScreen from './components/homeScreen';\nimport Navbar from './components/navbar';\nimport Login from './components/login';\nimport Game from './components/game';\nimport Leaderboard from './components/leaderboard';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  BrowserRouter\n} from \"react-router-dom\";\nimport { PageContext } from './pageContext'\nimport { useEffect, useState } from 'react';\nimport Account from './components/account';\n\n\n\nfunction App() {\n\nconst [value, setValue] = useState({accountInfo: 0, logged: false, username: \"\"});\n\n  return (\n    <BrowserRouter>\n    <Switch>\n    <PageContext.Provider value={value}>  \n    <Route exact path=\"/\" render = {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <HomeScreen/>\n      </div>\n    } />\n    <Route exact path=\"/login\" render= { props =>\n    <div> \n    <Login/>\n    </div>\n    } />\n     <Route exact path=\"/game\" render= {props =>\n     <div className=\"App\">\n     <Navbar/>\n     <Game/>\n     </div>\n    } />\n    <Route exact path=\"/account\" render= {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <Account/>\n      </div>\n    } />\n    <Route exact path=\"/leaderboard\" render= { props =>\n    <div> \n    <Leaderboard/>\n    </div>\n    } />\n    </PageContext.Provider>\n    </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx",["59"],"import {useRef, useState, useEffect} from 'react'\r\nimport '../App.css';\r\nimport * as THREE from \"three\";\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Lensflare, LensflareElement} from 'three/examples/jsm/objects/Lensflare.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faGithub, faLinkedin} from '@fortawesome/free-brands-svg-icons'\r\nimport { faWindowClose, faQuestionCircle, faMapMarked } from '@fortawesome/free-solid-svg-icons'\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {BufferGeometryUtils} from 'three/examples/jsm/utils/BufferGeometryUtils';\r\n\r\n\r\n\r\n\r\nlet style = {\r\n    container: {\r\n        backgroundColor: 'transparent',\r\n        position: 'relative',\r\n        top: \"6.5rem\",\r\n        minHeight: '100%',\r\n        maxHeight: '100%',\r\n        minWidth: '100%',\r\n        maxWidth: '100%'\r\n    },\r\n    title: {\r\n        display: 'flex',\r\n        color: 'brown',\r\n        cursor: \"default\",\r\n        fontSize: '6rem',\r\n        justifyContent: 'center'\r\n    },\r\n    canvas: {\r\n        display: 'grid',\r\n        position: 'fixed',\r\n        minHeight: '100vh',\r\n        minWidth: '1920px',\r\n        zIndex: \"2\",\r\n        maxWidth: '1920px',\r\n    },\r\n    explanationBox: {\r\n        display: \"grid\",\r\n        backgroundColor: \"black\",\r\n        width: \"70%\",\r\n        opacity: \"0.8\",\r\n        zIndex: \"2\",\r\n        minHeight: \"100vh\",\r\n        left: \"15%\",\r\n        position: \"relative\",\r\n        boxShadow: \"0 10px 20px gray, 0 6px 6px gray\",\r\n        transition: \"all 0.5s ease-out\"\r\n    },\r\n    footer: {\r\n        backgroundColor: \"rgb(32, 30, 29)\",\r\n        color: 'white',\r\n        zIndex: \"2\",\r\n        display: 'flex',\r\n        fontSize: \"80%\",\r\n        justifyContent: \"center\",\r\n        height: '10rem',\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n    },\r\n    playButton: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        background: \"black\",\r\n        fontWeight: \"bold\",\r\n        width: \"20%\",\r\n        height: \"4rem\",\r\n        zIndex: \"2\",\r\n        marginBottom: \"5%\",\r\n        marginTop: \"5%\",\r\n        left:\"40%\",\r\n        boxShadow: \"0px 7px 11px 0px rgba(50, 50, 50, 0.75)\",\r\n        position: \"relative\",\r\n        display: \"flex\",\r\n    },\r\n    loading_bar : {\r\n        width: \"300px\",\r\n        marginTop: \"2%\",\r\n        zIndex: \"2\",\r\n        height: \"30px\",\r\n        background: \"black\",\r\n        boxShadow: \"5px 5px 15px 5px black\"\r\n    },\r\n    progress_bar: {\r\n        display: \"grid\",\r\n        transition: \"all 0.5s ease-out\",\r\n        width: \"0%\",\r\n        height: \"30px\",\r\n        background: \"darkblue\"\r\n    }\r\n}\r\n\r\nconst HomeScreen = () => {\r\n    const canvas = useRef(0);\r\n    let switcher = useRef(0);\r\n    let camera = useRef(0);\r\n    let mixer = useRef(0);\r\n    let angleSphereForgrass = useRef(0);\r\n    let grassRotationAngle = useRef(0);\r\n    const [componentLoaded,\r\n        setComponentLoaded] = useState(false);\r\n    let loadingScreenMessages = useRef(0);\r\n    let percentage = useRef(0);\r\n    let fadeScreen = useRef(0);\r\n    const [showExplainBox, setShowExplainBox] = useState(true);\r\n    let explainBox = useRef(0);\r\n    let youtubeVideo = useRef(0);\r\n    let bar1 = useRef(0);\r\n    let bar2 = useRef(0);\r\n    let bar3 = useRef(0);\r\n    let audio1 = useRef(0);\r\n    let musicExplain = useRef(0);\r\n    const [smartphoneView, setSmartphoneView] = useState(false);\r\n    let progress_bar = useRef(0);\r\n    let grass_geometry = useRef(0);\r\n    useEffect(() => {\r\n        if(componentLoaded === false){\r\n        let scrollX = window.scrollX;\r\n        document.documentElement.scrollLeft = -scrollX; // On resize the window scrolls in x due to moving_divs\r\n        let height = canvas.current.clientHeight;\r\n        let width =  document.documentElement.clientWidth;\r\n        let manager = new THREE.LoadingManager();// WHEN MODELS ARE LOADED .onLoad will be called\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n\r\n        camera.current = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true } );\r\n        /*let controls = new OrbitControls(camera.current, renderer.domElement);\r\n        controls\r\n            .target\r\n            .set(0, 0, 0);*/\r\n        camera\r\n            .current.position\r\n            .set(9, -0.5, -7);\r\n        camera\r\n        .current.rotation.y = 2.3;\r\n        camera\r\n        .current.rotation.x = -0.1;\r\n\r\n\r\n\r\n        //\r\n\r\n        const textureFlare = new THREE.TextureLoader(manager);\r\n        const textureFlare0 = textureFlare.load( 'lensflare0.png' );\r\n        const textureFlare3 = textureFlare.load( 'lensflare3.png' );\r\n\r\n        const addLight = ( h, s, l, x, y, z ) => {\r\n\r\n            const light = new THREE.PointLight( 0xffffff, 1.5, 7500 );\r\n            light.color.setHSL( h, s, l );\r\n            light.position.set( x, y, z );\r\n            scene.add( light );\r\n\r\n            const lensflare = new Lensflare();\r\n            lensflare.addElement( new LensflareElement( textureFlare0, 700, 0, light.color ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 60, 0.6 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 70, 0.7 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 120, 0.9 ) );\r\n            lensflare.addElement( new LensflareElement( textureFlare3, 70, 1 ) );\r\n            light.add( lensflare );\r\n            \r\n        }\r\n\r\n        addLight( 0.55, 1.5, 0.5, 5000, 0, 1000 );\r\n        addLight( 0.08, 1.4, 0.5, -1000, 100, 1005 );\r\n        addLight( 0.995, 1.2, 0.9, 5000, 5000, 1000 );\r\n\r\n        let clock = new THREE.Clock();\r\n        window.addEventListener('resize', () => {\r\n            if (canvas.current !== null) {\r\n                width = document.documentElement.clientWidth\r\n                height = document.documentElement.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.current.aspect = width / height;\r\n                camera.current.updateProjectionMatrix();\r\n                scrollX = window.scrollX;\r\n                document.documentElement.scrollLeft = -scrollX; // On resize the window scrolls in x due to moving_divs\r\n            }\r\n        });\r\n\r\n        //// PARTICLES\r\n        const particleCount = 750;\r\n        const particleDistance = 53;\r\n        let particles = new THREE.BufferGeometry();\r\n        const texture = new THREE\r\n            .TextureLoader(manager)\r\n            .load('leaftexture.png');\r\n        const pMaterial = new THREE.PointsMaterial({\r\n            color: 'green', size: 0.3, map: texture, alphaTest: 0.1, // removes black squares,\r\n            blending: THREE.CustomBlending,\r\n            transparent: true\r\n        });\r\n\r\n        let positions = [];\r\n        let posX, posY, posZ;\r\n        for (let i = 0; i < 750; i++) {\r\n            posX = (Math.random() - 0.5) * particleDistance;\r\n            posY = (Math.random() - 0.5) * particleDistance;;\r\n            posZ = (Math.random() - 0.5) * particleDistance;;\r\n            positions.push(posX, posY, posZ);\r\n        }\r\n        particles.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        // create the particle system\r\n        let particleSys = new THREE.Points(particles, pMaterial);\r\n        particleSys.name = 'particleSys';\r\n        let star = particleSys.geometry.attributes.position.array;\r\n        renderer.setAnimationLoop(() => {\r\n            for(let i = 1; i < particleCount * 3; i+=3){\r\n                star[i] -= 0.01;\r\n                if(star[i] < -10){\r\n                    star[i] = 20;\r\n                }\r\n                particleSys.geometry.attributes.position.needsUpdate = true;\r\n            }\r\n        })\r\n        scene.add(particleSys)\r\n        // CHARACTER ADDON FOR MAIN MENU\r\n        const loader = new GLTFLoader(manager)\r\n        let action;\r\n        loader.load(\"knight.gltf\", function (object) {\r\n            object.scene.position.x = 0;\r\n            object.scene.position.y = -2;\r\n            object.scene.position.z = -2;\r\n            mixer.current = new THREE.AnimationMixer(object.scene);\r\n            action = mixer.current.clipAction(object.animations[15]);\r\n            action.play();\r\n            scene.add(object.scene);\r\n            switcher.current = 1;\r\n        },);\r\n        // setTimeout(()=>mixer.clipAction(obj.animations[1]).play(), 8000)// WORKS\r\n        // TRYING A SPHERE\r\n        const floorTexture = new THREE\r\n            .TextureLoader(manager)\r\n            .load('homescreenGrass.jpg', () => {\r\n                floorTexture.wrapS = THREE.RepeatWrapping;\r\n                floorTexture.wrapT = THREE.RepeatWrapping;\r\n                floorTexture\r\n                    .repeat\r\n                    .set(2, 2);\r\n            });\r\n        /*let floorBump = new THREE\r\n            .TextureLoader(manager)\r\n            .load('sunbump.png', () => {\r\n                floorTexture.wrapS = THREE.RepeatWrapping;\r\n                floorTexture.wrapT = THREE.RepeatWrapping;\r\n                floorTexture\r\n                    .repeat\r\n                    .set(2, 2);\r\n            });*/\r\n        const geometrySphere = new THREE.SphereGeometry(7, 25, 25);\r\n        const materialSphere = new THREE.MeshLambertMaterial({map: floorTexture, alphaTest: 0.1});\r\n        const sphere = new THREE.Mesh(geometrySphere, materialSphere);\r\n        sphere.rotation.x = 1;\r\n        sphere.position.set(0, -9, -2);\r\n        scene.add(sphere);\r\n        const textu = new THREE\r\n            .TextureLoader(manager)\r\n            .load(\"/textures/skyBackgroundCropped.jpeg\");\r\n        textu.minFilter = THREE.LinearFilter;\r\n        scene.background = textu;\r\n        //TREE\r\n        const treeLoader = new GLTFLoader(manager);\r\n        let trees_instanced_mesh;\r\n        let treeRotationX, treePositionY;\r\n        let newX = -5;\r\n        let angleSphereForTrees = 0;\r\n        let geometry_merged = new THREE.BufferGeometry();\r\n        let geometry_array = [];\r\n        let material_tree;\r\n        treeLoader.load('new_tree.glb', (tree) => {\r\n            tree.scene.traverse((child)=>{\r\n                if (child.isMesh) {\r\n                    geometry_array.push(child.geometry.clone().applyMatrix4(child.matrixWorld));\r\n                    material_tree =  child.material;\r\n                }\r\n            });\r\n            geometry_merged = BufferGeometryUtils.mergeBufferGeometries(geometry_array);\r\n            //geometry_merged.merge(child.geometry, child.matrix);\r\n            //const mesh_material = new THREE.MeshStandardMaterial({color: 0xFFFFFF});\r\n            trees_instanced_mesh = new THREE.InstancedMesh(geometry_merged, material_tree, 2);\r\n            trees_instanced_mesh.instanceMatrix.setUsage( THREE.DynamicDrawUsage ); // will be updated every frame\r\n               //trees_instanced_mesh.instanceMatrix.needsUpdate = true;\r\n                //dummy_tree.add(tree_children[i]);\r\n            for (let j = 0; j < 2; j++) {\r\n                let dummy_tree = new THREE.Object3D();\r\n                dummy_tree.scale.set(0.3,0.3,0.3);\r\n                newX+=3; //RANDOM NUMBER BETWEEN -7 AND 7\r\n                zRotationNewRadius = Math.sqrt(49 - (newX * newX)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n                z = Math.sin(angleSphereForTrees * (180 / Math.PI)) * zRotationNewRadius;\r\n                // I HAVE TO USE THE SAME FORMULA AS THE KNIGHT TO POSITION THE TREE WITH THE\r\n                // RIGHT ROTATION AND Y POSITION AROUND THE SPHERE TREE ROTATION SIN ANGLE =\r\n                // OPOSSITE OVER HYPOTHENUSE\r\n                treeRotationZ = Math.asin(newX / 7); //SPHERE RADIUS = 7\r\n\r\n                treeRotationX = -angleSphereForTrees * (180 / Math.PI); //The tree rotation ON X AXIS (FORWARDS)\r\n\r\n                //FIND Y OPOSSITE = SQUARE ROOT OF RADIUS SQUARED - ADYACER = Z SQUARED\r\n                treePositionY = Math.cos(angleSphereForTrees * (180 / Math.PI)) * zRotationNewRadius;\r\n\r\n                dummy_tree.position.set(newX, treePositionY -9.3, -z-3.2);\r\n                dummy_tree.rotation.set(treeRotationX, 0, -treeRotationZ);\r\n                dummy_tree.updateMatrix();\r\n                trees_instanced_mesh.setMatrixAt( j, dummy_tree.matrix );\r\n                //angleSphereForTrees += 0.00813333333; //keep it at 0 because trees are on a fixed x value\r\n            }\r\n            trees_instanced_mesh.instanceMatrix.needsUpdate = true;\r\n            scene.add(trees_instanced_mesh);\r\n            /*tree.scene.position.set(0, -2.1, -3.2);\r\n            tree.scene.rotation.x = -0.2;\r\n            tree.scene.rotation.y = -0.4;\r\n\r\n            scene.add(tree.scene);*/\r\n        })\r\n\r\n        //GRASS\r\n\r\n        const dummy = new THREE.Object3D();\r\n        let zRotationNewRadius,treeRotationZ,grassRotationX, z, grassPositionY;\r\n        //GRASS USED BLENDER TO CREATE LITTLE BLOCKS OF GRASS AND WIND ANIMATION\r\n        const grassLoader = new GLTFLoader(manager);                // eslint-disable-next-line no-loop-func\r\n            grassLoader.load('grassColor.glb', (grass) => {\r\n                grass.scene.traverse((child)=>{\r\n                    if (child.isMesh) {\r\n                        grass_geometry.current = child;\r\n                    }\r\n                });\r\n            const mesh_material = new THREE.MeshStandardMaterial({color: 0xff0000});\r\n            const grass_instanced_mesh = new THREE.InstancedMesh(grass_geometry.current.geometry, mesh_material, 12);\r\n            scene.add(grass_instanced_mesh); \r\n            for(let i = 0; i < 12; i++){\r\n                dummy.position.x = Math.floor(Math.random() * 3) + 1;\r\n                zRotationNewRadius = Math.sqrt(49 - (dummy.position.x * dummy.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n                treeRotationZ = Math.asin(dummy.position.x / 7); //SPHERE RADIUS = 7\r\n                z = Math.sin(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                dummy.rotation.z = -treeRotationZ;\r\n                dummy.position.z = -z -2;\r\n    \r\n                grassRotationX = grassRotationAngle.current * (180 / Math.PI); //The grass rotation ON X AXIS (FORWARDS)\r\n                dummy.rotation.x = grassRotationX;\r\n    \r\n                grassPositionY = Math.cos(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n                dummy.position.y = grassPositionY - 9.3;\r\n                angleSphereForgrass.current+=0.001;\r\n                grassRotationAngle.current-=0.001;\r\n                dummy.updateMatrix();\r\n                grass_instanced_mesh.setMatrixAt( i, dummy.matrix );\r\n                \r\n            }\r\n            grass_instanced_mesh.instanceMatrix.needsUpdate = true;\r\n        })\r\n\r\n        //USED BLENDER TO CREATE LITTLE BLOCKS OF GRASS AND WIND ANIMATION\r\n        /*const grassLoader = new GLTFLoader(manager);\r\n        let zRotationNewRadius;\r\n        let treeRotationZ;\r\n        let grassRotationX;\r\n        let z;\r\n        let grassPositionY;\r\n        for(let i = 0; i < 4; i++){\r\n        // eslint-disable-next-line no-loop-func\r\n        grassLoader.load('grassColor.glb', (grass) => {\r\n            grass.scene.position.x = Math.floor(Math.random() * 3) -0.5 ;\r\n            grass.scene.scale.set(0.14, 0.14, 0.14)\r\n            zRotationNewRadius = Math.sqrt(49 - (grass.scene.position.x * grass.scene.position.x)); // NEW RADIUS IF LOOKED FROM THE SIDE, LOOKS AS IF THE RADIUS DECREASED\r\n            treeRotationZ = Math.asin(grass.scene.position.x / 7); //SPHERE RADIUS = 7\r\n            z = Math.sin(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n            grass.scene.rotation.z = -treeRotationZ;\r\n            grass.scene.position.z = -z - 2;\r\n\r\n            grassRotationX = grassRotationAngle.current * (180 / Math.PI); //The grass rotation ON X AXIS (FORWARDS)\r\n            grass.scene.rotation.x = grassRotationX;\r\n\r\n            grassPositionY = Math.cos(angleSphereForgrass.current * (180 / Math.PI)) * zRotationNewRadius;\r\n            grass.scene.position.y = grassPositionY - 9;\r\n            scene.add(grass.scene);\r\n            angleSphereForgrass.current+=0.001;\r\n            grassRotationAngle.current-=0.001;\r\n        })\r\n        }*/\r\n\r\n        //media queries\r\n        let phoneViewCheck = (e)=>{\r\n            if(e.matches === true){\r\n                setSmartphoneView(true);\r\n                explainBox.current.style.width = \"100%\";\r\n                explainBox.current.style.left = \"0%\";\r\n            }\r\n            else{\r\n                explainBox.current.style.width = \"70%\";\r\n                explainBox.current.style.left = \"15%\";\r\n                setSmartphoneView(false);\r\n            }\r\n        }\r\n        phoneViewCheck(window.matchMedia(\"(max-width: 700px)\"));\r\n        window.matchMedia(\"(max-width: 700px)\").addEventListener('change', phoneViewCheck);\r\n\r\n\r\n        renderer.setSize(width, height)\r\n        canvas\r\n            .current\r\n            .appendChild(renderer.domElement)\r\n        let delta;\r\n        const animate = () => {\r\n            delta = clock.getDelta();\r\n            if (switcher.current === 1) {\r\n                mixer\r\n                    .current\r\n                    .update(delta)\r\n            }\r\n            renderer.render(scene, camera.current)\r\n            requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        //CHECK IF MODELS ARE LOADED\r\n        percentage.current.innerText = \"0 %\";\r\n        manager.onProgress = ()=>{\r\n                if(parseInt(percentage.current.innerText.slice(0, -2)) < 100){\r\n                loadingScreenMessages.current.innerText = \"Loading your experience...\";\r\n                percentage.current.innerText = parseInt(percentage.current.innerText.slice(0, -2)) + 1 + \" %\";\r\n                progress_bar.current.style.width = (percentage.current.innerText).replace(' ', '');\r\n                }\r\n                else{\r\n                    percentage.current.innerText = \"100%\";\r\n                    progress_bar.current.style.width = percentage.current.innerText;\r\n                }\r\n        }\r\n        manager.onLoad = ()=>{\r\n            percentage.current.innerText = \"100%\";\r\n            progress_bar.current.style.width = percentage.current.innerText;\r\n            fadeScreen.current.style.animation = \"loadingDone 1s normal forwards ease-out\";\r\n            fadeScreen.current.onanimationend = ()=>setComponentLoaded(true);\r\n        }\r\n    }\r\n})\r\n     //TRACK MOUSE MOVEMENT AND ROTATE camera\r\n            let mouseMove = (e)=>{\r\n                let mousex = (e.clientX   - ( canvas.current.getBoundingClientRect().left / 2)) ;\r\n                let mousey = (e.clientY  - ( canvas.current.getBoundingClientRect().top / 2)) ;\r\n                let x = mousex - canvas.current.getBoundingClientRect().width / 2 ;\r\n                let y = canvas.current.getBoundingClientRect().height / 2 - mousey ;\r\n                camera.current.rotation.y = (x / 1000) * (Math.PI / 180) + 2.3;\r\n                camera.current.rotation.x = -(y / 1000) * (Math.PI / 180) - 0.1;\r\n            }\r\n\r\n            let addMusicAnimation = ()=>{\r\n                if(bar1.current.style.animation === \"\"){\r\n                bar1.current.style.animation = \"increaseHeightBar1 1.5s linear infinite\"\r\n                bar2.current.style.animation = \"increaseHeightBar1 1s linear infinite\"\r\n                bar3.current.style.animation = \"increaseHeightBar1 0.75s linear infinite\"\r\n                }\r\n                else{\r\n                bar1.current.style.animation = \"\"\r\n                bar2.current.style.animation = \"\"\r\n                bar3.current.style.animation = \"\"                   \r\n                }\r\n            }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={canvas} style={style.canvas} onMouseMove={(e)=>mouseMove(e)}></div>\r\n            <div style={style.container} onMouseMove={(e)=>mouseMove(e)}>\r\n                <div style={style.title}>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>X</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(125, 140, 40)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>E</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(70, 75, 68)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>N</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>T</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out', zIndex: \"3\", textShadow: \"4px 4px 3px rgba(150, 150, 150, 1)\"\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\";\r\n                        t.currentTarget.style.textShadow = \"11px 11px 6px rgba(150, 150, 150, 1)\";\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"brown\";\r\n                        t.currentTarget.style.textShadow = \"4px 4px 3px rgba(150, 150, 150, 1)\";\r\n                    }}>A</span>\r\n                </div>\r\n                <div className= \"helpToExplainBox\" style={{display:\"grid\", position: \"fixed\", height: \"5%\", width:\"5%\", left: \"95%\", top:\"95%\", zIndex: \"4\"}}>\r\n                    <FontAwesomeIcon className= \"help\" icon={faQuestionCircle} style={{cursor: \"pointer\", width:\"100%\",fontSize: \"200%\", transition: \"all 0.5s ease-out\", color: \"white\"}} \r\n                    onClick={()=>{\r\n                    if(showExplainBox === false && smartphoneView === false){\r\n                        setShowExplainBox(true);\r\n                        explainBox.current.style.animation = \"popExplainBox 1s normal forwards ease-out\"; \r\n                        explainBox.current.onanimationend = ()=>{\r\n                            explainBox.current.style.animation = \"none\";\r\n                        };\r\n                    }\r\n                    else if(showExplainBox === false && smartphoneView === true){\r\n                            setShowExplainBox(true);\r\n                            explainBox.current.style.animation = \"popExplainBox 1s normal forwards ease-out\"; \r\n                            explainBox.current.onanimationend = ()=>{\r\n                                explainBox.current.style.animation = \"none\";\r\n                                explainBox.current.style.width = \"100%\"; \r\n                                explainBox.current.style.left = \"0%\"; \r\n                        };                    \r\n                    }\r\n                    }}/>\r\n                </div>\r\n                <div className= \"musicPlayer\" style={{display:\"flex\", position: \"fixed\", height: \"50px\", width:\"4%\", left: \"95%\", top:\"75%\", zIndex: \"4\", background: \"transparent\", borderRadius: \"50%\", transform: \"rotate3d(0, 0, 1, 180deg)\"}} onClick={()=>{\r\n                    let audio = audio1.current;\r\n                    addMusicAnimation();\r\n                    if (audio.duration > 0 && !audio.paused) {\r\n                        audio.pause();\r\n                        //Its playing...do your job\r\n                    } else {\r\n                        audio.play();\r\n                        //Not playing...maybe paused, stopped or never played.   \r\n                    }\r\n                }}\r\n                onMouseEnter={()=>{\r\n                    musicExplain.current.style.display = \"flex\";\r\n                    }}\r\n                onMouseLeave = {()=>{\r\n                    musicExplain.current.style.display = \"none\";\r\n                }}\r\n                >\r\n                    <div ref={bar1} style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar2}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div>\r\n                    <div ref={bar3}style={{height: \"5%\", width: \"100%\", marginLeft: \"2%\", marginRight: \"2%\", background: \"white\", flex: \"1\", position: \"relative\", bottom: \"0\", transition: \"all 0.5 ease-out\"}}></div> \r\n                </div>\r\n                <div ref={musicExplain} style={{display:\"none\", textAlign: \"center\", position: \"fixed\", justifyContent: \"center\", alignItems: \"center\", height: \"25px\", width:\"75px\", left: \"89%\", top:\"75%\"\r\n                , zIndex: \"4\", background: \"black\", opacity: \"0.7\", fontSize: \"50%\", color: \"white\", transition: \"all 0.5s ease-out\"}}>Play some FFIX music!</div>\r\n                <audio src=\"finalFantasy.mp3\" ref={audio1} loop></audio>\r\n                <div ref={explainBox} style={showExplainBox ? style.explanationBox : {visibility: \"hidden\"}}>\r\n                    <div>\r\n                        <div style={{display: \"grid\", justifyContent: \"right\", alignContent: \"center\"}}>\r\n                        <FontAwesomeIcon className=\"windowClose\" icon={faWindowClose} style={{cursor: \"pointer\", fontSize: \"250%\", color: \"white\", transition: \"all 0.5s ease-out\", minWidth: \"100%\", maxWidth: \"100%\", textShadow: \"0px 7px 10px rgba(150, 150, 150, 1)\"}}\r\n                        onClick={()=>{\r\n                            explainBox.current.style.animation = \"fadeExplainBox 1s normal forwards ease-out\";\r\n                            explainBox.current.onanimationend = ()=>{\r\n                                explainBox.current.style.animation = \"none\";\r\n                                setShowExplainBox(false)\r\n                            };\r\n                            }}/>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                            textAlign: \"left\",\r\n                            margin: \"5%\",\r\n                            color: \"white\"\r\n                        }}>\r\n                            This project was made using three.js, along with blender, and react. You can use\r\n                            the models i made by going to the repository down here:\r\n                            <br></br>\r\n                            <div style={{display: \"grid\", height: \"50px\"}}>\r\n                                <a\r\n                                    href=\"https://github.com/Rogerpeke97/FrontendAPI\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                    target=\"_blank\"\r\n                                    style={{\r\n                                    justifyContent: \"center\",\r\n                                    display: \"grid\",\r\n                                    textDecoration: \"none\",\r\n                                    alignContent: \"center\",\r\n                                    color: \"white\",\r\n                                    cursor: \"default\",\r\n                                }}>\r\n                                <FontAwesomeIcon className= \"github\" icon={faGithub} style={{cursor: \"pointer\", fontSize: \"200%\", transition: \"all 0.5s ease-out\"}} />\r\n                                </a>\r\n                            </div> <br></br>\r\n                            <div style={{maxHeight: \"100%\", maxWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\", justifyContent: \"center\"}}>\r\n                                <img src=\"/explanationImages/tree.jpg\" alt=\"blendertree\" style={{maxHeight: \"100%\", maxWidth: \"100%\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}}></img>\r\n                                <div style={{textAlign: \"left\", marginTop: \"1%\", color: \"darkgray\", fontWeight: \"100\"}}>\r\n                                    Tree model exported from blender where hair particles were turned into tree branch meshes.\r\n                                </div>\r\n                            </div>\r\n                            The knight model was downloaded from cg trader, which i will replace soon by a\r\n                            model i am working on.<br></br> If you want to export your files from blender to\r\n                            three.js, you have to be aware that particles systems cannot be exported from\r\n                            blender, therefore you should convert them to mesh and then export the file.<br></br> I'm\r\n                            saying this in case you want to work on top of the models that i left on my\r\n                            repo. <br></br> The game is pretty basic, i had to implement a bit of math for the\r\n                            character's movement around the radius of the sphere and how, depending at which\r\n                            value along the X axis the character is, the Y position of the character varies.\r\n                            The way the collision system works, if you could call it that, is, it checks the\r\n                            position values of the tree and the character. If you get too close to the tree\r\n                            then, a collision is detected and you lose one life.<br></br>\r\n                            In case you are browsing on mobile, you can check this video showing the gameplay, i would like to port it in\r\n                            the future to mobile with react native as a fun project, in the meantime you can watch it or grab your computer\r\n                            and play around!.\r\n                            <div style={{maxHeight: \"400px\", minHeight: \"400px\", maxWidth: \"100%\", minWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\",  marginTop: \"5%\"}}>\r\n                            <iframe ref={youtubeVideo} style={{maxHeight: \"400px\", minHeight: \"400px\", maxWidth: \"100%\", minWidth: \"100%\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}} title= \"game video\" src=\"https://www.youtube.com/embed/pQOFoHOMXvw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n                            </div>\r\n                            <div style={{maxHeight: \"100%\", maxWidth: \"100%\", display: \"grid\", alignContent: \"center\", marginBottom: \"5%\"}}>\r\n                                <img src=\"gameGif.gif\" alt=\"game gif\" style={{maxHeight: \"100%\", maxWidth: \"100%\", objectFit: \"cover\", boxShadow: \"5px 5px 11px 0px rgba(50, 50, 50, 0.75)\"}}></img>\r\n                                <div style={{textAlign: \"left\", marginTop: \"1%\", color: \"darkgray\", fontWeight: \"100\"}}>\r\n                                    View from the distance of the scene.\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                My wish was to fill the entire sphere full of trees and grass but performance was being heavily affected. <br></br>\r\n                                I'm currently learning more about what goes on behind the three.js framework in order to create better scenes and i'm\r\n                                also improving my blender models focusing on performance when importing them to the web. \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={style.playButton}>\r\n                        <Link\r\n                            to=\"/game\"\r\n                            onClick={()=>window.location.assign(\"/game\")}\r\n                            onMouseEnter={(e)=>{\r\n                                e.currentTarget.style.boxShadow = \"inset 0px -80px 0px #2F3B47\"\r\n                            }}\r\n                            onMouseLeave={(e)=>{\r\n                                e.currentTarget.style.boxShadow = \"\"\r\n                            }}\r\n                            style={{\r\n                            textDecoration: \"none\",\r\n                            display: \"grid\",\r\n                            color: \"white\",\r\n                            width: \"100%\",\r\n                            heigth: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            transition: \"all 0.5s ease-out\"\r\n                        }}>Play</Link>\r\n                </div>\r\n            <div style={style.footer}>\r\n                <div style={{flex: \"1\", display: \"grid\", alignItems: \"center\", margin: \"2%\"}}>\r\n                    <div>Ignacio Martin Diaz</div>     \r\n                    <div>Portfolio: <a href=\"https://ignaciodiaz.netlify.app/\" style={{color: \"white\"}} rel=\"noopener noreferrer\" target=\"_blank\">https://ignaciodiaz.netlify.app/</a></div>\r\n                    <div style={{display: \"flex\"}}>\r\n                    <FontAwesomeIcon icon={faMapMarked} style={{marginRight: \"1%\"}}/> \r\n                    <div>Buenos Aires, Argentina</div>\r\n                    </div>\r\n                    <div>&copy; Copyright 2021, Ignacio Martin Diaz. All rights reserved</div>\r\n                </div>\r\n                <div style={{flex: \"1\", display: \"grid\", alignItems: \"center\", paddingLeft: \"1%\", borderLeft: \"2px solid white\"}}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <a href=\"https://github.com/Rogerpeke97/\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                        style={{justifyContent: \"center\", display: \"grid\", textDecoration: \"none\", alignContent: \"center\", cursor: \"default\", color: \"white\", marginRight: \"1%\"}}>\r\n                        <FontAwesomeIcon icon={faGithub} style={{cursor: \"pointer\", fontSize: \"100%\", transition: \"all 0.5s ease-out\"}} />\r\n                        </a>\r\n                    <div>Github</div> \r\n                    </div>\r\n                    <div style={{display: \"flex\"}}>\r\n                    <a href=\"https://www.linkedin.com/in/ignacio-martin-diaz-2a30251b7/\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                        style={{justifyContent: \"center\", display: \"grid\", textDecoration: \"none\", alignContent: \"center\", cursor: \"default\", color: \"white\", marginRight: \"1%\"}}>\r\n                        <FontAwesomeIcon icon={faLinkedin} style={{cursor: \"pointer\", fontSize: \"100%\", transition: \"all 0.5s ease-out\"}} />\r\n                    </a>\r\n                    <div>LinkedIn</div> \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div\r\n                className=\"loadingScreen\"\r\n                ref={fadeScreen}\r\n                style={componentLoaded ? {display: \"none\"} : {display: \"grid\"}}>\r\n                <div>\r\n                    <span>L</span>\r\n                    <span>O</span>\r\n                    <span>A</span>\r\n                    <span>D</span>\r\n                    <span>I</span>\r\n                    <span>N</span>\r\n                    <span>G</span>\r\n                    <span>{\" \"}</span>\r\n                    <span ref={percentage}></span>\r\n                </div>\r\n                <div className=\"messages\" ref={loadingScreenMessages}></div>\r\n                <div style={style.loading_bar} >\r\n                    <div style={style.progress_bar} ref={progress_bar}></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default HomeScreen","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\leaderboard.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\three_scenes\\avatar.js",["60","61"],"import * as THREE from \"three\";\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport {useEffect, useRef, useState} from 'react'\r\n\r\nlet style = {\r\n    canvas:{\r\n        minHeight: \"250px\",\r\n        maxHeight: \"250px\", \r\n        minWidth: \"200px\",\r\n        maxWidth: \"100%\",\r\n        border: \"2px solid black\",\r\n        zIndex: \"2\"\r\n    }\r\n}\r\n\r\nconst Avatar = ({canvas, scene, color})=>{\r\n    useEffect(()=>{ \r\n            //AVATAR\r\n            let obj;\r\n            const loader = new OBJLoader();\r\n            loader.load( 'earth.obj', ( object )=>{\r\n                object.position.x = 0;\r\n                object.position.y = -1.5;\r\n                object.position.z = -4;\r\n                obj = object;\r\n                scene.current.add( obj );\r\n            } );\r\n            let height = canvas.current.clientHeight\r\n            let width = canvas.current.clientWidth\r\n            let raycaster = new THREE.Raycaster();\r\n            let mouse = new THREE.Vector2();\r\n            let pointOfIntersection = new THREE.Vector3();\r\n            let plane = new THREE.Plane(new THREE.Vector3(0, 0, 0.5), 0.5);\r\n            //const helper = new THREE.PlaneHelper( plane, 10, 0xffff00 ); DEBUGGING TO SEE THE PLANE\r\n\r\n            canvas.current.onmousemove = (e)=>{\r\n                mouse.x = ((e.clientX - canvas.current.offsetLeft) / width) *2 -1;\r\n                mouse.y = - ( (e.clientY - canvas.current.offsetTop) / height) * 2 + 1;\r\n                raycaster.setFromCamera(mouse, camera);\r\n                raycaster.ray.intersectPlane(plane, pointOfIntersection);\r\n                obj.lookAt(pointOfIntersection);       \r\n            }\r\n\r\n            scene.current = new THREE.Scene();\r\n            //scene.add(helper) ONLY FOR DEBUGGING\r\n            const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n            const renderer = new THREE.WebGLRenderer({antialias: true});\r\n            camera\r\n                .position\r\n                .set(0, 0, 4);\r\n            const color_scene = 'white';\r\n            const intensity = 1;\r\n            const light = new THREE.DirectionalLight(color_scene, intensity);\r\n            light\r\n                .position\r\n                .set(0, 0, 3);\r\n            scene.current.add(light);\r\n\r\n            scene.current.background = new THREE.Color(color.current);\r\n                    \r\n            window.addEventListener('resize', ()=>{\r\n                if(canvas.current !== null){\r\n                width = canvas.current.clientWidth\r\n                height = canvas.current.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.aspect = width / height;\r\n                camera.updateProjectionMatrix();\r\n            }\r\n            });\r\n            renderer.setSize(width, height)\r\n            canvas.current.appendChild(renderer.domElement)\r\n\r\n            const animate = ()=>{\r\n                renderer.render(scene.current, camera)\r\n                window.requestAnimationFrame(animate);\r\n            }\r\n            animate();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return(\r\n        <div style={style.canvas} ref={canvas}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\three_scenes\\background_account.js",["62","63","64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":9,"column":20,"nodeType":"72","messageId":"73","endLine":9,"endColumn":26},{"ruleId":"70","severity":1,"message":"74","line":15,"column":10,"nodeType":"72","messageId":"73","endLine":15,"endColumn":19},{"ruleId":"70","severity":1,"message":"75","line":22,"column":15,"nodeType":"72","messageId":"73","endLine":22,"endColumn":23},{"ruleId":"70","severity":1,"message":"76","line":10,"column":9,"nodeType":"72","messageId":"73","endLine":10,"endColumn":22},{"ruleId":"70","severity":1,"message":"77","line":3,"column":20,"nodeType":"72","messageId":"73","endLine":3,"endColumn":26},{"ruleId":"70","severity":1,"message":"78","line":3,"column":28,"nodeType":"72","messageId":"73","endLine":3,"endColumn":36},{"ruleId":"70","severity":1,"message":"79","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":19},{"ruleId":"70","severity":1,"message":"78","line":3,"column":28,"nodeType":"72","messageId":"73","endLine":3,"endColumn":36},{"ruleId":"70","severity":1,"message":"80","line":72,"column":13,"nodeType":"72","messageId":"73","endLine":72,"endColumn":37},{"ruleId":"70","severity":1,"message":"81","line":73,"column":13,"nodeType":"72","messageId":"73","endLine":73,"endColumn":31},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'setValue' is assigned a value but never used.","'OrbitControls' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'OBJLoader' is defined but never used.","'instanced_mesh_to_modify' is defined but never used.","'dummy_number_minus' is defined but never used.","no-global-assign","no-unsafe-negation"]