[{"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js":"1","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js":"2","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js":"3","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx":"4","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx":"5","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx":"6","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx":"7","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx":"8","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":1213,"mtime":1611602878018,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":14128,"mtime":1611470494019,"results":"14","hashOfConfig":"11"},{"size":26386,"mtime":1611646732392,"results":"15","hashOfConfig":"11"},{"size":26606,"mtime":1611189272433,"results":"16","hashOfConfig":"11"},{"size":91,"mtime":1607656069637,"results":"17","hashOfConfig":"11"},{"size":33598,"mtime":1611652565662,"results":"18","hashOfConfig":"11"},{"size":5424,"mtime":1611189421913,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1na3gvm",{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js",[],["42","43"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js",["44","45","46","47"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx",["48","49","50","51","52","53"],"/* eslint-disable no-use-before-define */\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport * as THREE from \"three\";\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n  import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n  import { faChild, faDiagnoses, faTrophy, faSignOutAlt, faHome } from '@fortawesome/free-solid-svg-icons'\r\nlet style = {\r\n    navbar: {\r\n        position: \"fixed\",\r\n        zIndex: \"50\",\r\n        width: \"100%\",\r\n        color: 'white',\r\n        display: 'flex',\r\n        height: '6.5rem'\r\n    },\r\n    grid1: {\r\n        display: 'flex',\r\n        flex: '1',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    canvas:{\r\n        flex: \"1\",\r\n        minHeight: \"100px\",\r\n        minWidth: \"150px\",\r\n        maxHeight: \"100%\", \r\n        maxWidth: \"100%\",\r\n    },\r\n    grid2:{\r\n        flex: '1'\r\n    },\r\n    homeButton:{\r\n        flex: '1', cursor: 'pointer', transition: \"0.5s ease-in-out\",\r\n        color: \"white\",\r\n        textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n        overflow: \"visible\",\r\n        fontSize: \"1.3rem\",\r\n        fontWeight:\"bold\",\r\n        margin: \"0\"\r\n    },\r\n    loginButton:{\r\n        flex: '1', cursor: 'pointer', transition: \"0.5s ease-in-out\",\r\n        color: \"white\",\r\n        textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n        overflow: \"hidden\",\r\n        fontSize: \"1.3rem\",\r\n        fontWeight:\"bold\",\r\n        maxWidth: \"170px\",\r\n        textOverflow: \"ellipsis\",\r\n        textDecoration: \"none\",\r\n        margin: \"0\"\r\n    },\r\n    hoverLogin:{\r\n        visibility: \"visible\",\r\n        backgroundColor: \"lightblue\",\r\n        position: \"absolute\",\r\n        color: \"white\", \r\n        top: \"100%\",\r\n        minWidth: \"200px\",\r\n        maxWidth: \"200px\",\r\n        fontSize:\"1rem\",\r\n        right: \"0%\",\r\n        transition: \"all 0.5s ease-out\",\r\n        zIndex: \"2\",\r\n        border: \"1px solid white\"\r\n    },\r\n    dropdown:{\r\n        display: \"flex\",\r\n        height: \"50px\",\r\n        fontWeight: \"bold\",\r\n        alignItems: 'center',\r\n        cursor: \"pointer\",\r\n        border: \"0.8px solid white\",\r\n        transition: \"all 0.5s ease-out\",\r\n        color: \"black\",\r\n        textDecoration: \"none\"\r\n    }\r\n}\r\n\r\nconst Navbar = ()=>{\r\n    const canvas = useRef(null);\r\n    const [scene, setScene] = useState(\"Scene not set\");\r\n    const [smartphoneView, setSmartphoneView] = useState(false);\r\n    const underlineHome = useRef(0);\r\n    const homeFont = useRef(0);\r\n    const underlineLogin = useRef(0);\r\n    const loginFont = useRef(0);\r\n    const loginButton = useRef(0);\r\n    const [hoverLogin, setHoverLogin] = useState(0);\r\n    const [logged, setLogged] = useState(null);\r\n    const [username, setUsername] = useState(null);\r\n    useEffect(()=>{\r\n        if(scene === \"Scene not set\"){\r\n    /*DRAGON\r\n    let obj;\r\n    const loader = new OBJLoader();\r\n    loader.load( 'earth.obj', ( object )=>{\r\n        object.position.x = 0;\r\n        object.position.y = -1.5;\r\n        object.position.z = -4;\r\n        console.log(object)\r\n        obj = object;\r\n        scene.add( obj );\r\n    } );*/\r\n\r\n        let height = canvas.current.clientHeight\r\n        let width = canvas.current.clientWidth\r\n        let raycaster = new THREE.Raycaster();\r\n        let mouse = new THREE.Vector2();\r\n        let pointOfIntersection = new THREE.Vector3();\r\n        let plane = new THREE.Plane(new THREE.Vector3(0, 0, 0.5), 0.5);\r\n        //const helper = new THREE.PlaneHelper( plane, 10, 0xffff00 ); DEBUGGING TO SEE THE PLANE\r\n\r\n        /*canvas.current.onmousemove = (e)=>{\r\n            mouse.x = ((e.clientX - canvas.current.offsetLeft) / width) *2 -1;\r\n            mouse.y = - ( (e.clientY - canvas.current.offsetTop) / height) * 2 + 1;\r\n            raycaster.setFromCamera(mouse, camera);\r\n            raycaster.ray.intersectPlane(plane, pointOfIntersection);\r\n            obj.lookAt(pointOfIntersection);       \r\n        }*/\r\n\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer({alpha: true});\r\n        camera\r\n            .position\r\n            .set(0, 0, 4);\r\n        const color = 'white';\r\n        const intensity = 1;\r\n        const light = new THREE.DirectionalLight(color, intensity);\r\n        light\r\n            .position\r\n            .set(0, 0, 3);\r\n        scene.add(light);\r\n\r\n  \r\n        window.addEventListener('resize', ()=>{\r\n            if(canvas.current !== null){\r\n            width = canvas.current.clientWidth\r\n            height = canvas.current.clientHeight\r\n            renderer.setSize(width, height);\r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix();\r\n        }\r\n        });\r\n        //media queries\r\n        let phoneViewCheck = (e)=>{\r\n            if(e.matches === true){\r\n                setSmartphoneView(true);\r\n            }\r\n            else{\r\n                setSmartphoneView(false);\r\n            }\r\n        }\r\n        phoneViewCheck(window.matchMedia(\"(max-width: 700px)\"));\r\n        window.matchMedia(\"(max-width: 700px)\").addEventListener('change', phoneViewCheck);\r\n\r\n\r\n        renderer.setSize(width, height)\r\n        canvas.current.appendChild(renderer.domElement)\r\n\r\n        const animate = ()=>{\r\n            renderer.render(scene, camera)\r\n            window.requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        setScene(\"Scene set\");\r\n    }\r\n    }, [scene])\r\n\r\n\r\n    let loggedIn = ()=>{\r\n        return(\r\n            <div style={{display: \"flex\"}}>\r\n            <div style={{display: \"grid\", alignItems:\"center\"}} >\r\n            <FontAwesomeIcon icon={faChild} />\r\n            </div>\r\n            <div style={{paddingLeft: \"2%\"}}>\r\n            <h2 style={style.loginButton} ref={loginFont}>{username}</h2>\r\n                    <div style={{height: \"2px\", width: \"100%\", background:\"white\",\r\n                     transform: \"scaleX(0)\", transition: \"all 0.3s ease-out\"}} ref={underlineLogin}></div>             \r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    let notLogged = ()=>{\r\n        return(\r\n            <div style={{display: \"flex\"}}>\r\n            <div style={{display: \"grid\", alignItems:\"center\"}} >\r\n            <FontAwesomeIcon icon={faChild} />\r\n            </div>            \r\n            <div style={{paddingLeft: \"2%\"}} >\r\n            <h2 style={style.loginButton} ref={loginFont}>LOGIN</h2>\r\n                    <div style={{height: \"2px\", width: \"100%\", background:\"white\",\r\n                     transform: \"scaleX(0)\", transition: \"all 0.3s ease-out\"}} ref={underlineLogin}></div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    const logOut = ()=>{\r\n         localStorage.clear()\r\n        window.location.reload();\r\n        \r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log(`Bearer ${localStorage.getItem('user')}`)\r\n        axios.post('http://localhost:8080/account', \r\n        {authorization: localStorage.getItem('user')},\r\n        {headers: {\r\n            // Overwrite Axios's automatically set Content-Type\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${localStorage.getItem('user')}`\r\n          }\r\n        }\r\n        )\r\n        .then(res => {\r\n            console.log(res);\r\n            let getUser = res.data.split(\" \");\r\n            setUsername(getUser[0]);\r\n            setLogged(true);\r\n          })\r\n          .catch(error => {\r\n            console.log(error)\r\n            setLogged(false);\r\n        })       \r\n    }, [])\r\n\r\n    let dropdown = ()=>{\r\n\r\n        if(hoverLogin !== 0){\r\n            loginFont.current.style.color = \"white\";\r\n            loginFont.current.style.textShadow = \"0 0 0 transparent, 0 0 0 transparent\";\r\n            underlineLogin.current.style.transform = \"scaleX(0)\";   \r\n            setHoverLogin(0);     \r\n        }\r\n        else{\r\n            loginFont.current.style.textShadow = \"0 0 10px white, 0 0 50px white\"\r\n            loginFont.current.style.color = \"white\";\r\n            underlineLogin.current.style.transform = \"scaleX(1)\";\r\n            setHoverLogin(1);\r\n        }\r\n    }\r\n    let showHomeButton = ()=>{\r\n        if(smartphoneView === false){\r\n        return(<div style={{display: \"grid\", alignItems: 'center', justifyContent: 'center'}}>\r\n        <div style={style.homeButton}\r\n        onMouseEnter={()=>{\r\n            homeFont.current.style.textShadow = \"0 0 10px white, 0 0 50px white\"\r\n            homeFont.current.style.color = \"white\";\r\n            underlineHome.current.style.transform = \"scaleX(1)\";\r\n        }}\r\n        onMouseLeave={()=>{\r\n            homeFont.current.style.color = \"white\";\r\n            homeFont.current.style.textShadow = \"0 0 0 transparent, 0 0 0 transparent\";\r\n            underlineHome.current.style.transform = \"scaleX(0)\";\r\n        }}\r\n        >\r\n            <h2 style={style.homeButton} ref={homeFont}>HOME</h2>\r\n            <div style={{height: \"2px\", width: \"100%\", background:\"white\",\r\n             transform: \"scaleX(0)\", transition: \"all 0.3s ease-out\"}} ref={underlineHome}></div>\r\n        </div>\r\n        </div>\r\n        )\r\n        }\r\n        else{\r\n            return(<div style={{display: \"grid\", alignItems: 'center', justifyContent: 'center'}}>\r\n            <div style={style.homeButton}\r\n            onMouseEnter={()=>{\r\n                homeFont.current.style.textShadow = \"0 0 10px white, 0 0 50px white\"\r\n                homeFont.current.style.color = \"white\";\r\n                underlineHome.current.style.transform = \"scaleX(1)\";\r\n            }}\r\n            onMouseLeave={()=>{\r\n                homeFont.current.style.color = \"white\";\r\n                homeFont.current.style.textShadow = \"0 0 0 transparent, 0 0 0 transparent\";\r\n                underlineHome.current.style.transform = \"scaleX(0)\";\r\n            }}\r\n            >\r\n                <div style={style.homeButton} ref={homeFont}>\r\n                    <FontAwesomeIcon icon={faHome} />\r\n                </div>\r\n                <div style={{height: \"2px\", width: \"100%\", background:\"white\",\r\n                 transform: \"scaleX(0)\", transition: \"all 0.3s ease-out\"}} ref={underlineHome}></div>\r\n            </div>\r\n            </div>   \r\n            )        \r\n        }\r\n    }\r\n    return(\r\n        <div className=\"navbar\" style={style.navbar}>\r\n            <div style={style.grid1}>{showHomeButton()}</div>\r\n            <div style={style.canvas} ref={canvas}></div>\r\n            <div style={style.grid1}>\r\n                <div style={{display: \"grid\", alignItems: 'center', justifyContent: 'center', position: \"relative\"}}>\r\n                <div\r\n                    onClick={()=>logged ? dropdown() : window.location.assign('http://localhost:3000/login')}\r\n                     style={style.loginButton}\r\n                     ref={loginButton}\r\n                     onMouseEnter={()=>{\r\n                        loginFont.current.style.textShadow = \"0 0 10px white, 0 0 50px white\"\r\n                        loginFont.current.style.color = \"white\";\r\n                        underlineLogin.current.style.transform = \"scaleX(1)\";\r\n                        setHoverLogin(1);\r\n                    }}\r\n                    onMouseLeave={()=>{\r\n                        loginFont.current.style.color = \"white\";\r\n                        loginFont.current.style.textShadow = \"0 0 0 transparent, 0 0 0 transparent\";\r\n                        underlineLogin.current.style.transform = \"scaleX(0)\";   \r\n                        setHoverLogin(0);               \r\n                    }}\r\n                    >{logged ? loggedIn() : notLogged() }</div>\r\n                 <div style={hoverLogin === 1 ? style.hoverLogin : {display: \"none\", visibility: \"hidden\"}}\r\n                  onMouseEnter={()=>setHoverLogin(1)} onMouseLeave={()=>setHoverLogin(0)}>\r\n                  <Link to={logged ? \"/account\" : \"/login\"}\r\n                   style={style.dropdown} onMouseEnter={(e)=>{\r\n                       e.currentTarget.style.backgroundColor = \"rgb(50, 30, 50)\";\r\n                       e.currentTarget.style.color = \"white\";\r\n                    }}\r\n                  onMouseLeave={(e)=>{\r\n                  e.currentTarget.style.backgroundColor = \"lightblue\";\r\n                  e.currentTarget.style.color = \"black\";\r\n                  }}>\r\n                <FontAwesomeIcon style={{color: \"rgb(29, 146, 226)\"}} icon={faDiagnoses} />\r\n                  <div style={{paddingLeft: \"2%\"}}>Account</div>\r\n                  </Link>\r\n                  <Link to={logged ? \"/leaderboard\" : \"/login\"} style={style.dropdown}\r\n                   onMouseEnter={(e)=>{\r\n                       e.currentTarget.style.backgroundColor = \"rgb(50, 30, 50)\";\r\n                       e.currentTarget.style.color = \"white\";\r\n                    }}\r\n                  onMouseLeave={(e)=>{ \r\n                  e.currentTarget.style.backgroundColor = \"lightblue\";\r\n                  e.currentTarget.style.color = \"black\";\r\n                  }}>\r\n                 <FontAwesomeIcon style={{color: \"rgb(125, 140, 40)\"}} icon={faTrophy} />\r\n                  <div style={{paddingLeft: \"2%\"}}>Leaderboard</div>\r\n                  </Link>\r\n                  <div onClick={logOut} style={style.dropdown}\r\n                   onMouseEnter={(e)=>{\r\n                       e.currentTarget.style.backgroundColor = \"rgb(50, 30, 50)\";\r\n                       e.currentTarget.style.color = \"white\";\r\n                    }}\r\n                  onMouseLeave={(e)=>{ \r\n                  e.currentTarget.style.backgroundColor = \"lightblue\";\r\n                  e.currentTarget.style.color = \"black\";\r\n                  }}>\r\n                  <FontAwesomeIcon style={{color: \"rgb(125, 140, 40)\"}} icon={faSignOutAlt} />\r\n                  <div style={{paddingLeft: \"2%\"}}>Log out</div>\r\n                  </div>        \r\n                 </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx",["54","55","56","57","58","59"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx",["60","61","62"],"import axios from 'axios';\r\nimport {useRef, useState, useEffect} from 'react'\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport * as THREE from \"three\";\r\n\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\nlet style = {\r\n    backgroundLogin: {\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        minHeight: '100vh',\r\n        maxHeight: '100vh',\r\n        display: 'grid',\r\n        color: 'white',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    loginForm: {\r\n        borderRadius: \"6px\",\r\n        minHeight: \"500px\",\r\n        maxHeight: \"500px\",\r\n        minWidth: \"360px\",\r\n        maxWidth: \"360px\",\r\n        //boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\",\r\n        backgroundColor: \"transparent\",\r\n        textShadow: \"6px 5px 4px #000000\",\r\n        //opacity: \"0.8\",\r\n        display: \"grid\",\r\n        zIndex: \"1\"\r\n    },\r\n    button: {\r\n        flex: '1',\r\n        cursor: 'pointer',\r\n        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\",\r\n        transition: \"0.5s ease-in-out\",\r\n        width: \"25%\",\r\n        height: \"30px\",\r\n        display: \"grid\",\r\n        position: \"relative\",\r\n        alignContent: \"center\",\r\n        left: \"37.5%\",\r\n        overflow: \"visible\",\r\n        background: \"darkorange\",\r\n        fontSize: \"80%\",\r\n        fontWeight: \"bold\",\r\n        margin: \"0\"\r\n    },\r\n    loadingAnimation: {\r\n        display: \"none\",\r\n        height: \"50px\",\r\n        width: \"50px\",\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginLeft: \"-27px\",\r\n        marginTop: \"-29px\", //Centers div\r\n        zIndex: \"2\",\r\n        borderRadius: \"50%\",\r\n    },\r\n    canvas:{\r\n        flex: \"1\",\r\n        zIndex: \"0\",\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        minWidth: \"100vw\",\r\n        maxHeight: \"100vh\", \r\n        maxWidth: \"100vw\",\r\n    },\r\n}\r\n\r\nconst Login = () => {\r\n    let input = useRef(null);\r\n    let password = useRef(null);\r\n    let [displayMessage,\r\n        setMessage] = useState(\"\");\r\n    let [signIn,\r\n        setSignIn] = useState(0);// STATE 0 = SIGNUP // STATE 1 = SIGNIN // STATE 2 = CHANGE PASSWORD\r\n    const [scene, setScene] = useState(\"Scene not set\");\r\n    let signInButton = useRef(0);\r\n    let underlineSignIn = useRef(0);\r\n    let signUpButton = useRef(0);\r\n    let underlineSignUp = useRef(0);\r\n    let switchButton = useRef(0);\r\n    let underlineSwitch = useRef(0);\r\n    let loadingAnimation = useRef(0);\r\n    let loginForm = useRef(0);\r\n    let canvas = useRef(0);\r\n    let shield = useRef(0);\r\n    let camera = useRef(0);\r\n    const [changePassword, setChangePassword] = useState(false);\r\n    let newPassword = useRef(0);\r\n    let repeatNewPassword = useRef(0);\r\n    const [fieldsAreValid, setFieldsAreValid] = useState(0);\r\n    const[logChecker, setLogChecker] = useState(false); //SENDS POST REQUEST ONCE SO THAT WHEN \r\n    //CONTENT IS RE RENDERED THE FUNCTION DOESNT KEEP SENDING REQUESTS TO THE SERVER\r\n\r\n\r\n    let validatorEmail = (value)=>{\r\n        const validEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if(validEmail.test(value)){\r\n            setFieldsAreValid(true);\r\n            setMessage(\"\");\r\n        }\r\n        else{\r\n            setFieldsAreValid(false);\r\n            setMessage(\"Wrong username/password\");\r\n        }\r\n    }\r\n    let validatorPassword = (value)=>{\r\n        const validPassword = /^(?=.*[A-Z])(?=.*[0-9].*[0-9])(?=.*[a-z].*[a-z].*[a-z]).{8,}$/;\r\n        if(validPassword.test(value)){\r\n            setFieldsAreValid(true);\r\n            setMessage(\"\");\r\n        }\r\n        else{\r\n            setFieldsAreValid(false);\r\n            setMessage(\"Password must be of at least 8 characters, including digits and one upper case letter\");\r\n        }\r\n       \r\n    }\r\n\r\n    let checkIfYouAreLogged = () => { // CHECKS IF USER IS LOGGED IN\r\n        if(logChecker === false){\r\n        axios.post('http://localhost:8080/account', {\r\n            authorization: localStorage.getItem('user')\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('user')}`\r\n            }\r\n        }).then(res => {\r\n            window\r\n                .location\r\n                .replace(\"http://localhost:3000\");\r\n        }).catch(error => {\r\n            setLogChecker(true);\r\n        })\r\n    }\r\n    };\r\n    checkIfYouAreLogged();\r\n    async function signUp() {\r\n        if(fieldsAreValid === true){\r\n        loadingAnimation.current.style.display = \"grid\";\r\n        loginForm.current.style.filter = \"blur(2px)\";\r\n        loginForm.current.style.pointerEvents = \"none\";\r\n        let date = new Date();\r\n        axios.post('http://localhost:8080/signup', {\r\n            username: input.current.value,\r\n            password: password.current.value,\r\n            date: `${date.getFullYear() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getDate()}`\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            setTimeout(()=>{\r\n            loadingAnimation.current.style.display = \"none\";\r\n            loginForm.current.style.filter = \"blur(0px)\";\r\n            loginForm.current.style.pointerEvents = \"auto\";\r\n            setMessage(res.data);\r\n            setSignIn(1);\r\n            }, 2000)\r\n        }).catch(error => {\r\n            setTimeout(()=>{\r\n            loadingAnimation.current.style.display = \"none\";\r\n            loginForm.current.style.filter = \"blur(0px)\";\r\n            loginForm.current.style.pointerEvents = \"auto\";\r\n            setMessage(error.response.data.message);\r\n            }, 2000);\r\n        })\r\n    }\r\n    }\r\n    async function login() {\r\n        loadingAnimation.current.style.display = \"grid\";\r\n        loginForm.current.style.filter = \"blur(2px)\";\r\n        loginForm.current.style.pointerEvents = \"none\";\r\n        axios.post('http://localhost:8080/signin', {\r\n            username: input.current.value,\r\n            password: password.current.value\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            console.log(res);\r\n            //GET USERNAME AND TOKEN, USERNAME IN ONE AND TOKEN IN SECOND\r\n            setTimeout(()=>{\r\n            loadingAnimation.current.style.display = \"none\";\r\n            loginForm.current.style.filter = \"blur(0px)\";\r\n            loginForm.current.style.pointerEvents = \"auto\";\r\n            let [user,\r\n                token] = JSON\r\n                .stringify(res.data)\r\n                .split(\"/n\");\r\n            localStorage.setItem('user', token.slice(0, -1));\r\n            setMessage(\"Login succesful!\");\r\n            window\r\n                .location\r\n                .replace(\"http://localhost:3000\");\r\n            }, 2000);\r\n        }).catch(error => {\r\n            setTimeout(()=>{\r\n            loadingAnimation.current.style.display = \"none\";\r\n            loginForm.current.style.filter = \"blur(0px)\";\r\n            loginForm.current.style.pointerEvents = \"auto\";\r\n            console.log(error)\r\n            }, 2000);\r\n            //setMessage(error.response.data.message);\r\n        })\r\n    }\r\n    async function changeYourPassword() {\r\n        if(newPassword.current.value === repeatNewPassword.current.value){\r\n        loadingAnimation.current.style.display = \"grid\";\r\n        loginForm.current.style.filter = \"blur(2px)\";\r\n        loginForm.current.style.pointerEvents = \"none\";\r\n        axios.post('http://localhost:8080/changepassword', {\r\n            username: input.current.value,\r\n            password: password.current.value,\r\n            newPassword: newPassword.current.value \r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => {\r\n            console.log(res);\r\n            //GET USERNAME AND TOKEN, USERNAME IN ONE AND TOKEN IN SECOND\r\n            setTimeout(()=>{\r\n            loadingAnimation.current.style.display = \"none\";\r\n            loginForm.current.style.filter = \"blur(0px)\";\r\n            loginForm.current.style.pointerEvents = \"auto\";\r\n            let [user,\r\n                token] = JSON\r\n                .stringify(res.data)\r\n                .split(\"/n\");\r\n            localStorage.setItem('user', token.slice(0, -1));\r\n            setMessage(\"Login succesful!\");\r\n            window\r\n                .location\r\n                .replace(\"http://localhost:3000\");\r\n            }, 2000);\r\n        }).catch(error => {\r\n            setTimeout(()=>{\r\n            loadingAnimation.current.style.display = \"none\";\r\n            loginForm.current.style.filter = \"blur(0px)\";\r\n            loginForm.current.style.pointerEvents = \"auto\";\r\n            console.log(error)\r\n            }, 2000);\r\n            //setMessage(error.response.data.message);\r\n        })\r\n    }\r\n    else{\r\n        setMessage(\"Frick!, the passwords do not match\");\r\n    }\r\n    }\r\n    // THREEJS BACKGROUND \r\n    useEffect(()=>{\r\n        if(scene === \"Scene not set\"){\r\n        let height = canvas.current.clientHeight\r\n        let width = canvas.current.clientWidth\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        camera.current = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer();\r\n        camera.current\r\n            .position\r\n            .set(0, 0, 2);\r\n        camera.current\r\n            .rotation\r\n            .set(0, 0, 0);\r\n        /*let controls = new OrbitControls(camera, renderer.domElement);\r\n            controls\r\n                .target\r\n                .set(0, 0, -2)*/\r\n        const color = 'white';\r\n        const intensity = 1;\r\n        const light = new THREE.DirectionalLight(color, intensity);\r\n        light\r\n            .position\r\n            .set(0, 0, 3);\r\n        scene.add(light);\r\n        //scene.background = new THREE.Color(0x6B8E23);\r\n        //SKYBOX CUBE \r\n        //https://opengameart.org/content/cloudy-skyboxes \r\n        //TEXTURE OF THE CUBE\r\n        let materialArray = [];\r\n        let texture_ft = new THREE.TextureLoader().load( '/skyboxImage/ft.jpg');\r\n        let texture_bk = new THREE.TextureLoader().load( '/skyboxImage/bk.jpg');\r\n        let texture_up = new THREE.TextureLoader().load( '/skyboxImage/up.jpg');\r\n        let texture_dn = new THREE.TextureLoader().load( '/skyboxImage/dn.jpg');\r\n        let texture_rt = new THREE.TextureLoader().load( '/skyboxImage/rt.jpg');\r\n        let texture_lf = new THREE.TextureLoader().load( '/skyboxImage/Lf.jpg');\r\n          \r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_ft }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_bk }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_up }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_dn }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_rt }));\r\n        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_lf }));\r\n           \r\n        for (let i = 0; i < 6; i++)\r\n          materialArray[i].side = THREE.BackSide;\r\n\r\n\r\n\r\n        let geometry = new THREE.BoxGeometry( 25, 25, 25 );\r\n        //let material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );\r\n        let cube = new THREE.Mesh( geometry, materialArray );\r\n        cube.position.x = 0; cube.position.y = 0; cube.position.z = 0; cube.rotation.x = Math.PI / 2;\r\n        scene.add( cube );\r\n\r\n\r\n        //IMPORT SHIELD EXPORTED FROM BLENDER AS GLB\r\n        const loader = new GLTFLoader();\r\n        loader.load(\"shield.glb\", function (object) {\r\n            object.scene.position.x = 0.15;\r\n            object.scene.position.y = -0.96489601753;\r\n            object.scene.position.z = -4;\r\n            object.scene.rotation.set(0, 0, 0);\r\n            /*object\r\n                .scene\r\n                .scale\r\n                .set(0.3, 0.3, 0.3)*/\r\n            shield.current = object;\r\n            scene.add(object.scene);\r\n            let box = new THREE\r\n            .Box3()\r\n            .setFromObject(shield.current.scene);\r\n            console.log(box.getSize());//GET SHIELD SIZE = 3.85958407013199    \r\n        });\r\n\r\n\r\n        window.addEventListener('resize', ()=>{\r\n            if(canvas.current !== null){\r\n            width = canvas.current.clientWidth\r\n            height = canvas.current.clientHeight\r\n            renderer.setSize(width, height);\r\n            camera.current.aspect = width / height;\r\n            camera.current.updateProjectionMatrix();\r\n        }\r\n        });\r\n        renderer.setSize(width, height)\r\n        canvas.current.appendChild(renderer.domElement)\r\n\r\n        const animate = ()=>{\r\n            renderer.render(scene, camera.current)\r\n            window.requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        setScene(\"Scene set\")\r\n    }\r\n    },[scene]);\r\n\r\n    //TRACK MOUSE MOVEMENT AND ROTATE FORM AND SHIELD\r\n    let mouseMove = (e)=>{\r\n        let mousex = (e.clientX   - ( canvas.current.getBoundingClientRect().left / 2)) ;\r\n        let mousey = (e.clientY  - ( canvas.current.getBoundingClientRect().top / 2)) ;\r\n        let x = mousex - canvas.current.getBoundingClientRect().width / 2 ;\r\n        let y = canvas.current.getBoundingClientRect().height / 2 - mousey ;\r\n        loginForm.current.style.transform = `perspective(700px) rotateY(${x / 100}deg) rotateX(${ y / 100}deg)`;\r\n        console.log(camera.current.position.x);\r\n        camera.current.rotation.y = (x / 1000) * (Math.PI / 180);\r\n        camera.current.rotation.x = -(y / 1000) * (Math.PI / 180);\r\n        shield.current.scene.rotation.y = (x / 100) * (Math.PI / 180);\r\n        shield.current.scene.rotation.x = -(y / 100) * (Math.PI / 180);\r\n    }\r\n\r\n    let checkButtons = ()=>{\r\n        if(signIn === 1){\r\n            return <div\r\n                    style={style.button}\r\n                    onClick={() => login()}\r\n                    onMouseEnter={() => {\r\n                    underlineSignIn.current.style.transform = \"scaleX(1)\";\r\n                }}\r\n                    onMouseLeave={() => {\r\n                    underlineSignIn.current.style.transform = \"scaleX(0)\";\r\n                }}>\r\n                    <h2\r\n                        style={{\r\n                        flex: '1',\r\n                        cursor: 'pointer',\r\n                        transition: \"0.5s ease-in-out\",\r\n                        textShadow: \"6px 5px 4px #000000\",\r\n                        overflow: \"visible\",\r\n                        textAlign: \"center\",\r\n                        margin: \"0\"\r\n                    }}\r\n                        ref={signInButton}>Sign in</h2>\r\n                    <div\r\n                        style={{\r\n                        height: \"2px\",\r\n                        position: \"relative\",\r\n                        width: \"80%\",\r\n                        left: \"10%\",\r\n                        background: \"black\",\r\n                        transform: \"scaleX(0)\",\r\n                        transition: \"all 0.3s ease-out\"\r\n                    }}\r\n                        ref={underlineSignIn}></div>\r\n                </div>\r\n            }\r\n            else if(signIn === 0){\r\n            return <div\r\n                style={style.button}\r\n                onClick={() => signUp()}\r\n                onMouseEnter={() => {\r\n                underlineSignUp.current.style.transform = \"scaleX(1)\";\r\n            }}\r\n                onMouseLeave={() => {\r\n                underlineSignUp.current.style.transform = \"scaleX(0)\";\r\n            }}>\r\n                <h2\r\n                    style={{\r\n                    flex: '1',\r\n                    cursor: 'pointer',\r\n                    transition: \"0.5s ease-in-out\",\r\n                    textShadow: \"6px 5px 4px #000000\",\r\n                    overflow: \"visible\",\r\n                    textAlign: \"center\",\r\n                    margin: \"0\"\r\n                }}\r\n                    ref={signUpButton}>Sign up</h2>\r\n                <div\r\n                    style={{\r\n                    height: \"2px\",\r\n                    position: \"relative\",\r\n                    width: \"80%\",\r\n                    left: \"10%\",\r\n                    background: \"black\",\r\n                    transform: \"scaleX(0)\",\r\n                    transition: \"all 0.3s ease-out\"\r\n                }}\r\n                    ref={underlineSignUp}></div>\r\n            </div>\r\n            }\r\n            else if(signIn === 2){\r\n            return <div\r\n                style={style.button}\r\n                onClick={() => changeYourPassword()}\r\n                onMouseEnter={() => {\r\n                underlineSignUp.current.style.transform = \"scaleX(1)\";\r\n            }}\r\n                onMouseLeave={() => {\r\n                underlineSignUp.current.style.transform = \"scaleX(0)\";\r\n            }}>\r\n                <h2\r\n                    style={{\r\n                    flex: '1',\r\n                    cursor: 'pointer',\r\n                    transition: \"0.5s ease-in-out\",\r\n                    textShadow: \"6px 5px 4px #000000\",\r\n                    overflow: \"visible\",\r\n                    textAlign: \"center\",\r\n                    margin: \"0\"\r\n                }}\r\n                    ref={signUpButton}>Submit</h2>\r\n                <div\r\n                    style={{\r\n                    height: \"2px\",\r\n                    position: \"relative\",\r\n                    width: \"80%\",\r\n                    left: \"10%\",\r\n                    background: \"black\",\r\n                    transform: \"scaleX(0)\",\r\n                    transition: \"all 0.3s ease-out\"\r\n                }}\r\n                    ref={underlineSignUp}></div>\r\n            </div>\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div style={style.backgroundLogin}>\r\n            <div style={style.canvas} onMouseMove={(e)=>mouseMove(e)} ref={canvas}></div>\r\n            <div className= \"spinner\" style={style.loadingAnimation} ref={loadingAnimation}></div>\r\n            <div style={style.loginForm} onMouseMove={(e)=>mouseMove(e)} ref={loginForm}>\r\n                <div\r\n                    style={{\r\n                    display: \"grid\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    fontWeight: \"bold\",\r\n                }}>Welcome back!</div>\r\n                <div>\r\n                    <div style={{\r\n                        fontWeight: \"bold\"\r\n                    }}>Email</div>\r\n                    <input\r\n                        ref={input}\r\n                        onChange={(e)=>validatorEmail(e.currentTarget.value)}\r\n                        type=\"email\"\r\n                        autoComplete=\"email\"\r\n                        spellCheck=\"false\"\r\n                        autoCapitalize=\"none\"\r\n                        style={{\r\n                        paddingLeft: \"2%\",\r\n                        paddingRight: \"2%\",\r\n                        height: \"50%\",\r\n                        width: \"94%\",\r\n                        border: \"none\",\r\n                        margin: \"1%\",\r\n                        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\"\r\n                    }}></input>\r\n                </div>\r\n                <div>\r\n                    <div style={{\r\n                        fontWeight: \"bold\"\r\n                    }}>Password</div>\r\n                    <input\r\n                        ref={password}\r\n                        onChange={(e)=>validatorPassword(e.currentTarget.value)}\r\n                        type=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        spellCheck=\"false\"\r\n                        autoCapitalize=\"none\"\r\n                        style={{\r\n                        paddingLeft: \"2%\",\r\n                        paddingRight: \"2%\",\r\n                        height: \"50%\",\r\n                        width: \"94%\",\r\n                        border: \"none\",\r\n                        margin: \"1%\",\r\n                        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\"\r\n                    }}></input>\r\n                </div>\r\n                <div style={changePassword ? {display: \"\"} : {display: \"none\"}}>\r\n                    <div style={{\r\n                        fontWeight: \"bold\"\r\n                    }}>New password</div>\r\n                    <input\r\n                        ref={newPassword}\r\n                        onChange={(e)=>validatorPassword(e.currentTarget.value)}\r\n                        type=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        spellCheck=\"false\"\r\n                        autoCapitalize=\"none\"\r\n                        style={{\r\n                        paddingLeft: \"2%\",\r\n                        paddingRight: \"2%\",\r\n                        height: \"50%\",\r\n                        width: \"94%\",\r\n                        border: \"none\",\r\n                        margin: \"1%\",\r\n                        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\"\r\n                    }}></input>\r\n                </div>\r\n                <div style={changePassword ? {display: \"\"} : {display: \"none\"}}>\r\n                    <div style={{\r\n                        fontWeight: \"bold\"\r\n                    }}>Repeat new password</div>\r\n                    <input\r\n                        ref={repeatNewPassword}\r\n                        onChange={(e)=>validatorPassword(e.currentTarget.value)}\r\n                        type=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        spellCheck=\"false\"\r\n                        autoCapitalize=\"none\"\r\n                        style={{\r\n                        paddingLeft: \"2%\",\r\n                        paddingRight: \"2%\",\r\n                        height: \"50%\",\r\n                        width: \"94%\",\r\n                        border: \"none\",\r\n                        margin: \"1%\",\r\n                        boxShadow: \"2px 2px 2px 0px rgb(70, 70, 70), 5px 5px 6px 0px #000000\"\r\n                    }}></input>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                    display: \"grid\",\r\n                    alignItems: \"center\"\r\n                }}> {checkButtons()/*CHECKS IF SIGN IN; SIGN UP OR SUBMIT IS DISPLAYED*/}\r\n                </div>\r\n                <div\r\n                    style={{\r\n                    height: \"20px\",\r\n                    margin: \"2%\",\r\n                    textAlign: \"center\"\r\n                }}>{displayMessage /*LOGIN MESSAGES, SUCCESFUL OR NOT*/}</div>\r\n                <div style={{textDecoration: \"underline\", cursor: \"default\", display: \"grid\", justifyContent: \"left\", alignContent: \"start\"}}>\r\n                    <h3 style={{margin: \"0\", fontSize: \"100%\", cursor: \"pointer\"}} onClick={()=>{\r\n                    if(changePassword === false){\r\n                    loadingAnimation.current.style.display = \"grid\";\r\n                    loginForm.current.style.pointerEvents = \"none\";\r\n                    loginForm.current.style.filter = \"blur(2px)\";\r\n                    newPassword.current.value = \"\";\r\n                    repeatNewPassword.current.value = \"\";\r\n                    setTimeout(()=>{\r\n                        loadingAnimation.current.style.display = \"none\";\r\n                        loginForm.current.style.pointerEvents = \"auto\";\r\n                        loginForm.current.style.filter = \"blur(0px)\";\r\n                        setChangePassword(true);\r\n                        setSignIn(2);\r\n                    }, 1000)\r\n                }\r\n                }}>{signIn ? \"Change password\" : \"\"}</h3>\r\n                    </div>\r\n                <div\r\n                    style={{\r\n                    margin: \"2%\",\r\n                    fontWeight: \"bold\"\r\n                }}>{signIn\r\n                        ? \"If you don't have an account sign up here:\"\r\n                        : \"If you already have an account login here:\"}</div>\r\n                <div\r\n                    style={style.button}\r\n                    onClick={() =>{\r\n                        switch(signIn){\r\n                            case 0:\r\n                                setSignIn(1);\r\n                                break;\r\n                            case 1:\r\n                                setSignIn(0);\r\n                                setChangePassword(false);\r\n                                break;\r\n                            case 2: \r\n                                setSignIn(0);\r\n                                setChangePassword(false);\r\n                                break;\r\n                            default:\r\n                        }\r\n                    }}\r\n                    onMouseEnter={() => {\r\n                    underlineSwitch.current.style.transform = \"scaleX(1)\";\r\n                }}\r\n                    onMouseLeave={() => {\r\n                    underlineSwitch.current.style.transform = \"scaleX(0)\";\r\n                }}>\r\n                    <h2\r\n                        style={{\r\n                        flex: '1',\r\n                        cursor: 'pointer',\r\n                        transition: \"0.5s ease-in-out\",\r\n                        textShadow: \"6px 5px 4px #000000\",\r\n                        overflow: \"visible\",\r\n                        textAlign: \"center\",\r\n                        margin: \"0\"\r\n                    }}\r\n                        ref={switchButton}>{signIn\r\n                            ? \"Sign up\"\r\n                            : \"Sign in\"}</h2>\r\n                    <div\r\n                        style={{\r\n                        height: \"2px\",\r\n                        position: \"relative\",\r\n                        width: \"80%\",\r\n                        left: \"10%\",\r\n                        background: \"black\",\r\n                        transform: \"scaleX(0)\",\r\n                        transition: \"all 0.3s ease-out\"\r\n                    }}\r\n                        ref={underlineSwitch}></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx",["63","64","65","66"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx",["67","68","69","70","71"],"import axios from 'axios';\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport * as THREE from \"three\";\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport {Redirect} from 'react-router';\r\n\r\nlet style = {\r\n    backgroundAccount: {\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        minHeight: '100vh',\r\n        maxHeight: '100vh',\r\n        marginTop: \"6.5rem\",\r\n        backgroundColor: 'red',\r\n        display: 'grid',\r\n        color: 'black',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    insideAccount: {\r\n        minHeight: \"550px\",\r\n        maxHeight: \"100%\",\r\n        minWidth: \"360px\",\r\n        maxWidth: \"100%\",\r\n        backgroundColor: \"white\",\r\n        display: \"grid\"\r\n    },\r\n    canvas:{\r\n        flex: \"1\",\r\n        minHeight: \"100px\",\r\n        minWidth: \"350px\",\r\n        maxHeight: \"100%\", \r\n        maxWidth: \"100%\",\r\n    },\r\n}\r\n\r\nconst Account = () => {\r\n    const input = useRef(null);\r\n    const [userInfo,\r\n        setUserInfo] = useState(\"\");\r\n    const [joinedDate, setJoinedDate] = useState(\"\");\r\n    const [maxScore, setMaxScore] = useState(\"\");\r\n    let canvas = useRef(0);\r\n    const[logChecker, setLogChecker] = useState(false); //SENDS POST REQUEST ONCE \r\n\r\n    let checkIfYouAreLogged = () => { // CHECKS IF USER IS LOGGED IN\r\n        if(logChecker === false){\r\n        axios.post('http://localhost:8080/accountdetails', {\r\n            authorization: localStorage.getItem('user')\r\n        }, {\r\n            headers: {\r\n                // Overwrite Axios's automatically set Content-Type\r\n                'Content-Type': 'application/json',\r\n                'authorization': `Bearer ${localStorage.getItem('user')}`\r\n                }\r\n            })\r\n            .then(res => {\r\n                let [user, date, score] = JSON.stringify(res.data).split(\",\");\r\n                setUserInfo(user.slice(1, user.length));\r\n                setJoinedDate(date);\r\n                setMaxScore(score.slice(0, -1));\r\n                setLogChecker(true);\r\n            })\r\n            .catch(error => {\r\n             window.location.assign('http://localhost:3000/login')\r\n            })\r\n        }\r\n    };\r\n    checkIfYouAreLogged();\r\n\r\n        /*useEffect(()=>{    \r\n        //AVATAR\r\n        let obj;\r\n        const loader = new OBJLoader();\r\n        loader.load( 'earth.obj', ( object )=>{\r\n            object.position.x = 0;\r\n            object.position.y = -1.5;\r\n            object.position.z = -4;\r\n            console.log(object)\r\n            obj = object;\r\n            scene.add( obj );\r\n        } );\r\n            let height = canvas.current.clientHeight\r\n            let width = canvas.current.clientWidth\r\n            let raycaster = new THREE.Raycaster();\r\n            let mouse = new THREE.Vector2();\r\n            let pointOfIntersection = new THREE.Vector3();\r\n            let plane = new THREE.Plane(new THREE.Vector3(0, 0, 0.5), 0.5);\r\n            //const helper = new THREE.PlaneHelper( plane, 10, 0xffff00 ); DEBUGGING TO SEE THE PLANE\r\n    \r\n            canvas.current.onmousemove = (e)=>{\r\n                mouse.x = ((e.clientX - canvas.current.offsetLeft) / width) *2 -1;\r\n                mouse.y = - ( (e.clientY - canvas.current.offsetTop) / height) * 2 + 1;\r\n                raycaster.setFromCamera(mouse, camera);\r\n                raycaster.ray.intersectPlane(plane, pointOfIntersection);\r\n                obj.lookAt(pointOfIntersection);       \r\n            }\r\n    \r\n            const scene = new THREE.Scene();\r\n            //scene.add(helper) ONLY FOR DEBUGGING\r\n            const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n            const renderer = new THREE.WebGLRenderer();\r\n            camera\r\n                .position\r\n                .set(0, 0, 4);\r\n            const color = 'white';\r\n            const intensity = 1;\r\n            const light = new THREE.DirectionalLight(color, intensity);\r\n            light\r\n                .position\r\n                .set(0, 0, 3);\r\n            scene.add(light);\r\n            scene.background = new THREE.Color(0x006400);\r\n      \r\n            window.addEventListener('resize', ()=>{\r\n                if(canvas.current !== null){\r\n                width = canvas.current.clientWidth\r\n                height = canvas.current.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.aspect = width / height;\r\n                camera.updateProjectionMatrix();\r\n            }\r\n            });\r\n            renderer.setSize(width, height)\r\n            canvas.current.appendChild(renderer.domElement)\r\n    \r\n            const animate = ()=>{\r\n                renderer.render(scene, camera)\r\n                window.requestAnimationFrame(animate);\r\n            }\r\n            animate()\r\n        },[])*/\r\n\r\n    return (\r\n        <div style={style.backgroundAccount}>\r\n            <div style={style.insideAccount}>\r\n                <div style={{display: \"flex\", overflow: \"hidden\"}}>\r\n                    <div style={style.canvas} ref={canvas}></div>\r\n                    <div style={{display: \"grid\", flex: \"1\"}}>\r\n                        <div>{userInfo}</div>\r\n                        <div>{joinedDate}</div>\r\n                        <div>{maxScore}</div>\r\n                    </div>\r\n                </div>\r\n                <div>Stop</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Account",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":6,"column":8,"nodeType":"78","messageId":"79","endLine":6,"endColumn":13},{"ruleId":"76","severity":1,"message":"80","line":9,"column":20,"nodeType":"78","messageId":"79","endLine":9,"endColumn":26},{"ruleId":"76","severity":1,"message":"81","line":15,"column":10,"nodeType":"78","messageId":"79","endLine":15,"endColumn":19},{"ruleId":"76","severity":1,"message":"82","line":22,"column":15,"nodeType":"78","messageId":"79","endLine":22,"endColumn":23},{"ruleId":"76","severity":1,"message":"83","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":20},{"ruleId":"76","severity":1,"message":"84","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":19},{"ruleId":"76","severity":1,"message":"85","line":113,"column":13,"nodeType":"78","messageId":"79","endLine":113,"endColumn":22},{"ruleId":"76","severity":1,"message":"86","line":114,"column":13,"nodeType":"78","messageId":"79","endLine":114,"endColumn":18},{"ruleId":"76","severity":1,"message":"87","line":115,"column":13,"nodeType":"78","messageId":"79","endLine":115,"endColumn":32},{"ruleId":"76","severity":1,"message":"88","line":116,"column":13,"nodeType":"78","messageId":"79","endLine":116,"endColumn":18},{"ruleId":"76","severity":1,"message":"89","line":4,"column":9,"nodeType":"78","messageId":"79","endLine":4,"endColumn":19},{"ruleId":"76","severity":1,"message":"90","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":26},{"ruleId":"76","severity":1,"message":"91","line":14,"column":7,"nodeType":"78","messageId":"79","endLine":14,"endColumn":20},{"ruleId":"76","severity":1,"message":"92","line":91,"column":9,"nodeType":"78","messageId":"79","endLine":91,"endColumn":28},{"ruleId":"76","severity":1,"message":"93","line":92,"column":9,"nodeType":"78","messageId":"79","endLine":92,"endColumn":27},{"ruleId":"76","severity":1,"message":"94","line":101,"column":9,"nodeType":"78","messageId":"79","endLine":101,"endColumn":21},{"ruleId":"76","severity":1,"message":"91","line":6,"column":7,"nodeType":"78","messageId":"79","endLine":6,"endColumn":20},{"ruleId":"76","severity":1,"message":"95","line":194,"column":18,"nodeType":"78","messageId":"79","endLine":194,"endColumn":22},{"ruleId":"76","severity":1,"message":"95","line":235,"column":18,"nodeType":"78","messageId":"79","endLine":235,"endColumn":22},{"ruleId":"76","severity":1,"message":"91","line":10,"column":7,"nodeType":"78","messageId":"79","endLine":10,"endColumn":20},{"ruleId":"76","severity":1,"message":"96","line":74,"column":19,"nodeType":"78","messageId":"79","endLine":74,"endColumn":24},{"ruleId":"76","severity":1,"message":"97","line":75,"column":19,"nodeType":"78","messageId":"79","endLine":75,"endColumn":28},{"ruleId":"76","severity":1,"message":"98","line":77,"column":19,"nodeType":"78","messageId":"79","endLine":77,"endColumn":28},{"ruleId":"76","severity":1,"message":"81","line":2,"column":9,"nodeType":"78","messageId":"79","endLine":2,"endColumn":18},{"ruleId":"76","severity":1,"message":"99","line":3,"column":13,"nodeType":"78","messageId":"79","endLine":3,"endColumn":18},{"ruleId":"76","severity":1,"message":"84","line":4,"column":10,"nodeType":"78","messageId":"79","endLine":4,"endColumn":19},{"ruleId":"76","severity":1,"message":"100","line":5,"column":9,"nodeType":"78","messageId":"79","endLine":5,"endColumn":17},{"ruleId":"76","severity":1,"message":"101","line":38,"column":11,"nodeType":"78","messageId":"79","endLine":38,"endColumn":16},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'useEffect' is defined but never used.","'setValue' is assigned a value but never used.","'useContext' is defined but never used.","'OBJLoader' is defined but never used.","'raycaster' is assigned a value but never used.","'mouse' is assigned a value but never used.","'pointOfIntersection' is assigned a value but never used.","'plane' is assigned a value but never used.","'GLTFLoader' is defined but never used.","'SimplifyModifier' is defined but never used.","'OrbitControls' is assigned a value but never used.","'angleSphereForgrass' is assigned a value but never used.","'grassRotationAngle' is assigned a value but never used.","'titleYoutube' is assigned a value but never used.","'user' is assigned a value but never used.","'color' is assigned a value but never used.","'colorMoon' is assigned a value but never used.","'intensity' is assigned a value but never used.","'THREE' is defined but never used.","'Redirect' is defined but never used.","'input' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]