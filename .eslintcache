[{"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js":"1","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js":"2","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js":"3","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx":"4","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx":"5","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx":"6","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx":"7","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx":"8","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":1173,"mtime":1609529909435,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":11131,"mtime":1609783461649,"results":"14","hashOfConfig":"11"},{"size":14791,"mtime":1609820605122,"results":"15","hashOfConfig":"11"},{"size":1819,"mtime":1609529921801,"results":"16","hashOfConfig":"11"},{"size":91,"mtime":1607656069637,"results":"17","hashOfConfig":"11"},{"size":10207,"mtime":1609950143909,"results":"18","hashOfConfig":"11"},{"size":1682,"mtime":1609095910141,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1na3gvm",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\index.js",[],["43","44"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\App.js",["45"],"import './App.css';\nimport HomeScreen from './components/homeScreen';\nimport Navbar from './components/navbar';\nimport Login from './components/login';\nimport Game from './components/game'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  BrowserRouter\n} from \"react-router-dom\";\nimport { PageContext } from './pageContext'\nimport { useState } from 'react';\nimport Account from './components/account';\n\nfunction App() {\n\nconst [value, setValue] = useState(\"HomePage\")\n  \n  return (\n    <BrowserRouter>\n    <Switch>\n    <PageContext.Provider value={{value, setValue}}>  \n    <Route exact path=\"/\" render = {props =>\n      <div className=\"App\">\n      <Navbar/>\n      <HomeScreen/>\n      </div>\n    }></Route>\n    <Route exact path=\"/login\" render= {props =>\n    <div>\n      <Login/>\n    </div>\n    }></Route>\n     <Route exact path=\"/game\" render= {props =>\n    <div className=\"App\">\n      <Navbar/>\n      <Game/>\n    </div>\n    }></Route>\n    <Route exact path=\"/account\" render= {props =>\n    <div className=\"App\">\n      <Navbar/>\n      <Account/>\n    </div>\n    }></Route>\n    </PageContext.Provider>\n    </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\reportWebVitals.js",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\navbar.jsx",["46"],"/* eslint-disable no-use-before-define */\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n  import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n  import { faChild, faDiagnoses, faTrophy, faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\r\nlet style = {\r\n    navbar: {\r\n        backgroundColor: \"olivedrab\",\r\n        position: \"fixed\",\r\n        zIndex: \"50\",\r\n        width: \"100%\",\r\n        color: 'white',\r\n        display: 'flex',\r\n        height: '6.5rem'\r\n    },\r\n    grid1: {\r\n        display: 'flex',\r\n        flex: '1',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    canvas:{\r\n        flex: \"1\",\r\n        minHeight: \"100px\",\r\n        minWidth: \"350px\",\r\n        maxHeight: \"100%\", \r\n        maxWidth: \"100%\",\r\n    },\r\n    grid2:{\r\n        flex: '1'\r\n    },\r\n    homeButton:{\r\n        flex: '1', cursor: 'pointer', transition: \"0.5s ease-in-out\",\r\n        color: \"white\",\r\n        textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n        overflow: \"visible\",\r\n        fontSize: \"1.3rem\",\r\n        fontWeight:\"bold\",\r\n        margin: \"0\"\r\n    },\r\n    loginButton:{\r\n        flex: '1', cursor: 'pointer', transition: \"0.5s ease-in-out\",\r\n        color: \"white\",\r\n        textShadow: \"0 0 0 transparent, 0 0 0 transparent\",\r\n        overflow: \"visible\",\r\n        fontSize: \"1.3rem\",\r\n        fontWeight:\"bold\",\r\n        textDecoration: \"none\",\r\n        margin: \"0\"\r\n    },\r\n    hoverLogin:{\r\n        visibility: \"visible\",\r\n        backgroundColor: \"lightblue\",\r\n        position: \"absolute\",\r\n        color: \"white\", \r\n        top: \"100%\",\r\n        minWidth: \"200px\",\r\n        maxWidth: \"200px\",\r\n        fontSize:\"1rem\",\r\n        right: \"0%\",\r\n        transition: \"all 0.5s ease-out\",\r\n        zIndex: \"2\",\r\n        border: \"1px solid white\"\r\n    },\r\n    dropdown:{\r\n        display: \"flex\",\r\n        height: \"50px\",\r\n        fontWeight: \"bold\",\r\n        alignItems: 'center',\r\n        cursor: \"pointer\",\r\n        border: \"0.8px solid white\",\r\n        transition: \"all 0.5s ease-out\",\r\n        color: \"black\",\r\n        textDecoration: \"none\"\r\n    }\r\n}\r\n\r\nconst Navbar = ()=>{\r\n    const canvas = useRef(null);\r\n    const [scene, setScene] = useState(\"Scene not set\");\r\n    useEffect(()=>{\r\n        if(scene === \"Scene not set\"){\r\n\r\n    let manager = new THREE.LoadingManager();\r\n    manager.onProgress = ( item, loaded, total )=>{\r\n\r\n        console.log( item, loaded, total );\r\n\r\n    };\r\n\r\n    //DRAGON\r\n    let obj;\r\n    const loader = new OBJLoader(manager);\r\n    loader.load( 'earth.obj', function ( object ) {\r\n        object.position.x = 0;\r\n        object.position.y = -1.5;\r\n        object.position.z = -4;\r\n        console.log(object)\r\n        obj = object;\r\n        scene.add( obj );\r\n    } );\r\n        let height = canvas.current.clientHeight\r\n        let width = canvas.current.clientWidth\r\n        let raycaster = new THREE.Raycaster();\r\n        let mouse = new THREE.Vector2();\r\n        let pointOfIntersection = new THREE.Vector3();\r\n        let plane = new THREE.Plane(new THREE.Vector3(0, 0, 0.5), 0.5);\r\n        //const helper = new THREE.PlaneHelper( plane, 10, 0xffff00 ); DEBUGGING TO SEE THE PLANE\r\n\r\n        canvas.current.onmousemove = (e)=>{\r\n            mouse.x = ((e.clientX - canvas.current.offsetLeft) / width) *2 -1;\r\n            mouse.y = - ( (e.clientY - canvas.current.offsetTop) / height) * 2 + 1;\r\n            raycaster.setFromCamera(mouse, camera);\r\n            raycaster.ray.intersectPlane(plane, pointOfIntersection);\r\n            obj.lookAt(pointOfIntersection);       \r\n        }\r\n\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .position\r\n            .set(0, 0, 4);\r\n        const color = 'white';\r\n        const intensity = 1;\r\n        const light = new THREE.DirectionalLight(color, intensity);\r\n        light\r\n            .position\r\n            .set(0, 0, 3);\r\n        scene.add(light);\r\n        scene.background = new THREE.Color(0x6B8E23);\r\n  \r\n        window.addEventListener('resize', ()=>{\r\n            if(canvas.current !== null){\r\n            width = canvas.current.clientWidth\r\n            height = canvas.current.clientHeight\r\n            renderer.setSize(width, height);\r\n            camera.aspect = width / height;\r\n            camera.updateProjectionMatrix();\r\n        }\r\n        });\r\n        renderer.setSize(width, height)\r\n        canvas.current.appendChild(renderer.domElement)\r\n\r\n        const animate = ()=>{\r\n            renderer.render(scene, camera)\r\n            window.requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        setScene(\"Scene set\")\r\n    }\r\n    }, [scene])\r\n\r\n    const underlineHome = useRef(0);\r\n    const homeFont = useRef(0);\r\n    const underlineLogin = useRef(0);\r\n    const loginFont = useRef(0);\r\n    const loginButton = useRef(0);\r\n    const [hoverLogin, setHoverLogin] = useState(0)\r\n    let logged = ()=>{\r\n        return(\r\n            <div style={{display: \"flex\"}}>\r\n            <div style={{display: \"grid\", alignItems:\"center\"}} >\r\n            <FontAwesomeIcon icon={faChild} />\r\n            </div>\r\n            <div style={{paddingLeft: \"2%\"}}>{localStorage.getItem('loginUser')}</div>\r\n            </div>\r\n        )\r\n    }\r\n    let notLogged = ()=>{\r\n        return(\r\n            <div style={{display: \"flex\"}}>\r\n            <div style={{display: \"grid\", alignItems:\"center\"}} >\r\n            <FontAwesomeIcon icon={faChild} />\r\n            </div>            \r\n            <div style={{paddingLeft: \"2%\"}} >\r\n            <h2 style={style.loginButton} ref={loginFont}>LOGIN</h2>\r\n                    <div style={{height: \"2px\", width: \"100%\", background:\"white\",\r\n                     transform: \"scaleX(0)\", transition: \"all 0.3s ease-out\"}} ref={underlineLogin}></div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    const logOut = async ()=>{\r\n         localStorage.clear()\r\n        .then(()=>{\r\n            window.location.reload();\r\n        })\r\n        \r\n    }\r\n\r\n    return(\r\n        <div style={style.navbar}>\r\n            <div style={style.grid1}>\r\n                <div style={{display: \"grid\", alignItems: 'center', justifyContent: 'center'}}>\r\n                <div style={style.homeButton}\r\n                onMouseEnter={()=>{\r\n                    homeFont.current.style.textShadow = \"0 0 10px white, 0 0 50px white\"\r\n                    homeFont.current.style.color = \"white\";\r\n                    underlineHome.current.style.transform = \"scaleX(1)\";\r\n                }}\r\n                onMouseLeave={()=>{\r\n                    homeFont.current.style.color = \"white\";\r\n                    homeFont.current.style.textShadow = \"0 0 0 transparent, 0 0 0 transparent\";\r\n                    underlineHome.current.style.transform = \"scaleX(0)\";\r\n                }}\r\n                >\r\n                    <h2 style={style.homeButton} ref={homeFont}>HOME</h2>\r\n                    <div style={{height: \"2px\", width: \"100%\", background:\"white\",\r\n                     transform: \"scaleX(0)\", transition: \"all 0.3s ease-out\"}} ref={underlineHome}></div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div style={style.canvas} ref={canvas}></div>\r\n            <div style={style.grid1}>\r\n                <div style={{display: \"grid\", alignItems: 'center', justifyContent: 'center', position: \"relative\"}}>\r\n                <Link\r\n                    to={localStorage.getItem('loginUser') ? \"/\" : \"/login\"}\r\n                     style={style.loginButton}\r\n                     ref={loginButton}\r\n                     onMouseEnter={()=>{\r\n                        loginFont.current.style.textShadow = \"0 0 10px white, 0 0 50px white\"\r\n                        loginFont.current.style.color = \"white\";\r\n                        underlineLogin.current.style.transform = \"scaleX(1)\";\r\n                        setHoverLogin(1);\r\n                    }}\r\n                    onMouseLeave={()=>{\r\n                        loginFont.current.style.color = \"white\";\r\n                        loginFont.current.style.textShadow = \"0 0 0 transparent, 0 0 0 transparent\";\r\n                        underlineLogin.current.style.transform = \"scaleX(0)\";   \r\n                        setHoverLogin(0);               \r\n                    }}\r\n                    >{localStorage.getItem('loginUser') ? logged() : notLogged() }</Link>\r\n                 <div style={hoverLogin === 1 ? style.hoverLogin : {display: \"none\", visibility: \"hidden\"}}\r\n                  onMouseEnter={()=>setHoverLogin(1)} onMouseLeave={()=>setHoverLogin(0)}>\r\n                  <Link to={localStorage.getItem('loginUser') ? `/${localStorage.getItem('loginUser')}` : \"/login\"}\r\n                   style={style.dropdown} onMouseEnter={(e)=>{\r\n                       e.currentTarget.style.backgroundColor = \"rgb(50, 30, 50)\";\r\n                       e.currentTarget.style.color = \"white\";\r\n                    }}\r\n                  onMouseLeave={(e)=>{\r\n                  e.currentTarget.style.backgroundColor = \"lightblue\";\r\n                  e.currentTarget.style.color = \"black\";\r\n                  }}>\r\n                <FontAwesomeIcon style={{color: \"rgb(29, 146, 226)\"}} icon={faDiagnoses} />\r\n                  <div style={{paddingLeft: \"2%\"}}>Account</div>\r\n                  </Link>\r\n                  <Link to={localStorage.getItem('loginUser') ? \"/leaderboard\" : \"/login\"} style={style.dropdown}\r\n                   onMouseEnter={(e)=>{\r\n                       e.currentTarget.style.backgroundColor = \"rgb(50, 30, 50)\";\r\n                       e.currentTarget.style.color = \"white\";\r\n                    }}\r\n                  onMouseLeave={(e)=>{ \r\n                  e.currentTarget.style.backgroundColor = \"lightblue\";\r\n                  e.currentTarget.style.color = \"black\";\r\n                  }}>\r\n                 <FontAwesomeIcon style={{color: \"rgb(125, 140, 40)\"}} icon={faTrophy} />\r\n                  <div style={{paddingLeft: \"2%\"}}>Leaderboard</div>\r\n                  </Link>\r\n                  <div onClick={logOut} style={style.dropdown}\r\n                   onMouseEnter={(e)=>{\r\n                       e.currentTarget.style.backgroundColor = \"rgb(50, 30, 50)\";\r\n                       e.currentTarget.style.color = \"white\";\r\n                    }}\r\n                  onMouseLeave={(e)=>{ \r\n                  e.currentTarget.style.backgroundColor = \"lightblue\";\r\n                  e.currentTarget.style.color = \"black\";\r\n                  }}>\r\n                  <FontAwesomeIcon style={{color: \"rgb(125, 140, 40)\"}} icon={faSignOutAlt} />\r\n                  <div style={{paddingLeft: \"2%\"}}>Log out</div>\r\n                  </div>        \r\n                 </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\homeScreen.jsx",["47","48","49","50","51","52","53","54","55"],"import {useRef, useState, useEffect} from 'react'\r\nimport '../App.css';\r\nimport * as THREE from \"three\";\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport TWEEN from '@tweenjs/tween.js'\r\n\r\nimport {Link} from \"react-router-dom\";\r\nimport {text} from '@fortawesome/fontawesome-svg-core';\r\nlet style = {\r\n    container: {\r\n        backgroundColor: 'transparent',\r\n        position: 'absolute',\r\n        top: \"6.5rem\",\r\n        minHeight: '100vh',\r\n        maxHeight: '100vh',\r\n        minWidth: '100%',\r\n        maxWidth: '100%'\r\n    },\r\n    title: {\r\n        display: 'flex',\r\n        color: 'white',\r\n        fontSize: '6rem',\r\n        justifyContent: 'center'\r\n    },\r\n    howToPlay: {\r\n        display: 'flex',\r\n        position: 'relative',\r\n        color: 'white',\r\n        fontSize: '4rem',\r\n        left: '10%',\r\n        width: '90%'\r\n    },\r\n    canvas: {\r\n        display: 'grid',\r\n        position: 'fixed',\r\n        minHeight: '100vh',\r\n        minWidth: '1920px',\r\n        maxWidth: '1920px',\r\n        maxHeight: \"100vh\"\r\n    },\r\n    explanationBox: {\r\n        display: \"none\",\r\n        backgroundColor: \"rgb(80, 100, 40)\",\r\n        width: \"70%\",\r\n        height: \"100vh\",\r\n        left: \"15%\",\r\n        position: \"relative\",\r\n        boxShadow: \"0 10px 20px gray, 0 6px 6px gray\"\r\n    },\r\n    footer: {\r\n        backgroundColor: \"rgb(32, 30, 29)\",\r\n        color: 'white',\r\n        display: 'flex',\r\n        height: '10rem',\r\n        position: \"relative\",\r\n        width: \"100%\",\r\n        top: \"250vh\"\r\n    },\r\n    playButton: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        backgroundColor: \"red\",\r\n        width: \"20%\",\r\n        height: \"10%\",\r\n        position: \"relative\",\r\n        top: \"80%\",\r\n        display: \"flex\",\r\n        left: \"40%\"\r\n    }\r\n}\r\n\r\nconst HomeScreen = () => {\r\n    const canvas = useRef(0);\r\n    const [scene,\r\n        setScene] = useState(\"Scene not set\");\r\n    let obj = useRef(0);\r\n    let switcher = useRef(0)\r\n    let mixer = useRef(0)\r\n    useEffect(() => {\r\n        let height = canvas.current.clientHeight\r\n        let width = canvas.current.clientWidth\r\n\r\n        const scene = new THREE.Scene();\r\n        //scene.add(helper) ONLY FOR DEBUGGING\r\n        const camera = new THREE.PerspectiveCamera(40, width / height, 1, 1500);\r\n        const renderer = new THREE.WebGLRenderer();\r\n        camera\r\n            .position\r\n            .set(0, 0, 4);\r\n        const color = 'white';\r\n        const intensity = 1;\r\n        const light = new THREE.DirectionalLight(color, intensity);\r\n        light\r\n            .position\r\n            .set(0, 0, 3);\r\n        scene.add(light);\r\n        let clock = new THREE.Clock();\r\n        window.addEventListener('resize', () => {\r\n            if (canvas.current !== null) {\r\n                width = canvas.current.clientWidth\r\n                height = canvas.current.clientHeight\r\n                renderer.setSize(width, height);\r\n                camera.aspect = width / height;\r\n                camera.updateProjectionMatrix();\r\n            }\r\n        });\r\n\r\n        //// PARTICLES\r\n        let particleCount = 2000\r\n        let particleDistance = 53;\r\n        let particles = new THREE.Geometry();\r\n        let texture = new THREE\r\n            .TextureLoader()\r\n            .load('leaftexture.png');\r\n        let pMaterial = new THREE.PointsMaterial({\r\n            color: 'green', size: 0.3, map: texture, alphaTest: 0.1, // removes black squares\r\n            blending: THREE.NormalBlending,\r\n            transparent: true\r\n        });\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let posX = (Math.random() - 0.5) * particleDistance;\r\n            let posY = (Math.random() - 0.5) * particleDistance;\r\n            let posZ = (Math.random() - 0.5) * particleDistance;\r\n            let particle = new THREE.Vector3(posX, posY, posZ);\r\n            particles\r\n                .vertices\r\n                .push(particle);\r\n        }\r\n\r\n        // create the particle system\r\n        let particleSys = new THREE.Points(particles, pMaterial);\r\n        particleSys.name = 'particleSys';\r\n        renderer.setAnimationLoop(() => {\r\n            let particleSys = scene.getObjectByName('particleSys');\r\n            particleSys\r\n                .geometry\r\n                .vertices\r\n                .forEach(particle => {\r\n                    particle.y -= 0.01;\r\n                    if (particle.y < -10) {\r\n                        particle.y = 20\r\n                    }\r\n                    particleSys.geometry.verticesNeedUpdate = true;\r\n                })\r\n            renderer.render(scene, camera)\r\n        })\r\n        scene.add(particleSys)\r\n        // CHARACTER ADDON FOR MAIN MENU\r\n        const loader = new GLTFLoader()\r\n        loader.load(\"knight.gltf\", function (object) {\r\n            object.scene.position.x = 0;\r\n            object.scene.position.y = -2;\r\n            object.scene.position.z = -2;\r\n            object\r\n                .scene\r\n                .scale\r\n                .set(1.2, 1.2, 1.2)\r\n            obj.current = object;\r\n            mixer.current = new THREE.AnimationMixer(obj.current.scene);\r\n            scene.add(obj.current.scene);\r\n            animationOne();\r\n            switcher.current = 1\r\n        },);\r\n        // setTimeout(()=>mixer.clipAction(obj.animations[1]).play(), 8000)// WORKS\r\n\r\n        renderer.setSize(width, height)\r\n        canvas\r\n            .current\r\n            .appendChild(renderer.domElement)\r\n        const textu = new THREE\r\n            .TextureLoader()\r\n            .load(\"/textures/background.jpg\");\r\n        textu.minFilter = THREE.LinearFilter;\r\n        scene.background = textu;\r\n        const animate = () => {\r\n            let delta = clock.getDelta();\r\n            if (switcher.current === 1) {\r\n                mixer\r\n                    .current\r\n                    .update(delta)\r\n                renderer.render(scene, camera)\r\n            }\r\n            renderer.render(scene, camera)\r\n            window.requestAnimationFrame(animate);\r\n        }\r\n        animate()\r\n        const animationOne = () => {\r\n            let action = mixer\r\n                .current\r\n                .clipAction(obj.current.animations[15])\r\n            action.play()\r\n            action.clampWhenFinished = true;\r\n            setTimeout(() => {\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[5])\r\n                action.play();\r\n                action.clampWhenFinished = true;\r\n                let tween = new TWEEN\r\n                    .Tween(obj.current.scene.rotation)\r\n                    .to({\r\n                        x: 0,\r\n                        y: 2,\r\n                        z: 0\r\n                    }, 1000)\r\n                    .onComplete(() => {\r\n                        let tween = new TWEEN\r\n                            .Tween(obj.current.scene.position)\r\n                            .to({\r\n                                x: 1,\r\n                                y: -2,\r\n                                z: -2\r\n                            }, 1000)\r\n                            .onComplete(() => {\r\n                                action.stop();\r\n                                animationTwo();\r\n                            })\r\n                            .start()\r\n                        let animateTween = (time) => {\r\n                            TWEEN.update(time)\r\n                            requestAnimationFrame(animateTween)\r\n                        }\r\n                        requestAnimationFrame(animateTween)\r\n                    })\r\n                    .start()\r\n                let animateTween = (time) => {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            }, 5000)\r\n        }\r\n        const animationTwo = () => {\r\n            setTimeout(() => {\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[5])\r\n                action.play();\r\n                action.clampWhenFinished = true;\r\n                let tween = new TWEEN\r\n                    .Tween(obj.current.scene.rotation)\r\n                    .to({\r\n                        x: 0,\r\n                        y: -1,\r\n                        z: 0\r\n                    }, 1000)\r\n                    .onComplete(() => {\r\n                        let tween = new TWEEN\r\n                            .Tween(obj.current.scene.position)\r\n                            .to({\r\n                                x: -1,\r\n                                y: -2,\r\n                                z: -2\r\n                            }, 2000)\r\n                            .onComplete(() => {\r\n                                action.stop();\r\n                                animationThree();\r\n                            })\r\n                            .start()\r\n                        let animateTween = (time) => {\r\n                            TWEEN.update(time)\r\n                            requestAnimationFrame(animateTween)\r\n                        }\r\n                        requestAnimationFrame(animateTween)\r\n                    })\r\n                    .start()\r\n                let animateTween = (time) => {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            }, 5000)\r\n        }\r\n\r\n        const animationThree = () => {\r\n            setTimeout(() => {\r\n                let action = mixer\r\n                    .current\r\n                    .clipAction(obj.current.animations[5])\r\n                action.play();\r\n                action.clampWhenFinished = true;\r\n                let tween = new TWEEN\r\n                    .Tween(obj.current.scene.rotation)\r\n                    .to({\r\n                        x: 0,\r\n                        y: 2,\r\n                        z: 0\r\n                    }, 1000)\r\n                    .onComplete(() => {\r\n                        let tween = new TWEEN\r\n                            .Tween(obj.current.scene.position)\r\n                            .to({\r\n                                x: 1,\r\n                                y: -2,\r\n                                z: -2\r\n                            }, 2000)\r\n                            .onComplete(() => {\r\n                                action.stop();\r\n                                animationTwo();\r\n                            })\r\n                            .start()\r\n                        let animateTween = (time) => {\r\n                            TWEEN.update(time)\r\n                            requestAnimationFrame(animateTween)\r\n                        }\r\n                        requestAnimationFrame(animateTween)\r\n                    })\r\n                    .start()\r\n                let animateTween = (time) => {\r\n                    TWEEN.update(time)\r\n                    requestAnimationFrame(animateTween)\r\n                }\r\n                requestAnimationFrame(animateTween)\r\n            }, 5000)\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div ref={canvas} style={style.canvas}></div>\r\n            <div style={style.container}>\r\n                <div className=\"title\" style={style.title}>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>G</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(125, 140, 40)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>a</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(70, 75, 68)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>m</span>\r\n                    <span\r\n                        style={{\r\n                        transition: 'all 1s ease-out'\r\n                    }}\r\n                        onMouseEnter={(t) => {\r\n                        t.currentTarget.style.animation = 'loading 1s normal forwards ease-in-out';\r\n                        t.currentTarget.style.color = \"rgb(29, 146, 226)\"\r\n                    }}\r\n                        onAnimationEnd={(t) => {\r\n                        t.currentTarget.style.animation = 'none';\r\n                        t.currentTarget.style.color = \"white\"\r\n                    }}>e</span>\r\n                </div>\r\n                <div style={style.howToPlay}>How to play:</div>\r\n                <div style={style.explanationBox}>\r\n                    <div>HERE GOES GRAPHIC STUFF DISPLAYING INSTRUCTIONS</div>\r\n                    <div style={style.playButton}>\r\n                        <Link\r\n                            to=\"/game\"\r\n                            style={{\r\n                            textDecoration: \"none\",\r\n                            display: \"grid\",\r\n                            color: \"white\",\r\n                            width: \"100%\",\r\n                            heigth: \"100%\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\"\r\n                        }}>Play</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={style.footer}>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default HomeScreen","C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\login.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\pageContext.jsx",[],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\game.jsx",["56"],"C:\\Users\\Laura\\Desktop\\frontendAPI\\frontendapi\\src\\components\\account.jsx",["57","58","59"],"import axios from 'axios';\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport { Redirect } from 'react-router';\r\n\r\n\r\n\r\nlet style = {\r\n    backgroundLogin: {\r\n        minWidth: '100%',\r\n        maxWidth: '100%',\r\n        minHeight: '100vh',\r\n        maxHeight: '100vh',\r\n        backgroundColor: 'red',\r\n        display: 'grid',\r\n        color: 'black',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    insideLogin: {\r\n        minHeight: \"500px\",\r\n        maxHeight: \"500px\",\r\n        minWidth: \"500px\",\r\n        maxWidth: \"500px\",\r\n        backgroundColor: \"white\",\r\n        display: \"grid\"\r\n    }\r\n}\r\n\r\n\r\nconst Account = ()=>{\r\n    const input = useRef(null);\r\n    const [userInfo, setUserInfo] = useState(\"\")\r\n    useEffect(()=>{\r\n        axios.post('http://localhost:8080/account', \r\n        {},\r\n        {headers: {\r\n            // Overwrite Axios's automatically set Content-Type\r\n            'Content-Type': 'application/json'\r\n            `Bearer ${localStorage.getItem('user')}`\r\n          }\r\n        }\r\n        )\r\n        .then((res)=>{\r\n            console.log(res.data)\r\n        })\r\n        .catch(error => {\r\n            console.log(error.response)\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <div style={style.backgroundLogin}>\r\n            <div style={style.insideLogin}>\r\n                <div style={{display: \"grid\", justifyContent: \"center\", alignItems: \"center\"}}>Welcome back!</div>\r\n                <input ref={input}></input>\r\n                <div>Welcome back!</div>\r\n                <div>Welcome back!</div>\r\n                <div>Welcome back!</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Account",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":8,"column":20,"nodeType":"66","messageId":"67","endLine":8,"endColumn":26},{"ruleId":"64","severity":1,"message":"68","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":20},{"ruleId":"64","severity":1,"message":"69","line":8,"column":9,"nodeType":"66","messageId":"67","endLine":8,"endColumn":13},{"ruleId":"64","severity":1,"message":"70","line":74,"column":12,"nodeType":"66","messageId":"67","endLine":74,"endColumn":17},{"ruleId":"64","severity":1,"message":"71","line":75,"column":9,"nodeType":"66","messageId":"67","endLine":75,"endColumn":17},{"ruleId":"64","severity":1,"message":"72","line":199,"column":21,"nodeType":"66","messageId":"67","endLine":199,"endColumn":26},{"ruleId":"64","severity":1,"message":"72","line":207,"column":29,"nodeType":"66","messageId":"67","endLine":207,"endColumn":34},{"ruleId":"64","severity":1,"message":"72","line":240,"column":21,"nodeType":"66","messageId":"67","endLine":240,"endColumn":26},{"ruleId":"64","severity":1,"message":"72","line":248,"column":29,"nodeType":"66","messageId":"67","endLine":248,"endColumn":34},{"ruleId":"64","severity":1,"message":"72","line":282,"column":21,"nodeType":"66","messageId":"67","endLine":282,"endColumn":26},{"ruleId":"64","severity":1,"message":"72","line":290,"column":29,"nodeType":"66","messageId":"67","endLine":290,"endColumn":34},{"ruleId":"64","severity":1,"message":"73","line":7,"column":7,"nodeType":"66","messageId":"67","endLine":7,"endColumn":20},{"ruleId":"64","severity":1,"message":"74","line":3,"column":10,"nodeType":"66","messageId":"67","endLine":3,"endColumn":18},{"ruleId":"64","severity":1,"message":"75","line":32,"column":12,"nodeType":"66","messageId":"67","endLine":32,"endColumn":20},{"ruleId":"64","severity":1,"message":"76","line":32,"column":22,"nodeType":"66","messageId":"67","endLine":32,"endColumn":33},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'text' is defined but never used.","'scene' is assigned a value but never used.","'setScene' is assigned a value but never used.","'tween' is assigned a value but never used.","'OrbitControls' is assigned a value but never used.","'Redirect' is defined but never used.","'userInfo' is assigned a value but never used.","'setUserInfo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]